var GLOBAL_VAR = {
    KLineAllData: new Object,
    KLineData: new Object,
    time_type: "3min",
    market_from: "1",
    market_from_name: "YUANBAOHUI",
    limit: "1000",
    requestParam: "",
    chartMgr: null,
    G_HTTP_REQUEST: null,
    TimeOutId: null,
    button_down: false,
    init: false,
    url: "/qq3479015851/qq3479015851_kline_h_kline"
};
GLOBAL_VAR.periodMap = {
    "01w": "1week",
    "03d": "3day",
    "01d": "1day",
    "12h": "12hour",
    "06h": "6hour",
    "04h": "4hour",
    "02h": "2hour",
    "01h": "1hour",
    "30m": "30min",
    "15m": "15min",
    "05m": "5min",
    "03m": "3min",
    "01m": "1min"
};
GLOBAL_VAR.tagMapPeriod = {
    "1w": "01w",
    "3d": "03d",
    "1d": "01d",
    "12h": "12h",
    "6h": "06h",
    "4h": "04h",
    "2h": "02h",
    "1h": "01h",
    "30m": "30m",
    "15m": "15m",
    "5m": "05m",
    "3m": "03m",
    "1m": "01m"
};
var classId = 0;
function create_class() {
    var t = arguments.length;
    var e = function () {
    };
    var r;
    if (t) {
        r = arguments[0];
        for (var a in r.prototype) {
            e.prototype[a] = r.prototype[a]
        }
    }
    for (var i = 1; i < t; i++) {
        var o = arguments[i];
        var n = o.prototype.__construct;
        if (n) {
            if (!e.prototype.__featureConstructors) {
                e.prototype.__featureConstructors = []
            }
            e.prototype.__featureConstructors.push(n);
            delete o.prototype.__construct
        }
        for (var a in o.prototype) {
            e.prototype[a] = o.prototype[a]
        }
        if (n) {
            o.prototype.__construct = n
        }
    }
    var s = function () {
        if (this.__construct) {
            this.__construct.apply(this, arguments)
        }
        if (this.__featureConstructors) {
            var t = this.__featureConstructors;
            var e, r = t.length;
            for (e = 0; e < r; e++) {
                t[e].apply(this, arguments)
            }
        }
    };
    e.prototype.__classId = classId++;
    if (r != undefined) {
        s.__super = r.prototype;
        e.prototype.__super = r
    }
    s.prototype = new e;
    return s
}
function is_instance(t, e) {
    var r = e.prototype.__classId;
    if (t.__classId == r) {
        return true
    }
    var a = t.__super;
    while (a != undefined) {
        if (a.prototype.__classId == r) {
            return true
        }
        a = a.prototype.__super
    }
    return false
}
var MEvent = create_class();
MEvent.prototype.__construct = function () {
    this._handlers = []
};
MEvent.prototype.addHandler = function (t, e) {
    if (this._indexOf(t, e) < 0) {
        this._handlers.push({obj: t, func: e})
    }
};
MEvent.prototype.removeHandler = function (t, e) {
    var r = this._indexOf(t, e);
    if (r >= 0) {
        this._handlers.splice(r, 1)
    }
};
MEvent.prototype.raise = function (t, e) {
    var r = this._handlers;
    var a, i, o = r.length;
    for (i = 0; i < o; i++) {
        a = r[i];
        a.func.call(a.obj, t, e)
    }
};
MEvent.prototype._indexOf = function (t, e) {
    var r = this._handlers;
    var a, i, o = r.length;
    for (i = 0; i < o; i++) {
        a = r[i];
        if (t == a.obj && e == a.func) {
            return i
        }
    }
    return -1
};
String.fromFloat = function (t, e) {
    var r = t.toFixed(e);
    for (var a = r.length - 1; a >= 0; a--) {
        if (r[a] == ".") {
            return r.substring(0, a)
        }
        if (r[a] != "0") {
            return r.substring(0, a + 1)
        }
    }
};
var ExprEnv = create_class();
ExprEnv.get = function () {
    return ExprEnv.inst
};
ExprEnv.set = function (t) {
    ExprEnv.inst = t
};
ExprEnv.prototype.getDataSource = function () {
    return this._ds
};
ExprEnv.prototype.setDataSource = function (t) {
    return this._ds = t
};
ExprEnv.prototype.getFirstIndex = function () {
    return this._firstIndex
};
ExprEnv.prototype.setFirstIndex = function (t) {
    return this._firstIndex = t
};
var Expr = create_class();
Expr.prototype.__construct = function () {
    this._rid = 0
};
Expr.prototype.execute = function (t) {
};
Expr.prototype.reserve = function (t, e) {
};
Expr.prototype.clear = function () {
};
var OpenExpr = create_class(Expr);
var HighExpr = create_class(Expr);
var LowExpr = create_class(Expr);
var CloseExpr = create_class(Expr);
var VolumeExpr = create_class(Expr);
OpenExpr.prototype.execute = function (t) {
    return ExprEnv.get()._ds.getDataAt(t).open
};
HighExpr.prototype.execute = function (t) {
    return ExprEnv.get()._ds.getDataAt(t).high
};
LowExpr.prototype.execute = function (t) {
    return ExprEnv.get()._ds.getDataAt(t).low
};
CloseExpr.prototype.execute = function (t) {
    return ExprEnv.get()._ds.getDataAt(t).close
};
VolumeExpr.prototype.execute = function (t) {
    return ExprEnv.get()._ds.getDataAt(t).volume
};
var ConstExpr = create_class(Expr);
ConstExpr.prototype.__construct = function (t) {
    ConstExpr.__super.__construct.call(this);
    this._value = t
};
ConstExpr.prototype.execute = function (t) {
    return this._value
};
var ParameterExpr = create_class(Expr);
ParameterExpr.prototype.__construct = function (t, e, r, a) {
    ParameterExpr.__super.__construct.call(this);
    this._name = t;
    this._minValue = e;
    this._maxValue = r;
    this._value = this._defaultValue = a
};
ParameterExpr.prototype.execute = function (t) {
    return this._value
};
ParameterExpr.prototype.getMinValue = function () {
    return this._minValue
};
ParameterExpr.prototype.getMaxValue = function () {
    return this._maxValue
};
ParameterExpr.prototype.getDefaultValue = function () {
    return this._defaultValue
};
ParameterExpr.prototype.getValue = function () {
    return this._value
};
ParameterExpr.prototype.setValue = function (t) {
    if (t == 0) {
        this._value = 0
    } else {
        if (t < this._minValue) {
            this._value = this._minValue
        } else {
            if (t > this._maxValue) {
                this._value = this._maxValue
            } else {
                this._value = t
            }
        }
    }
};
var OpAExpr = create_class(Expr);
var OpABExpr = create_class(Expr);
var OpABCExpr = create_class(Expr);
var OpABCDExpr = create_class(Expr);
OpAExpr.prototype.__construct = function (t) {
    OpAExpr.__super.__construct.call(this);
    this._exprA = t
};
OpAExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        this._rid = t;
        this._exprA.reserve(t, e)
    }
};
OpAExpr.prototype.clear = function () {
    this._exprA.clear()
};
OpABExpr.prototype.__construct = function (t, e) {
    OpABExpr.__super.__construct.call(this);
    this._exprA = t;
    this._exprB = e
};
OpABExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        this._rid = t;
        this._exprA.reserve(t, e);
        this._exprB.reserve(t, e)
    }
};
OpABExpr.prototype.clear = function () {
    this._exprA.clear();
    this._exprB.clear()
};
OpABCExpr.prototype.__construct = function (t, e, r) {
    OpABCExpr.__super.__construct.call(this);
    this._exprA = t;
    this._exprB = e;
    this._exprC = r
};
OpABCExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        this._rid = t;
        this._exprA.reserve(t, e);
        this._exprB.reserve(t, e);
        this._exprC.reserve(t, e)
    }
};
OpABCExpr.prototype.clear = function () {
    this._exprA.clear();
    this._exprB.clear();
    this._exprC.clear()
};
OpABCDExpr.prototype.__construct = function (t, e, r, a) {
    OpABCDExpr.__super.__construct.call(this);
    this._exprA = t;
    this._exprB = e;
    this._exprC = r;
    this._exprD = a
};
OpABCDExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        this._rid = t;
        this._exprA.reserve(t, e);
        this._exprB.reserve(t, e);
        this._exprC.reserve(t, e);
        this._exprD.reserve(t, e)
    }
};
OpABCDExpr.prototype.clear = function () {
    this._exprA.clear();
    this._exprB.clear();
    this._exprC.clear();
    this._exprD.clear()
};
var NegExpr = create_class(OpAExpr);
NegExpr.prototype.__construct = function (t) {
    NegExpr.__super.__construct.call(this, t)
};
NegExpr.prototype.execute = function (t) {
    return -this._exprA.execute(t)
};
var AddExpr = create_class(OpABExpr);
var SubExpr = create_class(OpABExpr);
var MulExpr = create_class(OpABExpr);
var DivExpr = create_class(OpABExpr);
AddExpr.prototype.__construct = function (t, e) {
    AddExpr.__super.__construct.call(this, t, e)
};
SubExpr.prototype.__construct = function (t, e) {
    SubExpr.__super.__construct.call(this, t, e)
};
MulExpr.prototype.__construct = function (t, e) {
    MulExpr.__super.__construct.call(this, t, e)
};
DivExpr.prototype.__construct = function (t, e) {
    DivExpr.__super.__construct.call(this, t, e)
};
AddExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) + this._exprB.execute(t)
};
SubExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) - this._exprB.execute(t)
};
MulExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) * this._exprB.execute(t)
};
DivExpr.prototype.execute = function (t) {
    var e = this._exprA.execute(t);
    var r = this._exprB.execute(t);
    if (e == 0) {
        return e
    }
    if (r == 0) {
        return e > 0 ? 1e6 : -1e6
    }
    return e / r
};
var GtExpr = create_class(OpABExpr);
var GeExpr = create_class(OpABExpr);
var LtExpr = create_class(OpABExpr);
var LeExpr = create_class(OpABExpr);
var EqExpr = create_class(OpABExpr);
GtExpr.prototype.__construct = function (t, e) {
    GtExpr.__super.__construct.call(this, t, e)
};
GeExpr.prototype.__construct = function (t, e) {
    GeExpr.__super.__construct.call(this, t, e)
};
LtExpr.prototype.__construct = function (t, e) {
    LtExpr.__super.__construct.call(this, t, e)
};
LeExpr.prototype.__construct = function (t, e) {
    LeExpr.__super.__construct.call(this, t, e)
};
EqExpr.prototype.__construct = function (t, e) {
    EqExpr.__super.__construct.call(this, t, e)
};
GtExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) > this._exprB.execute(t) ? 1 : 0
};
GeExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) >= this._exprB.execute(t) ? 1 : 0
};
LtExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) < this._exprB.execute(t) ? 1 : 0
};
LeExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) <= this._exprB.execute(t) ? 1 : 0
};
EqExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) == this._exprB.execute(t) ? 1 : 0
};
var MaxExpr = create_class(OpABExpr);
MaxExpr.prototype.__construct = function (t, e) {
    MaxExpr.__super.__construct.call(this, t, e)
};
MaxExpr.prototype.execute = function (t) {
    return Math.max(this._exprA.execute(t), this._exprB.execute(t))
};
var AbsExpr = create_class(OpAExpr);
AbsExpr.prototype.__construct = function (t) {
    AbsExpr.__super.__construct.call(this, t)
};
AbsExpr.prototype.execute = function (t) {
    return Math.abs(this._exprA.execute(t))
};
var RefExpr = create_class(OpABExpr);
RefExpr.prototype.__construct = function (t, e) {
    RefExpr.__super.__construct.call(this, t, e);
    this._offset = -1
};
RefExpr.prototype.execute = function (t) {
    if (this._offset < 0) {
        this._offset = this._exprB.execute(t);
        if (this._offset < 0) {
            throw"offset < 0"
        }
    }
    t -= this._offset;
    if (t < 0) {
        throw"index < 0"
    }
    var e = this._exprA.execute(t);
    if (isNaN(e)) {
        throw"NaN"
    }
    return e
};
var AndExpr = create_class(OpABExpr);
var OrExpr = create_class(OpABExpr);
AndExpr.prototype.__construct = function (t, e) {
    AndExpr.__super.__construct.call(this, t, e)
};
OrExpr.prototype.__construct = function (t, e) {
    OrExpr.__super.__construct.call(this, t, e)
};
AndExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) != 0 && this._exprB.execute(t) != 0 ? 1 : 0
};
OrExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) != 0 || this._exprB.execute(t) != 0 ? 1 : 0
};
var IfExpr = create_class(OpABCExpr);
IfExpr.prototype.__construct = function (t, e, r) {
    IfExpr.__super.__construct.call(this, t, e, r)
};
IfExpr.prototype.execute = function (t) {
    return this._exprA.execute(t) != 0 ? this._exprB.execute(t) : this._exprC.execute(t)
};
var AssignExpr = create_class(OpAExpr);
AssignExpr.prototype.__construct = function (t, e) {
    AssignExpr.__super.__construct.call(this, e);
    this._name = t;
    this._buf = []
};
AssignExpr.prototype.getName = function () {
    return this._name
};
AssignExpr.prototype.execute = function (t) {
    return this._buf[t]
};
AssignExpr.prototype.assign = function (t) {
    this._buf[t] = this._exprA.execute(t);
    if (ExprEnv.get()._firstIndex >= 0) {
        if (isNaN(this._buf[t]) && !isNaN(this._buf[t - 1])) {
            throw this._name + ".assign(" + t + "): NaN"
        }
    }
};
AssignExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        for (var r = e; r > 0; r--) {
            this._buf.push(NaN)
        }
    }
    AssignExpr.__super.reserve.call(this, t, e)
};
AssignExpr.prototype.clear = function () {
    AssignExpr.__super.clear.call(this);
    this._buf = []
};
var OutputStyle = {None: 0, Line: 1, VolumeStick: 2, MACDStick: 3, SARPoint: 4};
var OutputExpr = create_class(AssignExpr);
OutputExpr.prototype.__construct = function (t, e, r, a) {
    OutputExpr.__super.__construct.call(this, t, e);
    this._style = r === undefined ? OutputStyle.Line : r;
    this._color = a
};
OutputExpr.prototype.getStyle = function () {
    return this._style
};
OutputExpr.prototype.getColor = function () {
    return this._color
};
var RangeOutputExpr = create_class(OutputExpr);
RangeOutputExpr.prototype.__construct = function (t, e, r, a) {
    RangeOutputExpr.__super.__construct.call(this, t, e, r, a)
};
RangeOutputExpr.prototype.getName = function () {
    return this._name + this._exprA.getRange()
};
var RangeExpr = create_class(OpABExpr);
RangeExpr.prototype.__construct = function (t, e) {
    RangeExpr.__super.__construct.call(this, t, e);
    this._range = -1;
    this._buf = []
};
RangeExpr.prototype.getRange = function () {
    return this._range
};
RangeExpr.prototype.initRange = function () {
    this._range = this._exprB.execute(0)
};
RangeExpr.prototype.execute = function (t) {
    if (this._range < 0) {
        this.initRange()
    }
    var e = this._buf[t].resultA = this._exprA.execute(t);
    var r = this._buf[t].result = this.calcResult(t, e);
    return r
};
RangeExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        for (var r = e; r > 0; r--) {
            this._buf.push({resultA: NaN, result: NaN})
        }
    }
    RangeExpr.__super.reserve.call(this, t, e)
};
RangeExpr.prototype.clear = function () {
    RangeExpr.__super.clear.call(this);
    this._range = -1;
    this._buf = []
};
var HhvExpr = create_class(RangeExpr);
var LlvExpr = create_class(RangeExpr);
HhvExpr.prototype.__construct = function (t, e) {
    HhvExpr.__super.__construct.call(this, t, e)
};
LlvExpr.prototype.__construct = function (t, e) {
    LlvExpr.__super.__construct.call(this, t, e)
};
HhvExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        var i = e;
        var o = t - a + 1;
        var n = Math.max(r, o);
        for (; n < t; n++) {
            var s = this._buf[n];
            if (i < s.resultA) {
                i = s.resultA
            }
        }
        return i
    } else {
        return e
    }
};
LlvExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        var i = e;
        var o = t - a + 1;
        var n = Math.max(r, o);
        for (; n < t; n++) {
            var s = this._buf[n];
            if (i > s.resultA) {
                i = s.resultA
            }
        }
        return i
    } else {
        return e
    }
};
var CountExpr = create_class(RangeExpr);
CountExpr.prototype.__construct = function (t, e) {
    CountExpr.__super.__construct.call(this, t, e)
};
CountExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return 0
    }
    if (t >= r) {
        var a = this._range - 1;
        if (a > t - r) {
            a = t - r
        }
        var i = 0;
        for (; a >= 0; a--) {
            if (this._buf[t - a].resultA != 0) {
                i++
            }
        }
        return i
    } else {
        return 0
    }
};
var SumExpr = create_class(RangeExpr);
SumExpr.prototype.__construct = function (t, e) {
    SumExpr.__super.__construct.call(this, t, e)
};
SumExpr.prototype.calcResult = function (t, e) {
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        if (a == 0 || a >= t + 1 - r) {
            return this._buf[t - 1].result + e
        }
        return this._buf[t - 1].result + e - this._buf[t - a].resultA
    } else {
        return e
    }
};
var StdExpr = create_class(RangeExpr);
StdExpr.prototype.__construct = function (t, e) {
    StdExpr.__super.__construct.call(this, t, e)
};
StdExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = this._stdBuf[t];
    var a = ExprEnv.get()._firstIndex;
    if (a < 0) {
        r.resultMA = e;
        return 0
    }
    if (t > a) {
        var i = this._range;
        if (i >= t + 1 - a) {
            i = t + 1 - a;
            r.resultMA = this._stdBuf[t - 1].resultMA * (1 - 1 / i) + e / i
        } else {
            r.resultMA = this._stdBuf[t - 1].resultMA + (e - this._buf[t - i].resultA) / i
        }
        var o = 0;
        for (var n = t - i + 1; n <= t; n++) {
            o += Math.pow(this._buf[n].resultA - r.resultMA, 2)
        }
        return Math.sqrt(o / i)
    }
    r.resultMA = e;
    return 0
};
StdExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        for (var r = e; r > 0; r--) {
            this._stdBuf.push({resultMA: NaN})
        }
    }
    StdExpr.__super.reserve.call(this, t, e)
};
StdExpr.prototype.clear = function () {
    StdExpr.__super.clear.call(this);
    this._stdBuf = []
};
var MaExpr = create_class(RangeExpr);
MaExpr.prototype.__construct = function (t, e) {
    MaExpr.__super.__construct.call(this, t, e)
};
MaExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        if (a >= t + 1 - r) {
            a = t + 1 - r;
            return this._buf[t - 1].result * (1 - 1 / a) + e / a
        }
        return this._buf[t - 1].result + (e - this._buf[t - a].resultA) / a
    } else {
        return e
    }
};
var EmaExpr = create_class(RangeExpr);
EmaExpr.prototype.__construct = function (t, e) {
    EmaExpr.__super.__construct.call(this, t, e)
};
EmaExpr.prototype.initRange = function () {
    EmaExpr.__super.initRange.call(this);
    this._alpha = 2 / (this._range + 1)
};
EmaExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._buf[t - 1];
        return this._alpha * (e - a.result) + a.result
    }
    return e
};
var ExpmemaExpr = create_class(EmaExpr);
ExpmemaExpr.prototype.__construct = function (t, e) {
    ExpmemaExpr.__super.__construct.call(this, t, e)
};
ExpmemaExpr.prototype.calcResult = function (t, e) {
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        var i = this._buf[t - 1];
        if (a >= t + 1 - r) {
            a = t + 1 - r;
            return i.result * (1 - 1 / a) + e / a
        }
        return this._alpha * (e - i.result) + i.result
    }
    return e
};
var SmaExpr = create_class(RangeExpr);
SmaExpr.prototype.__construct = function (t, e, r) {
    SmaExpr.__super.__construct.call(this, t, e);
    this._exprC = r;
    this._mul
};
SmaExpr.prototype.initRange = function () {
    SmaExpr.__super.initRange.call(this);
    this._mul = this._exprC.execute(0)
};
SmaExpr.prototype.calcResult = function (t, e) {
    if (this._range == 0) {
        return NaN
    }
    var r = ExprEnv.get()._firstIndex;
    if (r < 0) {
        return e
    }
    if (t > r) {
        var a = this._range;
        if (a > t + 1 - r) {
            a = t + 1 - r
        }
        return ((a - 1) * this._buf[t - 1].result + e * this._mul) / a
    }
    return e
};
var SarExpr = create_class(OpABCDExpr);
SarExpr.prototype.__construct = function (t, e, r, a) {
    SarExpr.__super.__construct.call(this, t, e, r, a);
    this._buf = [];
    this._range = -1;
    this._min;
    this._step;
    this._max
};
SarExpr.prototype.execute = function (t) {
    if (this._range < 0) {
        this._range = this._exprA.execute(0);
        this._min = this._exprB.execute(0) / 100;
        this._step = this._exprC.execute(0) / 100;
        this._max = this._exprD.execute(0) / 100
    }
    var e = this._buf[t];
    var r = ExprEnv.get();
    var a = r._firstIndex;
    if (a < 0) {
        e.longPos = true;
        e.sar = r._ds.getDataAt(t).low;
        e.ep = r._ds.getDataAt(t).high;
        e.af = .02
    } else {
        var i = r._ds.getDataAt(t).high;
        var o = r._ds.getDataAt(t).low;
        var n = this._buf[t - 1];
        e.sar = n.sar + n.af * (n.ep - n.sar);
        if (n.longPos) {
            e.longPos = true;
            if (i > n.ep) {
                e.ep = i;
                e.af = Math.min(n.af + this._step, this._max)
            } else {
                e.ep = n.ep;
                e.af = n.af
            }
            if (e.sar > o) {
                e.longPos = false;
                var s = t - this._range + 1;
                for (s = Math.max(s, a); s < t; s++) {
                    var h = r._ds.getDataAt(s).high;
                    if (i < h) {
                        i = h
                    }
                }
                e.sar = i;
                e.ep = o;
                e.af = .02
            }
        } else {
            e.longPos = false;
            if (o < n.ep) {
                e.ep = o;
                e.af = Math.min(n.af + this._step, this._max)
            } else {
                e.ep = n.ep;
                e.af = n.af
            }
            if (e.sar < i) {
                e.longPos = true;
                var s = t - this._range + 1;
                for (s = Math.max(s, a); s < t; s++) {
                    var l = r._ds.getDataAt(s).low;
                    if (o > l) {
                        o = l
                    }
                }
                e.sar = o;
                e.ep = i;
                e.af = .02
            }
        }
    }
    return e.sar
};
SarExpr.prototype.reserve = function (t, e) {
    if (this._rid < t) {
        for (var r = e; r > 0; r--) {
            this._buf.push({longPos: true, sar: NaN, ep: NaN, af: NaN})
        }
    }
    SarExpr.__super.reserve.call(this, t, e)
};
SarExpr.prototype.clear = function () {
    SarExpr.__super.clear.call(this);
    this._range = -1
};
var Indicator = create_class();
Indicator.prototype.__construct = function () {
    this._exprEnv = new ExprEnv;
    this._rid = 0;
    this._params = [];
    this._assigns = [];
    this._outputs = []
};
Indicator.prototype.addParameter = function (t) {
    this._params.push(t)
};
Indicator.prototype.addAssign = function (t) {
    this._assigns.push(t)
};
Indicator.prototype.addOutput = function (t) {
    this._outputs.push(t)
};
Indicator.prototype.getParameterCount = function () {
    return this._params.length
};
Indicator.prototype.getParameterAt = function (t) {
    return this._params[t]
};
Indicator.prototype.getOutputCount = function () {
    return this._outputs.length
};
Indicator.prototype.getOutputAt = function (t) {
    return this._outputs[t]
};
Indicator.prototype.clear = function () {
    this._exprEnv.setFirstIndex(-1);
    var t, e;
    e = this._assigns.length;
    for (t = 0; t < e; t++) {
        this._assigns[t].clear()
    }
    e = this._outputs.length;
    for (t = 0; t < e; t++) {
        this._outputs[t].clear()
    }
};
Indicator.prototype.reserve = function (t) {
    this._rid++;
    var e, r;
    r = this._assigns.length;
    for (e = 0; e < r; e++) {
        this._assigns[e].reserve(this._rid, t)
    }
    r = this._outputs.length;
    for (e = 0; e < r; e++) {
        this._outputs[e].reserve(this._rid, t)
    }
};
Indicator.prototype.execute = function (t, e) {
    if (e < 0) {
        return
    }
    this._exprEnv.setDataSource(t);
    ExprEnv.set(this._exprEnv);
    try {
        var r, a;
        a = this._assigns.length;
        for (r = 0; r < a; r++) {
            this._assigns[r].assign(e)
        }
        a = this._outputs.length;
        for (r = 0; r < a; r++) {
            this._outputs[r].assign(e)
        }
        if (this._exprEnv.getFirstIndex() < 0) {
            this._exprEnv.setFirstIndex(e)
        }
    } catch (i) {
        if (this._exprEnv.getFirstIndex() >= 0) {
            alert(i);
            throw i
        }
    }
};
Indicator.prototype.getParameters = function () {
    var t = [];
    var e, r = this._params.length;
    for (e = 0; e < r; e++) {
        t.push(this._params[e].getValue())
    }
    return t
};
Indicator.prototype.setParameters = function (t) {
    if (t instanceof Array && t.length == this._params.length) {
        for (var e in this._params) {
            this._params[e].setValue(t[e])
        }
    }
};
var HLCIndicator = create_class(Indicator);
HLCIndicator.prototype.__construct = function () {
    HLCIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("M1", 2, 1e3, 60);
    this.addParameter(t);
    this.addOutput(new OutputExpr("HIGH", new HighExpr, OutputStyle.None));
    this.addOutput(new OutputExpr("LOW", new LowExpr, OutputStyle.None));
    this.addOutput(new OutputExpr("CLOSE", new CloseExpr, OutputStyle.Line, Theme.Color.Indicator0));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, t), OutputStyle.Line, Theme.Color.Indicator1))
};
HLCIndicator.prototype.getName = function () {
    return "CLOSE"
};
var MAIndicator = create_class(Indicator);
MAIndicator.prototype.__construct = function () {
    MAIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("M1", 2, 1e3, 7);
    var e = new ParameterExpr("M2", 2, 1e3, 30);
    var r = new ParameterExpr("M3", 2, 1e3, 0);
    var a = new ParameterExpr("M4", 2, 1e3, 0);
    var i = new ParameterExpr("M5", 2, 1e3, 0);
    var o = new ParameterExpr("M6", 2, 1e3, 0);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    this.addParameter(a);
    this.addParameter(i);
    this.addParameter(o);
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, t)));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, e)));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, r)));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, a)));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, i)));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(new CloseExpr, o)))
};
MAIndicator.prototype.getName = function () {
    return "MA"
};
var EMAIndicator = create_class(Indicator);
EMAIndicator.prototype.__construct = function () {
    EMAIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("M1", 2, 1e3, 7);
    var e = new ParameterExpr("M2", 2, 1e3, 30);
    var r = new ParameterExpr("M3", 2, 1e3, 0);
    var a = new ParameterExpr("M4", 2, 1e3, 0);
    var i = new ParameterExpr("M5", 2, 1e3, 0);
    var o = new ParameterExpr("M6", 2, 1e3, 0);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    this.addParameter(a);
    this.addParameter(i);
    this.addParameter(o);
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, t)));
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, e)));
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, r)));
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, a)));
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, i)));
    this.addOutput(new RangeOutputExpr("EMA", new EmaExpr(new CloseExpr, o)))
};
EMAIndicator.prototype.getName = function () {
    return "EMA"
};
var VOLUMEIndicator = create_class(Indicator);
VOLUMEIndicator.prototype.__construct = function () {
    VOLUMEIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("M1", 2, 500, 5);
    var e = new ParameterExpr("M2", 2, 500, 10);
    this.addParameter(t);
    this.addParameter(e);
    var r = new OutputExpr("VOLUME", new VolumeExpr, OutputStyle.VolumeStick, Theme.Color.Text4);
    this.addOutput(r);
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(r, t), OutputStyle.Line, Theme.Color.Indicator0));
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(r, e), OutputStyle.Line, Theme.Color.Indicator1))
};
VOLUMEIndicator.prototype.getName = function () {
    return "VOLUME"
};
var MACDIndicator = create_class(Indicator);
MACDIndicator.prototype.__construct = function () {
    MACDIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("SHORT", 2, 200, 12);
    var e = new ParameterExpr("LONG", 2, 200, 26);
    var r = new ParameterExpr("MID", 2, 200, 9);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    var a = new OutputExpr("DIF", new SubExpr(new EmaExpr(new CloseExpr, t), new EmaExpr(new CloseExpr, e)));
    this.addOutput(a);
    var i = new OutputExpr("DEA", new EmaExpr(a, r));
    this.addOutput(i);
    var o = new OutputExpr("MACD", new MulExpr(new SubExpr(a, i), new ConstExpr(2)), OutputStyle.MACDStick);
    this.addOutput(o)
};
MACDIndicator.prototype.getName = function () {
    return "MACD"
};
var DMIIndicator = create_class(Indicator);
DMIIndicator.prototype.__construct = function () {
    DMIIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 90, 14);
    var e = new ParameterExpr("MM", 2, 60, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("MTR", new ExpmemaExpr(new MaxExpr(new MaxExpr(new SubExpr(new HighExpr, new LowExpr), new AbsExpr(new SubExpr(new HighExpr, new RefExpr(new CloseExpr, new ConstExpr(1))))), new AbsExpr(new SubExpr(new RefExpr(new CloseExpr, new ConstExpr(1)), new LowExpr))), t));
    this.addAssign(r);
    var a = new AssignExpr("HD", new SubExpr(new HighExpr, new RefExpr(new HighExpr, new ConstExpr(1))));
    this.addAssign(a);
    var i = new AssignExpr("LD", new SubExpr(new RefExpr(new LowExpr, new ConstExpr(1)), new LowExpr));
    this.addAssign(i);
    var o = new AssignExpr("DMP", new ExpmemaExpr(new IfExpr(new AndExpr(new GtExpr(a, new ConstExpr(0)), new GtExpr(a, i)), a, new ConstExpr(0)), t));
    this.addAssign(o);
    var n = new AssignExpr("DMM", new ExpmemaExpr(new IfExpr(new AndExpr(new GtExpr(i, new ConstExpr(0)), new GtExpr(i, a)), i, new ConstExpr(0)), t));
    this.addAssign(n);
    var s = new OutputExpr("PDI", new MulExpr(new DivExpr(o, r), new ConstExpr(100)));
    this.addOutput(s);
    var h = new OutputExpr("MDI", new MulExpr(new DivExpr(n, r), new ConstExpr(100)));
    this.addOutput(h);
    var l = new OutputExpr("ADX", new ExpmemaExpr(new MulExpr(new DivExpr(new AbsExpr(new SubExpr(h, s)), new AddExpr(h, s)), new ConstExpr(100)), e));
    this.addOutput(l);
    var c = new OutputExpr("ADXR", new ExpmemaExpr(l, e));
    this.addOutput(c)
};
DMIIndicator.prototype.getName = function () {
    return "DMI"
};
var DMAIndicator = create_class(Indicator);
DMAIndicator.prototype.__construct = function () {
    DMAIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N1", 2, 60, 10);
    var e = new ParameterExpr("N2", 2, 250, 50);
    var r = new ParameterExpr("M", 2, 100, 10);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    var a = new OutputExpr("DIF", new SubExpr(new MaExpr(new CloseExpr, t), new MaExpr(new CloseExpr, e)));
    this.addOutput(a);
    var i = new OutputExpr("DIFMA", new MaExpr(a, r));
    this.addOutput(i)
};
DMAIndicator.prototype.getName = function () {
    return "DMA"
};
var TRIXIndicator = create_class(Indicator);
TRIXIndicator.prototype.__construct = function () {
    TRIXIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 100, 12);
    var e = new ParameterExpr("M", 2, 100, 9);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("MTR", new EmaExpr(new EmaExpr(new EmaExpr(new CloseExpr, t), t), t));
    this.addAssign(r);
    var a = new OutputExpr("TRIX", new MulExpr(new DivExpr(new SubExpr(r, new RefExpr(r, new ConstExpr(1))), new RefExpr(r, new ConstExpr(1))), new ConstExpr(100)));
    this.addOutput(a);
    var i = new OutputExpr("MATRIX", new MaExpr(a, e));
    this.addOutput(i)
};
TRIXIndicator.prototype.getName = function () {
    return "TRIX"
};
var BRARIndicator = create_class(Indicator);
BRARIndicator.prototype.__construct = function () {
    BRARIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 120, 26);
    this.addParameter(t);
    var e = new AssignExpr("REF_CLOSE_1", new RefExpr(new CloseExpr, new ConstExpr(1)));
    this.addAssign(e);
    var r = new OutputExpr("BR", new MulExpr(new DivExpr(new SumExpr(new MaxExpr(new ConstExpr(0), new SubExpr(new HighExpr, e)), t), new SumExpr(new MaxExpr(new ConstExpr(0), new SubExpr(e, new LowExpr)), t)), new ConstExpr(100)));
    this.addOutput(r);
    var a = new OutputExpr("AR", new MulExpr(new DivExpr(new SumExpr(new SubExpr(new HighExpr, new OpenExpr), t), new SumExpr(new SubExpr(new OpenExpr, new LowExpr), t)), new ConstExpr(100)));
    this.addOutput(a)
};
BRARIndicator.prototype.getName = function () {
    return "BRAR"
};
var VRIndicator = create_class(Indicator);
VRIndicator.prototype.__construct = function () {
    VRIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 100, 26);
    var e = new ParameterExpr("M", 2, 100, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("REF_CLOSE_1", new RefExpr(new CloseExpr, new ConstExpr(1)));
    this.addAssign(r);
    var a = new AssignExpr("TH", new SumExpr(new IfExpr(new GtExpr(new CloseExpr, r), new VolumeExpr, new ConstExpr(0)), t));
    this.addAssign(a);
    var i = new AssignExpr("TL", new SumExpr(new IfExpr(new LtExpr(new CloseExpr, r), new VolumeExpr, new ConstExpr(0)), t));
    this.addAssign(i);
    var o = new AssignExpr("TQ", new SumExpr(new IfExpr(new EqExpr(new CloseExpr, r), new VolumeExpr, new ConstExpr(0)), t));
    this.addAssign(o);
    var n = new OutputExpr("VR", new MulExpr(new DivExpr(new AddExpr(new MulExpr(a, new ConstExpr(2)), o), new AddExpr(new MulExpr(i, new ConstExpr(2)), o)), new ConstExpr(100)));
    this.addOutput(n);
    var s = new OutputExpr("MAVR", new MaExpr(n, e));
    this.addOutput(s)
};
VRIndicator.prototype.getName = function () {
    return "VR"
};
var OBVIndicator = create_class(Indicator);
OBVIndicator.prototype.__construct = function () {
    OBVIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("M", 2, 100, 30);
    this.addParameter(t);
    var e = new AssignExpr("REF_CLOSE_1", new RefExpr(new CloseExpr, new ConstExpr(1)));
    this.addAssign(e);
    var r = new AssignExpr("VA", new IfExpr(new GtExpr(new CloseExpr, e), new VolumeExpr, new NegExpr(new VolumeExpr)));
    this.addAssign(r);
    var a = new OutputExpr("OBV", new SumExpr(new IfExpr(new EqExpr(new CloseExpr, e), new ConstExpr(0), r), new ConstExpr(0)));
    this.addOutput(a);
    var i = new OutputExpr("MAOBV", new MaExpr(a, t));
    this.addOutput(i)
};
OBVIndicator.prototype.getName = function () {
    return "OBV"
};
var EMVIndicator = create_class(Indicator);
EMVIndicator.prototype.__construct = function () {
    EMVIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 90, 14);
    var e = new ParameterExpr("M", 2, 60, 9);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("VOLUME", new DivExpr(new MaExpr(new VolumeExpr, t), new VolumeExpr));
    this.addAssign(r);
    var a = new AssignExpr("MID", new MulExpr(new DivExpr(new SubExpr(new AddExpr(new HighExpr, new LowExpr), new RefExpr(new AddExpr(new HighExpr, new LowExpr), new ConstExpr(1))), new AddExpr(new HighExpr, new LowExpr)), new ConstExpr(100)));
    this.addAssign(a);
    var i = new OutputExpr("EMV", new MaExpr(new DivExpr(new MulExpr(a, new MulExpr(r, new SubExpr(new HighExpr, new LowExpr))), new MaExpr(new SubExpr(new HighExpr, new LowExpr), t)), t));
    this.addOutput(i);
    var o = new OutputExpr("MAEMV", new MaExpr(i, e));
    this.addOutput(o)
};
EMVIndicator.prototype.getName = function () {
    return "EMV"
};
var RSIIndicator = create_class(Indicator);
RSIIndicator.prototype.__construct = function () {
    RSIIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N1", 2, 120, 6);
    var e = new ParameterExpr("N2", 2, 250, 12);
    var r = new ParameterExpr("N3", 2, 500, 24);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    var a = new AssignExpr("LC", new RefExpr(new CloseExpr, new ConstExpr(1)));
    this.addAssign(a);
    var i = new AssignExpr("CLOSE_LC", new SubExpr(new CloseExpr, a));
    this.addAssign(i);
    this.addOutput(new OutputExpr("RSI1", new MulExpr(new DivExpr(new SmaExpr(new MaxExpr(i, new ConstExpr(0)), t, new ConstExpr(1)), new SmaExpr(new AbsExpr(i), t, new ConstExpr(1))), new ConstExpr(100))));
    this.addOutput(new OutputExpr("RSI2", new MulExpr(new DivExpr(new SmaExpr(new MaxExpr(i, new ConstExpr(0)), e, new ConstExpr(1)), new SmaExpr(new AbsExpr(i), e, new ConstExpr(1))), new ConstExpr(100))));
    this.addOutput(new OutputExpr("RSI3", new MulExpr(new DivExpr(new SmaExpr(new MaxExpr(i, new ConstExpr(0)), r, new ConstExpr(1)), new SmaExpr(new AbsExpr(i), r, new ConstExpr(1))), new ConstExpr(100))))
};
RSIIndicator.prototype.getName = function () {
    return "RSI"
};
var WRIndicator = create_class(Indicator);
WRIndicator.prototype.__construct = function () {
    WRIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 100, 10);
    var e = new ParameterExpr("N1", 2, 100, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("HHV", new HhvExpr(new HighExpr, t));
    this.addAssign(r);
    var a = new AssignExpr("HHV1", new HhvExpr(new HighExpr, e));
    this.addAssign(a);
    var i = new AssignExpr("LLV", new LlvExpr(new LowExpr, t));
    this.addAssign(i);
    var o = new AssignExpr("LLV1", new LlvExpr(new LowExpr, e));
    this.addAssign(o);
    var n = new OutputExpr("WR1", new MulExpr(new DivExpr(new SubExpr(r, new CloseExpr), new SubExpr(r, i)), new ConstExpr(100)));
    this.addOutput(n);
    var s = new OutputExpr("WR2", new MulExpr(new DivExpr(new SubExpr(a, new CloseExpr), new SubExpr(a, o)), new ConstExpr(100)));
    this.addOutput(s)
};
WRIndicator.prototype.getName = function () {
    return "WR"
};
var SARIndicator = create_class(Indicator);
SARIndicator.prototype.__construct = function () {
    SARIndicator.__super.__construct.call(this);
    var t = new ConstExpr(4);
    var e = new ConstExpr(2);
    var r = new ConstExpr(2);
    var a = new ConstExpr(20);
    this.addOutput(new OutputExpr("SAR", new SarExpr(t, e, r, a), OutputStyle.SARPoint))
};
SARIndicator.prototype.getName = function () {
    return "SAR"
};
var KDJIndicator = create_class(Indicator);
KDJIndicator.prototype.__construct = function () {
    KDJIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 90, 9);
    var e = new ParameterExpr("M1", 2, 30, 3);
    var r = new ParameterExpr("M2", 2, 30, 3);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    var a = new AssignExpr("HHV", new HhvExpr(new HighExpr, t));
    this.addAssign(a);
    var i = new AssignExpr("LLV", new LlvExpr(new LowExpr, t));
    this.addAssign(i);
    var o = new AssignExpr("RSV", new MulExpr(new DivExpr(new SubExpr(new CloseExpr, i), new SubExpr(a, i)), new ConstExpr(100)));
    this.addAssign(o);
    var n = new OutputExpr("K", new SmaExpr(o, e, new ConstExpr(1)));
    this.addOutput(n);
    var s = new OutputExpr("D", new SmaExpr(n, r, new ConstExpr(1)));
    this.addOutput(s);
    var h = new OutputExpr("J", new SubExpr(new MulExpr(n, new ConstExpr(3)), new MulExpr(s, new ConstExpr(2))));
    this.addOutput(h)
};
KDJIndicator.prototype.getName = function () {
    return "KDJ"
};
var ROCIndicator = create_class(Indicator);
ROCIndicator.prototype.__construct = function () {
    ROCIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 120, 12);
    var e = new ParameterExpr("M", 2, 60, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new AssignExpr("REF_CLOSE_N", new RefExpr(new CloseExpr, t));
    this.addAssign(r);
    var a = new OutputExpr("ROC", new MulExpr(new DivExpr(new SubExpr(new CloseExpr, r), r), new ConstExpr(100)));
    this.addOutput(a);
    var i = new OutputExpr("MAROC", new MaExpr(a, e));
    this.addOutput(i)
};
ROCIndicator.prototype.getName = function () {
    return "ROC"
};
var MTMIndicator = create_class(Indicator);
MTMIndicator.prototype.__construct = function () {
    MTMIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 120, 12);
    var e = new ParameterExpr("M", 2, 60, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new OutputExpr("MTM", new SubExpr(new CloseExpr, new RefExpr(new CloseExpr, t)));
    this.addOutput(r);
    var a = new OutputExpr("MTMMA", new MaExpr(r, e));
    this.addOutput(a)
};
MTMIndicator.prototype.getName = function () {
    return "MTM"
};
var BOLLIndicator = create_class(Indicator);
BOLLIndicator.prototype.__construct = function () {
    BOLLIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 120, 20);
    this.addParameter(t);
    var e = new AssignExpr("STD_CLOSE_N", new StdExpr(new CloseExpr, t));
    this.addAssign(e);
    var r = new OutputExpr("BOLL", new MaExpr(new CloseExpr, t));
    this.addOutput(r);
    var a = new OutputExpr("UB", new AddExpr(r, new MulExpr(new ConstExpr(2), e)));
    this.addOutput(a);
    var i = new OutputExpr("LB", new SubExpr(r, new MulExpr(new ConstExpr(2), e)));
    this.addOutput(i)
};
BOLLIndicator.prototype.getName = function () {
    return "BOLL"
};
var PSYIndicator = create_class(Indicator);
PSYIndicator.prototype.__construct = function () {
    PSYIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 2, 100, 12);
    var e = new ParameterExpr("M", 2, 100, 6);
    this.addParameter(t);
    this.addParameter(e);
    var r = new OutputExpr("PSY", new MulExpr(new DivExpr(new CountExpr(new GtExpr(new CloseExpr, new RefExpr(new CloseExpr, new ConstExpr(1))), t), t), new ConstExpr(100)));
    this.addOutput(r);
    var a = new OutputExpr("PSYMA", new MaExpr(r, e));
    this.addOutput(a)
};
PSYIndicator.prototype.getName = function () {
    return "PSY"
};
var STOCHRSIIndicator = create_class(Indicator);
STOCHRSIIndicator.prototype.__construct = function () {
    STOCHRSIIndicator.__super.__construct.call(this);
    var t = new ParameterExpr("N", 3, 100, 14);
    var e = new ParameterExpr("M", 3, 100, 14);
    var r = new ParameterExpr("P1", 2, 50, 3);
    var a = new ParameterExpr("P2", 2, 50, 3);
    this.addParameter(t);
    this.addParameter(e);
    this.addParameter(r);
    this.addParameter(a);
    var i = new AssignExpr("LC", new RefExpr(new CloseExpr, new ConstExpr(1)));
    this.addAssign(i);
    var o = new AssignExpr("CLOSE_LC", new SubExpr(new CloseExpr, i));
    this.addAssign(o);
    var n = new AssignExpr("RSI", new MulExpr(new DivExpr(new SmaExpr(new MaxExpr(o, new ConstExpr(0)), t, new ConstExpr(1)), new SmaExpr(new AbsExpr(o), t, new ConstExpr(1))), new ConstExpr(100)));
    this.addAssign(n);
    var s = new OutputExpr("STOCHRSI", new MulExpr(new DivExpr(new MaExpr(new SubExpr(n, new LlvExpr(n, e)), r), new MaExpr(new SubExpr(new HhvExpr(n, e), new LlvExpr(n, e)), r)), new ConstExpr(100)));
    this.addOutput(s);
    this.addOutput(new RangeOutputExpr("MA", new MaExpr(s, a)))
};
STOCHRSIIndicator.prototype.getName = function () {
    return "StochRSI"
};
var Chart = create_class();
Chart.strPeriod = {
    "zh-cn": {
        line: "(分时)",
        "1min": "(1分钟)",
        "5min": "(5分钟)",
        "15min": "(15分钟)",
        "30min": "(30分钟)",
        "1hour": "(1小时)",
        "1day": "(日线)",
        "1week": "(周线)",
        "3min": "(3分钟)",
        "2hour": "(2小时)",
        "4hour": "(4小时)",
        "6hour": "(6小时)",
        "12hour": "(12小时)",
        "3day": "(3天)"
    },
    "en-us": {
        line: "(Line)",
        "1min": "(1m)",
        "5min": "(5m)",
        "15min": "(15m)",
        "30min": "(30m)",
        "1hour": "(1h)",
        "1day": "(1d)",
        "1week": "(1w)",
        "3min": "(3m)",
        "2hour": "(2h)",
        "4hour": "(4h)",
        "6hour": "(6h)",
        "12hour": "(12h)",
        "3day": "(3d)"
    },
    "zh-tw": {
        line: "(分時)",
        "1min": "(1分钟)",
        "5min": "(5分钟)",
        "15min": "(15分钟)",
        "30min": "(30分钟)",
        "1hour": "(1小時)",
        "1day": "(日线)",
        "1week": "(周线)",
        "3min": "(3分钟)",
        "2hour": "(2小時)",
        "4hour": "(4小時)",
        "6hour": "(6小時)",
        "12hour": "(12小時)",
        "3day": "(3天)"
    }
};
Chart.prototype.__construct = function () {
    this._data = null;
    this._charStyle = "CandleStick";
    this._depthData = {array: null, asks_count: 0, bids_count: 0, asks_si: 0, asks_ei: 0, bids_si: 0, bids_ei: 0};
    this._time = GLOBAL_VAR.time_type;
    this._market_from = GLOBAL_VAR.market_from;
    this._usd_cny_rate = 6.1934;
    this._money_type = "USD";
    this._contract_unit = "BTC";
    this.strIsLine = false;
    this.strCurrentMarket = 20150403001;
    this.strCurrentMarketType = 1
};
Chart.prototype.setTitle = function () {
    var t = ChartManager.getInstance().getLanguage();
    var e = GLOBAL_VAR.market_from_name;
    e += " ";
    e += this.strIsLine ? Chart.strPeriod[t]["line"] : Chart.strPeriod[t][this._time];
    e += (this._contract_unit + "/" + this._money_type).toUpperCase();
    ChartManager.getInstance().setTitle("frame0.k0", e);
    kline.title = e;
    kline.setTitle()
};
Chart.prototype.setCurrentList = function () {
};
Chart.prototype.setMarketFrom = function (t) {
    this._market_from = t;
    this.updateDataAndDisplay()
};
Chart.prototype.updateDataAndDisplay = function () {
    GLOBAL_VAR.market_from = this._market_from;
    GLOBAL_VAR.time_type = this._time;
    this.setTitle();
    ChartManager.getInstance().setCurrentDataSource("frame0.k0", "YUANBAOHUI." + this._market_from + "." + this._time);
    ChartManager.getInstance().setNormalMode();
    var t = GLOBAL_VAR.chartMgr.getDataSource("frame0.k0").getLastDate();
    if (t == -1) {
        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, GLOBAL_VAR.limit, null);
        RequestData(true)
    } else {
        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, null, t.toString());
        RequestData()
    }
    ChartManager.getInstance().redraw("All", false)
};
Chart.prototype.setCurrentContractUnit = function (t) {
    this._contract_unit = t;
    this.updateDataAndDisplay()
};
Chart.prototype.setCurrentMoneyType = function (t) {
    this._money_type = t;
    this.updateDataAndDisplay()
};
Chart.prototype.setCurrentPeriod = function (t) {
    this._time = GLOBAL_VAR.periodMap[t];
    this.updateDataAndDisplay()
};
Chart.prototype.updateDataSource = function (t) {
    this._data = t;
    ChartManager.getInstance().updateData("frame0.k0", this._data)
};
Chart.prototype.updateDepth = function (t) {
    if (t == null) {
        this._depthData.array = [];
        ChartManager.getInstance().redraw("All", false);
        return
    }
    if (!t.asks || !t.bids || t.asks == "" || t.bids == "") {
        return
    }
    var e = this._depthData;
    e.array = [];
    for (var r = 0; r < t.asks.length; r++) {
        var a = {};
        a.rate = t.asks[r][0];
        a.amount = t.asks[r][1];
        e.array.push(a)
    }
    for (var r = 0; r < t.bids.length; r++) {
        var a = {};
        a.rate = t.bids[r][0];
        a.amount = t.bids[r][1];
        e.array.push(a)
    }
    e.asks_count = t.asks.length;
    e.bids_count = t.bids.length;
    e.asks_si = e.asks_count - 1;
    e.asks_ei = 0;
    e.bids_si = e.asks_count;
    e.bids_ei = e.asks_count + e.bids_count - 1;
    for (var r = e.asks_si; r >= e.asks_ei; r--) {
        if (r == e.asks_si) {
            e.array[r].amounts = e.array[r].amount
        } else {
            e.array[r].amounts = e.array[r + 1].amounts + e.array[r].amount
        }
    }
    for (var r = e.bids_si; r <= e.bids_ei; r++) {
        if (r == e.bids_si) {
            e.array[r].amounts = e.array[r].amount
        } else {
            e.array[r].amounts = e.array[r - 1].amounts + e.array[r].amount
        }
    }
    ChartManager.getInstance().redraw("All", false)
};
Chart.prototype.setMainIndicator = function (t) {
    this._mainIndicator = t;
    if (t == "NONE") {
        ChartManager.getInstance().removeMainIndicator("frame0.k0")
    } else {
        ChartManager.getInstance().setMainIndicator("frame0.k0", t)
    }
    ChartManager.getInstance().redraw("All", true)
};
Chart.prototype.setIndicator = function (t, e) {
    if (e == "NONE") {
        var t = 2;
        if (Template.displayVolume == false) {
            t = 1
        }
        var r = ChartManager.getInstance().getIndicatorAreaName("frame0.k0", t);
        if (r != "") {
            ChartManager.getInstance().removeIndicator(r)
        }
    } else {
        var t = 2;
        if (Template.displayVolume == false) {
            t = 1
        }
        var r = ChartManager.getInstance().getIndicatorAreaName("frame0.k0", t);
        if (r == "") {
            Template.createIndicatorChartComps("frame0.k0", e)
        } else {
            ChartManager.getInstance().setIndicator(r, e)
        }
    }
    ChartManager.getInstance().redraw("All", true)
};
Chart.prototype.addIndicator = function (t) {
    ChartManager.getInstance().addIndicator(t);
    ChartManager.getInstance().redraw("All", true)
};
Chart.prototype.removeIndicator = function (t) {
    var e = ChartManager.getInstance().getIndicatorAreaName(2);
    ChartManager.getInstance().removeIndicator(e);
    ChartManager.getInstance().redraw("All", true)
};
var CName = create_class();
CName.prototype.__construct = function (t) {
    this._names = [];
    this._comps = [];
    if (t instanceof CName) {
        this._names = t._names;
        this._comps = t._comps
    } else {
        var e = t.split(".");
        var r = e.length - 1;
        if (r > 0) {
            this._comps = e;
            this._names.push(e[0]);
            for (var a = 1; a <= r; a++) {
                this._names.push(this._names[a - 1] + "." + e[a])
            }
        } else {
            this._comps.push(t);
            this._names.push(t)
        }
    }
};
CName.prototype.getCompAt = function (t) {
    if (t >= 0 && t < this._comps.length) {
        return this._comps[t]
    }
    return ""
};
CName.prototype.getName = function (t) {
    if (t < 0) {
        if (this._names.length > 0) {
            return this._names[this._names.length - 1]
        }
    } else {
        if (t < this._names.length) {
            return this._names[t]
        }
    }
    return ""
};
var NamedObject = create_class();
NamedObject.prototype.__construct = function (t) {
    this._name = t;
    this._nameObj = new CName(t)
};
NamedObject.prototype.getFrameName = function () {
    return this._nameObj.getName(0)
};
NamedObject.prototype.getDataSourceName = function () {
    return this._nameObj.getName(1)
};
NamedObject.prototype.getAreaName = function () {
    return this._nameObj.getName(2)
};
NamedObject.prototype.getName = function () {
    return this._nameObj.getName(-1)
};
NamedObject.prototype.getNameObject = function () {
    return this._nameObj
};
var ChartArea = create_class(NamedObject);
ChartArea.prototype.__construct = function (t) {
    ChartArea.__super.__construct.call(this, t);
    this._left = 0;
    this._top = 0;
    this._right = 0;
    this._bottom = 0;
    this._changed = false;
    this._highlighted = false;
    this._pressed = false;
    this._selected = false;
    this.Measuring = new MEvent
};
ChartArea.DockStyle = {Left: 0, Top: 1, Right: 2, Bottom: 3, Fill: 4};
ChartArea.prototype.getDockStyle = function () {
    return this._dockStyle
};
ChartArea.prototype.setDockStyle = function (t) {
    this._dockStyle = t
};
ChartArea.prototype.getLeft = function () {
    return this._left
};
ChartArea.prototype.getTop = function () {
    return this._top
};
ChartArea.prototype.setTop = function (t) {
    if (this._top != t) {
        this._top = t;
        this._changed = true
    }
};
ChartArea.prototype.getRight = function () {
    return this._right
};
ChartArea.prototype.getBottom = function () {
    return this._bottom
};
ChartArea.prototype.setBottom = function (t) {
    if (this._bottom != t) {
        this._bottom = t;
        this._changed = true
    }
};
ChartArea.prototype.getCenter = function () {
    return this._left + this._right >> 1
};
ChartArea.prototype.getMiddle = function () {
    return this._top + this._bottom >> 1
};
ChartArea.prototype.getWidth = function () {
    return this._right - this._left
};
ChartArea.prototype.getHeight = function () {
    return this._bottom - this._top
};
ChartArea.prototype.getRect = function () {
    return {X: this._left, Y: this._top, Width: this._right - this._left, Height: this._bottom - this._top}
};
ChartArea.prototype.contains = function (t, e) {
    if (t >= this._left && t < this._right) {
        if (e >= this._top && e < this._bottom) {
            return [this]
        }
    }
    return null
};
ChartArea.prototype.getMeasuredWidth = function () {
    return this._measuredWidth
};
ChartArea.prototype.getMeasuredHeight = function () {
    return this._measuredHeight
};
ChartArea.prototype.setMeasuredDimension = function (t, e) {
    this._measuredWidth = t;
    this._measuredHeight = e
};
ChartArea.prototype.measure = function (t, e, r) {
    this._measuredWidth = 0;
    this._measuredHeight = 0;
    this.Measuring.raise(this, {Width: e, Height: r});
    if (this._measuredWidth == 0 && this._measuredHeight == 0) {
        this.setMeasuredDimension(e, r)
    }
};
ChartArea.prototype.layout = function (t, e, r, a, i) {
    t <<= 0;
    if (this._left != t) {
        this._left = t;
        this._changed = true
    }
    e <<= 0;
    if (this._top != e) {
        this._top = e;
        this._changed = true
    }
    r <<= 0;
    if (this._right != r) {
        this._right = r;
        this._changed = true
    }
    a <<= 0;
    if (this._bottom != a) {
        this._bottom = a;
        this._changed = true
    }
    if (i) {
        this._changed = true
    }
};
ChartArea.prototype.isChanged = function () {
    return this._changed
};
ChartArea.prototype.setChanged = function (t) {
    this._changed = t
};
ChartArea.prototype.isHighlighted = function () {
    return this._highlighted
};
ChartArea.prototype.getHighlightedArea = function () {
    return this._highlighted ? this : null
};
ChartArea.prototype.highlight = function (t) {
    this._highlighted = this == t;
    return this._highlighted ? this : null
};
ChartArea.prototype.isPressed = function () {
    return this._pressed
};
ChartArea.prototype.setPressed = function (t) {
    this._pressed = t
};
ChartArea.prototype.isSelected = function () {
    return this._selected
};
ChartArea.prototype.getSelectedArea = function () {
    return this._selected ? this : null
};
ChartArea.prototype.select = function (t) {
    this._selected = this == t;
    return this._selected ? this : null
};
ChartArea.prototype.onMouseMove = function (t, e) {
    return null
};
ChartArea.prototype.onMouseLeave = function (t, e) {
};
ChartArea.prototype.onMouseDown = function (t, e) {
    return null
};
ChartArea.prototype.onMouseUp = function (t, e) {
    return null
};
var MainArea = create_class(ChartArea);
MainArea.prototype.__construct = function (t) {
    MainArea.__super.__construct.call(this, t);
    this._dragStarted = false;
    this._oldX = 0;
    this._oldY = 0;
    this._passMoveEventToToolManager = true
};
MainArea.prototype.onMouseMove = function (t, e) {
    var r = ChartManager.getInstance();
    if (r._capturingMouseArea == this) {
        if (this._dragStarted == false) {
            if (Math.abs(this._oldX - t) > 1 || Math.abs(this._oldY - e) > 1) {
                this._dragStarted = true
            }
        }
    }
    if (this._dragStarted) {
        r.hideCursor();
        if (r.onToolMouseDrag(this.getFrameName(), t, e)) {
            return this
        }
        r.getTimeline(this.getDataSourceName()).move(t - this._oldX);
        return this
    }
    if (this._passMoveEventToToolManager && r.onToolMouseMove(this.getFrameName(), t, e)) {
        r.hideCursor();
        return this
    }
    switch (r._drawingTool) {
        case ChartManager.DrawingTool.Cursor:
            r.showCursor();
            break;
        case ChartManager.DrawingTool.CrossCursor:
            if (r.showCrossCursor(this, t, e)) {
                r.hideCursor()
            } else {
                r.showCursor()
            }
            break;
        default:
            r.hideCursor();
            break
    }
    return this
};
MainArea.prototype.onMouseLeave = function (t, e) {
    this._dragStarted = false;
    this._passMoveEventToToolManager = true
};
MainArea.prototype.onMouseDown = function (t, e) {
    var r = ChartManager.getInstance();
    r.getTimeline(this.getDataSourceName()).startMove();
    this._oldX = t;
    this._oldY = e;
    this._dragStarted = false;
    if (r.onToolMouseDown(this.getFrameName(), t, e)) {
        this._passMoveEventToToolManager = false
    }
    return this
};
MainArea.prototype.onMouseUp = function (t, e) {
    var r = ChartManager.getInstance();
    var a = null;
    if (this._dragStarted) {
        this._dragStarted = false;
        a = this
    }
    if (r.onToolMouseUp(this.getFrameName(), t, e)) {
        a = this
    }
    this._passMoveEventToToolManager = true;
    return a
};
var IndicatorArea = create_class(ChartArea);
IndicatorArea.prototype.__construct = function (t) {
    IndicatorArea.__super.__construct.call(this, t);
    this._dragStarted = false;
    this._oldX = 0;
    this._oldY = 0
};
IndicatorArea.prototype.onMouseMove = function (t, e) {
    var r = ChartManager.getInstance();
    if (r._capturingMouseArea == this) {
        if (this._dragStarted == false) {
            if (this._oldX != t || this._oldY != e) {
                this._dragStarted = true
            }
        }
    }
    if (this._dragStarted) {
        r.hideCursor();
        r.getTimeline(this.getDataSourceName()).move(t - this._oldX);
        return this
    }
    switch (r._drawingTool) {
        case ChartManager.DrawingTool.CrossCursor:
            if (r.showCrossCursor(this, t, e)) {
                r.hideCursor()
            } else {
                r.showCursor()
            }
            break;
        default:
            r.showCursor();
            break
    }
    return this
};
IndicatorArea.prototype.onMouseLeave = function (t, e) {
    this._dragStarted = false
};
IndicatorArea.prototype.onMouseDown = function (t, e) {
    var r = ChartManager.getInstance();
    r.getTimeline(this.getDataSourceName()).startMove();
    this._oldX = t;
    this._oldY = e;
    this._dragStarted = false;
    return this
};
IndicatorArea.prototype.onMouseUp = function (t, e) {
    if (this._dragStarted) {
        this._dragStarted = false;
        return this
    }
    return null
};
var MainRangeArea = create_class(ChartArea);
MainRangeArea.prototype.__construct = function (t) {
    MainRangeArea.__super.__construct.call(this, t)
};
MainRangeArea.prototype.onMouseMove = function (t, e) {
    ChartManager.getInstance().showCursor();
    return this
};
var IndicatorRangeArea = create_class(ChartArea);
IndicatorRangeArea.prototype.__construct = function (t) {
    IndicatorRangeArea.__super.__construct.call(this, t)
};
IndicatorRangeArea.prototype.onMouseMove = function (t, e) {
    ChartManager.getInstance().showCursor();
    return this
};
var TimelineArea = create_class(ChartArea);
TimelineArea.prototype.__construct = function (t) {
    TimelineArea.__super.__construct.call(this, t)
};
TimelineArea.prototype.onMouseMove = function (t, e) {
    ChartManager.getInstance().showCursor();
    return this
};
var ChartAreaGroup = create_class(ChartArea);
ChartAreaGroup.prototype.__construct = function (t) {
    ChartAreaGroup.__super.__construct.call(this, t);
    this._areas = [];
    this._highlightedArea = null;
    this._selectedArea = null
};
ChartAreaGroup.prototype.contains = function (t, e) {
    var r;
    var a, i, o = this._areas.length;
    for (i = 0; i < o; i++) {
        a = this._areas[i];
        r = a.contains(t, e);
        if (r != null) {
            r.push(this);
            return r
        }
    }
    return ChartAreaGroup.__super.contains(t, e)
};
ChartAreaGroup.prototype.getAreaCount = function () {
    return this._areas.length
};
ChartAreaGroup.prototype.getAreaAt = function (t) {
    if (t < 0 || t >= this._areas.length) {
        return null
    }
    return this._areas[t]
};
ChartAreaGroup.prototype.addArea = function (t) {
    this._areas.push(t)
};
ChartAreaGroup.prototype.removeArea = function (t) {
    var e, r = this._areas.length;
    for (e = 0; e < r; e++) {
        if (t == this._areas[e]) {
            this._areas.splice(e);
            this.setChanged(true);
            break
        }
    }
};
ChartAreaGroup.prototype.getGridColor = function () {
    return this._gridColor
};
ChartAreaGroup.prototype.setGridColor = function (t) {
    this._gridColor = t
};
ChartAreaGroup.prototype.getHighlightedArea = function () {
    if (this._highlightedArea != null) {
        return this._highlightedArea.getHighlightedArea()
    }
    return null
};
ChartAreaGroup.prototype.highlight = function (t) {
    this._highlightedArea = null;
    var e, r, a = this._areas.length;
    for (r = 0; r < a; r++) {
        e = this._areas[r].highlight(t);
        if (e != null) {
            this._highlightedArea = e;
            return this
        }
    }
    return null
};
ChartAreaGroup.prototype.getSelectedArea = function () {
    if (this._selectedArea != null) {
        return this._selectedArea.getSelectedArea()
    }
    return null
};
ChartAreaGroup.prototype.select = function (t) {
    this._selectedArea = null;
    var e, r, a = this._areas.length;
    for (r = 0; r < a; r++) {
        e = this._areas[r].select(t);
        if (e != null) {
            this._selectedArea = e;
            return this
        }
    }
    return null
};
ChartAreaGroup.prototype.onMouseLeave = function (t, e) {
    var r, a = this._areas.length;
    for (r = 0; r < a; r++) {
        this._areas[r].onMouseLeave(t, e)
    }
};
ChartAreaGroup.prototype.onMouseUp = function (t, e) {
    var r, a, i = this._areas.length;
    for (a = 0; a < i; a++) {
        r = this._areas[a].onMouseUp(t, e);
        if (r != null) {
            return r
        }
    }
    return null
};
var TableLayout = create_class(ChartAreaGroup);
TableLayout.prototype.__construct = function (t) {
    TableLayout.__super.__construct.call(this, t);
    this._nextRowId = 0;
    this._focusedRowIndex = -1
};
TableLayout.prototype.getNextRowId = function () {
    return this._nextRowId++
};
TableLayout.prototype.measure = function (t, e, r) {
    this.setMeasuredDimension(e, r);
    var a, i = 0, o = 0;
    var n, s;
    var h = [];
    var l, c = this._areas.length;
    for (l = 0; l < c; l += 2) {
        a = this._areas[l].getHeight();
        if (a == 0) {
            if (l == 0) {
                s = c + 1 >> 1;
                var u = s * 2 + 5;
                var p = r / u * 2 << 0;
                n = r;
                for (l = s - 1; l > 0; l--) {
                    h.unshift(p);
                    n -= p
                }
                h.unshift(n);
                break
            } else {
                if (l == 2) {
                    a = i / 3
                } else {
                    a = i
                }
            }
        }
        o += a;
        i = a;
        h.push(a)
    }
    if (o > 0) {
        var g = r / o;
        s = c + 1 >> 1;
        n = r;
        for (l = s - 1; l > 0; l--) {
            h[l] *= g;
            n -= h[l]
        }
        h[0] = n
    }
    var _ = 8;
    var d = 64;
    var f = Math.min(240, e >> 1);
    var m = d;
    var v = ChartManager.getInstance();
    var C = v.getTimeline(this.getDataSourceName());
    if (C.getFirstIndex() >= 0) {
        var x = [];
        for (m = d; m < f; m += _) {
            x.push(C.calcFirstIndex(C.calcColumnCount(e - m)))
        }
        var P = C.getLastIndex();
        var w = [".main", ".secondary"];
        var y = new Array(x.length);
        var M, A;
        for (M = 0, A = 0, m = d; M < this._areas.length && A < x.length; M += 2) {
            var E = this._areas[M];
            var S = v.getPlotter(E.getName() + "Range.main");
            for (var T in w) {
                var b = v.getDataProvider(E.getName() + w[T]);
                if (b == undefined) {
                    continue
                }
                b.calcRange(x, P, y, null);
                while (A < x.length) {
                    var I = S.getRequiredWidth(t, y[A].min);
                    var D = S.getRequiredWidth(t, y[A].max);
                    if (Math.max(I, D) < m) {
                        break
                    }
                    A++;
                    m += _
                }
            }
        }
    }
    for (l = 1; l < this._areas.length; l += 2) {
        this._areas[l].measure(t, m, h[l >> 1])
    }
    var O = e - m;
    for (l = 0; l < this._areas.length; l += 2) {
        this._areas[l].measure(t, O, h[l >> 1])
    }
};
TableLayout.prototype.layout = function (t, e, r, a, i) {
    TableLayout.__super.layout.call(this, t, e, r, a, i);
    if (this._areas.length < 1) {
        return
    }
    var o;
    var n = t + this._areas[0].getMeasuredWidth();
    var s = e, h;
    if (!i) {
        i = this.isChanged()
    }
    var l, c = this._areas.length;
    for (l = 0; l < c; l++) {
        o = this._areas[l];
        h = s + o.getMeasuredHeight();
        o.layout(t, s, n, h, i);
        l++;
        o = this._areas[l];
        o.layout(n, s, this.getRight(), h, i);
        s = h
    }
    this.setChanged(false)
};
TableLayout.prototype.drawGrid = function (t) {
    if (this._areas.length < 1) {
        return
    }
    var e = ChartManager.getInstance();
    var r = e.getTheme(this.getFrameName());
    t.fillStyle = r.getColor(Theme.Color.Grid1);
    t.fillRect(this._areas[0].getRight(), this.getTop(), 1, this.getHeight());
    var a, i = this._areas.length - 2;
    for (a = 0; a < i; a += 2) {
        t.fillRect(this.getLeft(), this._areas[a].getBottom(), this.getWidth(), 1)
    }
    if (!e.getCaptureMouseWheelDirectly()) {
        for (a = 0, i += 2; a < i; a += 2) {
            if (this._areas[a].isSelected()) {
                t.strokeStyle = r.getColor(Theme.Color.Indicator1);
                t.strokeRect(this.getLeft() + .5, this.getTop() + .5, this.getWidth() - 1, this.getHeight() - 1);
                break
            }
        }
    }
};
TableLayout.prototype.highlight = function (t) {
    this._highlightedArea = null;
    var e, r, a = this._areas.length;
    for (r = 0; r < a; r++) {
        e = this._areas[r];
        if (e == t) {
            r &= ~1;
            e = this._areas[r];
            e.highlight(e);
            this._highlightedArea = e;
            r++;
            e = this._areas[r];
            e.highlight(null);
            e.highlight(e)
        } else {
            e.highlight(null)
        }
    }
    return this._highlightedArea != null ? this : null
};
TableLayout.prototype.select = function (t) {
    this._selectedArea = null;
    var e, r, a = this._areas.length;
    for (r = 0; r < a; r++) {
        e = this._areas[r];
        if (e == t) {
            r &= ~1;
            e = this._areas[r];
            e.select(e);
            this._selectedArea = e;
            r++;
            e = this._areas[r];
            e.select(e)
        } else {
            e.select(null)
        }
    }
    return this._selectedArea != null ? this : null
};
TableLayout.prototype.onMouseMove = function (t, e) {
    if (this._focusedRowIndex >= 0) {
        var r = this._areas[this._focusedRowIndex];
        var a = this._areas[this._focusedRowIndex + 2];
        var i = e - this._oldY;
        if (i == 0) {
            return this
        }
        var o = this._oldUpperBottom + i;
        var n = this._oldLowerTop + i;
        if (o - r.getTop() >= 60 && a.getBottom() - n >= 60) {
            r.setBottom(o);
            a.setTop(n)
        }
        return this
    }
    var s, h = this._areas.length - 2;
    for (s = 0; s < h; s += 2) {
        var l = this._areas[s].getBottom();
        if (e >= l - 4 && e < l + 4) {
            ChartManager.getInstance().showCursor("n-resize");
            return this
        }
    }
    return null
};
TableLayout.prototype.onMouseLeave = function (t, e) {
    this._focusedRowIndex = -1
};
TableLayout.prototype.onMouseDown = function (t, e) {
    var r, a = this._areas.length - 2;
    for (r = 0; r < a; r += 2) {
        var i = this._areas[r].getBottom();
        if (e >= i - 4 && e < i + 4) {
            this._focusedRowIndex = r;
            this._oldY = e;
            this._oldUpperBottom = i;
            this._oldLowerTop = this._areas[r + 2].getTop();
            return this
        }
    }
    return null
};
TableLayout.prototype.onMouseUp = function (t, e) {
    if (this._focusedRowIndex >= 0) {
        this._focusedRowIndex = -1;
        var r, a = this._areas.length;
        var i = [];
        for (r = 0; r < a; r += 2) {
            i.push(this._areas[r].getHeight())
        }
        ChartSettings.get().charts.areaHeight = i;
        ChartSettings.save()
    }
    return this
};
var DockableLayout = create_class(ChartAreaGroup);
DockableLayout.prototype.__construct = function (t) {
    DockableLayout.__super.__construct.call(this, t)
};
DockableLayout.prototype.measure = function (t, e, r) {
    DockableLayout.__super.measure.call(this, t, e, r);
    e = this.getMeasuredWidth();
    r = this.getMeasuredHeight();
    for (var a in this._areas) {
        var i = this._areas[a];
        i.measure(t, e, r);
        switch (i.getDockStyle()) {
            case ChartArea.DockStyle.left:
            case ChartArea.DockStyle.Right:
                e -= i.getMeasuredWidth();
                break;
            case ChartArea.DockStyle.Top:
            case ChartArea.DockStyle.Bottom:
                r -= i.getMeasuredHeight();
                break;
            case ChartArea.DockStyle.Fill:
                e = 0;
                r = 0;
                break
        }
    }
};
DockableLayout.prototype.layout = function (t, e, r, a, i) {
    DockableLayout.__super.layout.call(this, t, e, r, a, i);
    t = this.getLeft();
    e = this.getTop();
    r = this.getRight();
    a = this.getBottom();
    var o, n;
    if (!i) {
        i = this.isChanged()
    }
    for (var s in this._areas) {
        var h = this._areas[s];
        switch (h.getDockStyle()) {
            case ChartArea.DockStyle.left:
                o = h.getMeasuredWidth();
                h.layout(t, e, t + o, a, i);
                t += o;
                break;
            case ChartArea.DockStyle.Top:
                n = h.getMeasuredHeight();
                h.layout(t, e, r, e + n, i);
                e += n;
                break;
            case ChartArea.DockStyle.Right:
                o = h.getMeasuredWidth();
                h.layout(r - o, e, r, a, i);
                r -= o;
                break;
            case ChartArea.DockStyle.Bottom:
                n = h.getMeasuredHeight();
                h.layout(t, a - n, r, a, i);
                a -= n;
                break;
            case ChartArea.DockStyle.Fill:
                h.layout(t, e, r, a, i);
                t = r;
                e = a;
                break
        }
    }
    this.setChanged(false)
};
DockableLayout.prototype.drawGrid = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getTheme(this.getFrameName());
    var a = this.getLeft();
    var i = this.getTop();
    var o = this.getRight();
    var n = this.getBottom();
    t.fillStyle = r.getColor(this._gridColor);
    for (var s in this._areas) {
        var h = this._areas[s];
        switch (h.getDockStyle()) {
            case ChartArea.DockStyle.Left:
                t.fillRect(h.getRight(), i, 1, n - i);
                a += h.getWidth();
                break;
            case ChartArea.DockStyle.Top:
                t.fillRect(a, h.getBottom(), o - a, 1);
                i += h.getHeight();
                break;
            case ChartArea.DockStyle.Right:
                t.fillRect(h.getLeft(), i, 1, n - i);
                o -= h.getWidth();
                break;
            case ChartArea.DockStyle.Bottom:
                t.fillRect(a, h.getTop(), o - a, 1);
                n -= h.getHeight();
                break
        }
    }
};
var ChartManager = create_class();
ChartManager.DrawingTool = {
    Cursor: 0,
    CrossCursor: 1,
    DrawLines: 2,
    DrawFibRetrace: 3,
    DrawFibFans: 4,
    SegLine: 5,
    StraightLine: 6,
    ArrowLine: 7,
    RayLine: 8,
    HoriStraightLine: 9,
    HoriRayLine: 10,
    HoriSegLine: 11,
    VertiStraightLine: 12,
    PriceLine: 13,
    BiParallelLine: 14,
    BiParallelRayLine: 15,
    TriParallelLine: 16,
    BandLine: 17
};
ChartManager._instance = null;
ChartManager.getInstance = function () {
    if (ChartManager._instance == null) {
        ChartManager._instance = new ChartManager
    }
    return ChartManager._instance
};
ChartManager.prototype.__construct = function () {
    this._dataSources = {};
    this._dataSourceCache = {};
    this._dataProviders = {};
    this._frames = {};
    this._areas = {};
    this._timelines = {};
    this._ranges = {};
    this._plotters = {};
    this._themes = {};
    this._titles = {};
    this._frameMousePos = {};
    this._dsChartStyle = {};
    this._dragStarted = false;
    this._oldX = 0;
    this._fakeIndicators = {};
    this._captureMouseWheelDirectly = false;
    this._chart = {};
    this._chart.defaultFrame = new Chart;
    this._drawingTool = ChartManager.DrawingTool.CrossCursor;
    this._beforeDrawingTool = this._drawingTool;
    this._language = "zh-cn";
    this._mainCanvas = null;
    this._overlayCanvas = null;
    this._mainContext = null;
    this._overlayContext = null
};
ChartManager.prototype.redraw = function (t, e) {
    if (t == undefined || e) {
        t = "All"
    }
    if (t == "All" || t == "MainCanvas") {
        if (e) {
            this.getFrame("frame0").setChanged(true)
        }
        this.layout(this._mainContext, "frame0", 0, 0, this._mainCanvas.width, this._mainCanvas.height);
        this.drawMain("frame0", this._mainContext)
    }
    if (t == "All" || t == "OverlayCanvas") {
        this._overlayContext.clearRect(0, 0, this._overlayCanvas.width, this._overlayCanvas.height);
        this.drawOverlay("frame0", this._overlayContext)
    }
};
ChartManager.prototype.bindCanvas = function (t, e) {
    if (t == "main") {
        this._mainCanvas = e;
        this._mainContext = e.getContext("2d")
    } else {
        if (t == "overlay") {
            this._overlayCanvas = e;
            this._overlayContext = e.getContext("2d");
            if (this._captureMouseWheelDirectly) {
                $(this._overlayCanvas).bind("mousewheel", mouseWheel)
            }
        }
    }
};
ChartManager.prototype.getCaptureMouseWheelDirectly = function () {
    return this._captureMouseWheelDirectly
};
ChartManager.prototype.setCaptureMouseWheelDirectly = function (t) {
    this._captureMouseWheelDirectly = t;
    if (t) {
        $(this._overlayCanvas).bind("mousewheel", mouseWheel)
    } else {
        $(this._overlayCanvas).unbind("mousewheel")
    }
};
ChartManager.prototype.getChart = function (t) {
    return this._chart.defaultFrame
};
ChartManager.prototype.init = function () {
    delete this._ranges["frame0.k0.indic1"];
    delete this._ranges["frame0.k0.indic1Range"];
    delete this._areas["frame0.k0.indic1"];
    delete this._areas["frame0.k0.indic1Range"];
    DefaultTemplate.loadTemplate("frame0.k0", "YUANBAOHUI");
    this.redraw("All", true)
};
ChartManager.prototype.setCurrentDrawingTool = function (t) {
    this._drawingTool = ChartManager.DrawingTool[t];
    this.setRunningMode(this._drawingTool)
};
ChartManager.prototype.getLanguage = function () {
    return this._language
};
ChartManager.prototype.setLanguage = function (t) {
    this._language = t
};
ChartManager.prototype.setThemeName = function (t, e) {
    if (e == undefined) {
        e = "Dark"
    }
    var r;
    switch (e) {
        case"Light":
            r = new LightTheme;
            break;
        default:
            e = "Dark";
            r = new DarkTheme;
            break
    }
    this._themeName = e;
    this.setTheme(t, r);
    this.getFrame(t).setChanged(true)
};
ChartManager.prototype.getChartStyle = function (t) {
    var e = this._dsChartStyle[t];
    if (e == undefined) {
        return "CandleStick"
    }
    return e
};
ChartManager.prototype.setChartStyle = function (t, e) {
    if (this._dsChartStyle[t] == e) {
        return
    }
    var r = t + ".main";
    var a = r + ".main";
    var i = r + ".main";
    var o, n;
    switch (e) {
        case"CandleStick":
        case"CandleStickHLC":
        case"OHLC":
            o = this.getDataProvider(a);
            if (o == undefined || !is_instance(o, MainDataProvider)) {
                o = new MainDataProvider(a);
                this.setDataProvider(a, o);
                o.updateData()
            }
            this.setMainIndicator(t, ChartSettings.get().charts.mIndic);
            switch (e) {
                case"CandleStick":
                    n = new CandlestickPlotter(i);
                    break;
                case"CandleStickHLC":
                    n = new CandlestickHLCPlotter(i);
                    break;
                case"OHLC":
                    n = new OHLCPlotter(i);
                    break
            }
            this.setPlotter(i, n);
            n = new MinMaxPlotter(r + ".decoration");
            this.setPlotter(n.getName(), n);
            break;
        case"Line":
            o = new IndicatorDataProvider(a);
            this.setDataProvider(o.getName(), o);
            o.setIndicator(new HLCIndicator);
            this.removeMainIndicator(t);
            n = new IndicatorPlotter(i);
            this.setPlotter(i, n);
            this.removePlotter(r + ".decoration");
            break
    }
    this.getArea(n.getAreaName()).setChanged(true);
    this._dsChartStyle[t] = e
};
ChartManager.prototype.setNormalMode = function () {
    this._drawingTool = this._beforeDrawingTool;
    $(".chart_dropdown_data").removeClass("chart_dropdown-hover");
    $("#chart_toolpanel .chart_toolpanel_button").removeClass("selected");
    $("#chart_CrossCursor").parent().addClass("selected");
    if (this._drawingTool == ChartManager.DrawingTool.Cursor) {
        this.showCursor();
        $("#mode a").removeClass("selected");
        $("#chart_toolpanel .chart_toolpanel_button").removeClass("selected");
        $("#chart_Cursor").parent().addClass("selected")
    } else {
        this.hideCursor()
    }
};
ChartManager.prototype.setRunningMode = function (t) {
    var e = this.getDataSource("frame0.k0");
    var r = e.getCurrentToolObject();
    if (r != null && r.state != CToolObject.state.AfterDraw) {
        e.delToolObject()
    }
    if (e.getToolObjectCount() > 10) {
        this.setNormalMode();
        return
    }
    this._drawingTool = t;
    if (t == ChartManager.DrawingTool.Cursor) {
        this.showCursor()
    } else {
    }
    switch (t) {
        case ChartManager.DrawingTool.Cursor:
            this._beforeDrawingTool = t;
            break;
        case ChartManager.DrawingTool.ArrowLine:
            e.addToolObject(new CArrowLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.BandLine:
            e.addToolObject(new CBandLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.BiParallelLine:
            e.addToolObject(new CBiParallelLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.BiParallelRayLine:
            e.addToolObject(new CBiParallelRayLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.CrossCursor:
            this._beforeDrawingTool = t;
            break;
        case ChartManager.DrawingTool.DrawFibFans:
            e.addToolObject(new CFibFansObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.DrawFibRetrace:
            e.addToolObject(new CFibRetraceObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.DrawLines:
            e.addToolObject(new CStraightLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.HoriRayLine:
            e.addToolObject(new CHoriRayLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.HoriSegLine:
            e.addToolObject(new CHoriSegLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.HoriStraightLine:
            e.addToolObject(new CHoriStraightLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.PriceLine:
            e.addToolObject(new CPriceLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.RayLine:
            e.addToolObject(new CRayLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.SegLine:
            e.addToolObject(new CSegLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.StraightLine:
            e.addToolObject(new CStraightLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.TriParallelLine:
            e.addToolObject(new CTriParallelLineObject("frame0.k0"));
            break;
        case ChartManager.DrawingTool.VertiStraightLine:
            e.addToolObject(new CVertiStraightLineObject("frame0.k0"));
            break
    }
};
ChartManager.prototype.getTitle = function (t) {
    return this._titles[t]
};
ChartManager.prototype.setTitle = function (t, e) {
    this._titles[t] = e
};
ChartManager.prototype.setCurrentDataSource = function (t, e) {
    var r = this.getCachedDataSource(e);
    if (r != null) {
        this.setDataSource(t, r, true)
    } else {
        var a = this.getDataSource(t);
        if (a != null) {
            if (is_instance(a, MainDataSource)) {
                r = new MainDataSource(e)
            } else {
                if (is_instance(a, CLiveOrderDataSource)) {
                    r = new CLiveOrderDataSource(e)
                } else {
                    if (is_instance(a, CLiveTradeDataSource)) {
                        r = new CLiveTradeDataSource(e)
                    }
                }
            }
            this.setDataSource(t, r, true);
            this.setCachedDataSource(e, r)
        }
    }
};
ChartManager.prototype.getDataSource = function (t) {
    return this._dataSources[t]
};
ChartManager.prototype.setDataSource = function (t, e, r) {
    this._dataSources[t] = e;
    if (r) {
        this.updateData(t, null)
    }
};
ChartManager.prototype.getCachedDataSource = function (t) {
    return this._dataSourceCache[t]
};
ChartManager.prototype.setCachedDataSource = function (t, e) {
    this._dataSourceCache[t] = e
};
ChartManager.prototype.getDataProvider = function (t) {
    return this._dataProviders[t]
};
ChartManager.prototype.setDataProvider = function (t, e) {
    this._dataProviders[t] = e
};
ChartManager.prototype.removeDataProvider = function (t) {
    delete this._dataProviders[t]
};
ChartManager.prototype.getFrame = function (t) {
    return this._frames[t]
};
ChartManager.prototype.setFrame = function (t, e) {
    this._frames[t] = e
};
ChartManager.prototype.removeFrame = function (t) {
    delete this._frames[t]
};
ChartManager.prototype.getArea = function (t) {
    return this._areas[t]
};
ChartManager.prototype.setArea = function (t, e) {
    this._areas[t] = e
};
ChartManager.prototype.removeArea = function (t) {
    delete this._areas[t]
};
ChartManager.prototype.getTimeline = function (t) {
    return this._timelines[t]
};
ChartManager.prototype.setTimeline = function (t, e) {
    this._timelines[t] = e
};
ChartManager.prototype.removeTimeline = function (t) {
    delete this._timelines[t]
};
ChartManager.prototype.getRange = function (t) {
    return this._ranges[t]
};
ChartManager.prototype.setRange = function (t, e) {
    this._ranges[t] = e
};
ChartManager.prototype.removeRange = function (t) {
    delete this._ranges[t]
};
ChartManager.prototype.getPlotter = function (t) {
    return this._plotters[t]
};
ChartManager.prototype.setPlotter = function (t, e) {
    this._plotters[t] = e
};
ChartManager.prototype.removePlotter = function (t) {
    delete this._plotters[t]
};
ChartManager.prototype.getTheme = function (t) {
    return this._themes[t]
};
ChartManager.prototype.setTheme = function (t, e) {
    this._themes[t] = e
};
ChartManager.prototype.getFrameMousePos = function (t, e) {
    if (this._frameMousePos[t] != undefined) {
        e.x = this._frameMousePos[t].x;
        e.y = this._frameMousePos[t].y
    } else {
        e.x = -1;
        e.y = -1
    }
};
ChartManager.prototype.setFrameMousePos = function (t, e, r) {
    this._frameMousePos[t] = {x: e, y: r}
};
ChartManager.prototype.drawArea = function (t, e, r) {
    var a = e.getNameObject().getCompAt(2);
    if (a == "timeline") {
        if (e.getHeight() < 20) {
            return
        }
    } else {
        if (e.getHeight() < 30) {
            return
        }
    }
    if (e.getWidth() < 30) {
        return
    }
    a = e.getName();
    var i;
    var o, n = r.length;
    for (o = 0; o < n; o++) {
        i = this._plotters[a + r[o]];
        if (i != undefined) {
            i.Draw(t)
        }
    }
};
ChartManager.prototype.drawAreaMain = function (t, e) {
    var r = this._dataSources[e.getDataSourceName()];
    var a;
    if (r.getDataCount() < 1) {
        a = [".background"]
    } else {
        a = [".background", ".grid", ".main", ".secondary"]
    }
    this.drawArea(t, e, a);
    e.setChanged(false)
};
ChartManager.prototype.drawAreaOverlay = function (t, e) {
    var r = this._dataSources[e.getDataSourceName()];
    var a;
    if (r.getDataCount() < 1) {
        a = [".selection"]
    } else {
        a = [".decoration", ".selection", ".info", ".tool"]
    }
    this.drawArea(t, e, a)
};
ChartManager.prototype.drawMain = function (t, e) {
    drawn = false;
    if (!drawn) {
        for (var r in this._areas) {
            if (this._areas[r].getFrameName() == t && !is_instance(this._areas[r], ChartAreaGroup)) {
                this.drawAreaMain(e, this._areas[r])
            }
        }
    }
    var a;
    for (var i in this._timelines) {
        a = this._timelines[i];
        if (a.getFrameName() == t) {
            a.setUpdated(false)
        }
    }
    for (var i in this._ranges) {
        a = this._ranges[i];
        if (a.getFrameName() == t) {
            a.setUpdated(false)
        }
    }
    for (var i in this._areas) {
        a = this._areas[i];
        if (a.getFrameName() == t) {
            a.setChanged(false)
        }
    }
};
ChartManager.prototype.drawOverlay = function (t, e) {
    for (var r in this._areas) {
        var a = this._areas[r];
        if (is_instance(a, ChartAreaGroup)) {
            if (a.getFrameName() == t) {
                a.drawGrid(e)
            }
        }
    }
    for (var r in this._areas) {
        var a = this._areas[r];
        if (is_instance(a, ChartAreaGroup) == false) {
            if (a.getFrameName() == t) {
                this.drawAreaOverlay(e, a)
            }
        }
    }
};
ChartManager.prototype.updateData = function (t, e) {
    var r = this.getDataSource(t);
    if (r == undefined) {
        return
    }
    if (e != null) {
        if (!r.update(e)) {
            return false
        }
        if (r.getUpdateMode() == DataSource.UpdateMode.DoNothing) {
            return true
        }
    } else {
        r.setUpdateMode(DataSource.UpdateMode.Refresh)
    }
    var a = this.getTimeline(t);
    if (a != undefined) {
        a.update()
    }
    if (r.getDataCount() < 1) {
        return true
    }
    var i = [".main", ".secondary"];
    var o, n;
    for (var s in this._areas) {
        o = this._areas[s];
        if (is_instance(o, ChartAreaGroup)) {
            continue
        }
        if (o.getDataSourceName() != t) {
            continue
        }
        n = o.getName();
        for (var h = 0; h < i.length; h++) {
            var l = this.getDataProvider(n + i[h]);
            if (l != undefined) {
                l.updateData()
            }
        }
    }
    return true
};
ChartManager.prototype.updateRange = function (t) {
    var e = this.getDataSource(t);
    if (e.getDataCount() < 1) {
        return
    }
    var r = [".main", ".secondary"];
    var a, i;
    for (var o in this._areas) {
        a = this._areas[o];
        if (is_instance(a, ChartAreaGroup)) {
            continue
        }
        if (a.getDataSourceName() != t) {
            continue
        }
        i = a.getName();
        for (var n = 0; n < r.length; n++) {
            var s = this.getDataProvider(i + r[n]);
            if (s != undefined) {
                s.updateRange()
            }
        }
        var h = this.getTimeline(t);
        if (h != undefined && h.getMaxItemCount() > 0) {
            var l = this.getRange(i);
            if (l != undefined) {
                l.update()
            }
        }
    }
};
ChartManager.prototype.layout = function (t, e, r, a, i, o) {
    var n = this.getFrame(e);
    n.measure(t, i - r, o - a);
    n.layout(r, a, i, o);
    for (var s in this._timelines) {
        var h = this._timelines[s];
        if (h.getFrameName() == e) {
            h.onLayout()
        }
    }
    for (var s in this._dataSources) {
        if (s.substring(0, e.length) == e) {
            this.updateRange(s)
        }
    }
};
ChartManager.prototype.SelectRange = function (t, e) {
    var r;
    for (var a in this._ranges) {
        var i = this._ranges[a].getAreaName();
        var o = t.getName();
        if (i == o) {
            this._ranges[a].selectAt(e)
        } else {
            this._ranges[a].unselect()
        }
    }
};
ChartManager.prototype.scale = function (t) {
    if (this._highlightedFrame == null) {
        return
    }
    var e = this._highlightedFrame.getHighlightedArea();
    if (this.getRange(e.getName()) != undefined) {
        var r = e.getDataSourceName();
        var a = this.getTimeline(r);
        if (a != null) {
            a.scale(t);
            this.updateRange(r)
        }
    }
};
ChartManager.prototype.showCursor = function (t) {
    if (t === undefined) {
        t = "default"
    }
    this._mainCanvas.style.cursor = t;
    this._overlayCanvas.style.cursor = t
};
ChartManager.prototype.hideCursor = function () {
    this._mainCanvas.style.cursor = "none";
    this._overlayCanvas.style.cursor = "none"
};
ChartManager.prototype.showCrossCursor = function (t, e, r) {
    var a = this.getRange(t.getName());
    if (a != undefined) {
        a.selectAt(r);
        a = this.getTimeline(t.getDataSourceName());
        if (a != undefined) {
            if (a.selectAt(e)) {
                return true
            }
        }
    }
    return false
};
ChartManager.prototype.hideCrossCursor = function (t) {
    if (t != null) {
        for (var e in this._timelines) {
            var r = this._timelines[e];
            if (r != t) {
                r.unselect()
            }
        }
    } else {
        for (var e in this._timelines) {
            this._timelines[e].unselect()
        }
    }
    for (var e in this._ranges) {
        this._ranges[e].unselect()
    }
};
ChartManager.prototype.clearHighlight = function () {
    if (this._highlightedFrame != null) {
        this._highlightedFrame.highlight(null);
        this._highlightedFrame = null
    }
};
ChartManager.prototype.onToolMouseMove = function (t, e, r) {
    var a = false;
    t += ".";
    for (var i in this._dataSources) {
        if (i.indexOf(t) == 0) {
            var o = this._dataSources[i];
            if (is_instance(o, MainDataSource)) {
                if (o.toolManager.acceptMouseMoveEvent(e, r)) {
                    a = true
                }
            }
        }
    }
    return a
};
ChartManager.prototype.onToolMouseDown = function (t, e, r) {
    var a = false;
    t += ".";
    for (var i in this._dataSources) {
        if (i.indexOf(t) == 0) {
            var o = this._dataSources[i];
            if (is_instance(o, MainDataSource)) {
                if (o.toolManager.acceptMouseDownEvent(e, r)) {
                    a = true
                }
            }
        }
    }
    return a
};
ChartManager.prototype.onToolMouseUp = function (t, e, r) {
    var a = false;
    t += ".";
    for (var i in this._dataSources) {
        if (i.indexOf(t) == 0) {
            var o = this._dataSources[i];
            if (is_instance(o, MainDataSource)) {
                if (o.toolManager.acceptMouseUpEvent(e, r)) {
                    a = true
                }
            }
        }
    }
    return a
};
ChartManager.prototype.onToolMouseDrag = function (t, e, r) {
    var a = false;
    t += ".";
    for (var i in this._dataSources) {
        if (i.indexOf(t) == 0) {
            var o = this._dataSources[i];
            if (is_instance(o, MainDataSource)) {
                if (o.toolManager.acceptMouseDownMoveEvent(e, r)) {
                    a = true
                }
            }
        }
    }
    return a
};
ChartManager.prototype.onMouseMove = function (t, e, r, a) {
    var i = this.getFrame(t);
    if (i === undefined) {
        return
    }
    this.setFrameMousePos(t, e, r);
    this.hideCrossCursor();
    if (this._highlightedFrame != i) {
        this.clearHighlight()
    }
    if (this._capturingMouseArea != null) {
        this._capturingMouseArea.onMouseMove(e, r);
        return
    }
    var o = i.contains(e, r);
    if (o == null) {
        return
    }
    var n, s, h = o.length;
    for (s = h - 1; s >= 0; s--) {
        n = o[s];
        n = n.onMouseMove(e, r);
        if (n != null) {
            if (!is_instance(n, ChartAreaGroup)) {
                i.highlight(n);
                this._highlightedFrame = i
            }
            return
        }
    }
};
ChartManager.prototype.onMouseLeave = function (t, e, r, a) {
    var i = this.getFrame(t);
    if (i == undefined) {
        return
    }
    this.setFrameMousePos(t, e, r);
    this.hideCrossCursor();
    this.clearHighlight();
    if (this._capturingMouseArea != null) {
        this._capturingMouseArea.onMouseLeave(e, r);
        this._capturingMouseArea = null
    }
    this._dragStarted = false
};
ChartManager.prototype.onMouseDown = function (t, e, r) {
    var a = this.getFrame(t);
    if (a == undefined) {
        return
    }
    var i = a.contains(e, r);
    if (i == null) {
        return
    }
    var o, n, s = i.length;
    for (n = s - 1; n >= 0; n--) {
        o = i[n];
        o = o.onMouseDown(e, r);
        if (o != null) {
            this._capturingMouseArea = o;
            return
        }
    }
};
ChartManager.prototype.onMouseUp = function (t, e, r) {
    var a = this.getFrame(t);
    if (a == undefined) {
        return
    }
    if (this._capturingMouseArea) {
        if (this._capturingMouseArea.onMouseUp(e, r) == null && this._dragStarted == false) {
            if (this._selectedFrame != null && this._selectedFrame != a) {
                this._selectedFrame.select(null)
            }
            if (this._capturingMouseArea.isSelected()) {
                if (!this._captureMouseWheelDirectly) {
                    $(this._overlayCanvas).unbind("mousewheel")
                }
                a.select(null);
                this._selectedFrame = null
            } else {
                if (this._selectedFrame != a) {
                    if (!this._captureMouseWheelDirectly) {
                        $(this._overlayCanvas).bind("mousewheel", mouseWheel)
                    }
                }
                a.select(this._capturingMouseArea);
                this._selectedFrame = a
            }
        }
        this._capturingMouseArea = null;
        this._dragStarted = false
    }
};
ChartManager.prototype.deleteToolObject = function () {
    var t = this.getDataSource("frame0.k0");
    var e = t.getSelectToolObjcet();
    if (e != null) {
        t.delSelectToolObject()
    }
    var r = t.getCurrentToolObject();
    if (r != null && r.getState() != CToolObject.state.AfterDraw) {
        t.delToolObject()
    }
    this.setNormalMode()
};
ChartManager.prototype.unloadTemplate = function (t) {
    var e = this.getFrame(t);
    if (e == undefined) {
        return
    }
    for (var r in this._dataSources) {
        if (r.match(t + ".")) {
            delete this._dataSources[r]
        }
    }
    for (var r in this._dataProviders) {
        if (this._dataProviders[r].getFrameName() == t) {
            delete this._dataProviders[r]
        }
    }
    delete this._frames[t];
    for (var r in this._areas) {
        if (this._areas[r].getFrameName() == t) {
            delete this._areas[r]
        }
    }
    for (var r in this._timelines) {
        if (this._timelines[r].getFrameName() == t) {
            delete this._timelines[r]
        }
    }
    for (var r in this._ranges) {
        if (this._ranges[r].getFrameName() == t) {
            delete this._ranges[r]
        }
    }
    for (var r in this._plotters) {
        if (this._plotters[r].getFrameName() == t) {
            delete this._plotters[r]
        }
    }
    delete this._themes[t];
    delete this._frameMousePos[t]
};
ChartManager.prototype.createIndicatorAndRange = function (t, e, r) {
    var a, i;
    switch (e) {
        case"MA":
            a = new MAIndicator;
            i = new PositiveRange(t);
            break;
        case"EMA":
            a = new EMAIndicator;
            i = new PositiveRange(t);
            break;
        case"VOLUME":
            a = new VOLUMEIndicator;
            i = new ZeroBasedPositiveRange(t);
            break;
        case"MACD":
            a = new MACDIndicator;
            i = new ZeroCenteredRange(t);
            break;
        case"DMI":
            a = new DMIIndicator;
            i = new PercentageRange(t);
            break;
        case"DMA":
            a = new DMAIndicator;
            i = new Range(t);
            break;
        case"TRIX":
            a = new TRIXIndicator;
            i = new Range(t);
            break;
        case"BRAR":
            a = new BRARIndicator;
            i = new Range(t);
            break;
        case"VR":
            a = new VRIndicator;
            i = new Range(t);
            break;
        case"OBV":
            a = new OBVIndicator;
            i = new Range(t);
            break;
        case"EMV":
            a = new EMVIndicator;
            i = new Range(t);
            break;
        case"RSI":
            a = new RSIIndicator;
            i = new PercentageRange(t);
            break;
        case"WR":
            a = new WRIndicator;
            i = new PercentageRange(t);
            break;
        case"SAR":
            a = new SARIndicator;
            i = new PositiveRange(t);
            break;
        case"KDJ":
            a = new KDJIndicator;
            i = new PercentageRange(t);
            break;
        case"ROC":
            a = new ROCIndicator;
            i = new Range(t);
            break;
        case"MTM":
            a = new MTMIndicator;
            i = new Range(t);
            break;
        case"BOLL":
            a = new BOLLIndicator;
            i = new Range(t);
            break;
        case"PSY":
            a = new PSYIndicator;
            i = new Range(t);
            break;
        case"StochRSI":
            a = new STOCHRSIIndicator;
            i = new PercentageRange(t);
            break;
        default:
            return null
    }
    if (!r) {
        a.setParameters(ChartSettings.get().indics[e])
    }
    return {indic: a, range: i}
};
ChartManager.prototype.setMainIndicator = function (t, e) {
    var r = t + ".main";
    var a = this.getDataProvider(r + ".main");
    if (a == undefined || !is_instance(a, MainDataProvider)) {
        return false
    }
    var i;
    switch (e) {
        case"MA":
            i = new MAIndicator;
            break;
        case"EMA":
            i = new EMAIndicator;
            break;
        case"BOLL":
            i = new BOLLIndicator;
            break;
        case"SAR":
            i = new SARIndicator;
            break;
        default:
            return false
    }
    i.setParameters(ChartSettings.get().indics[e]);
    var o = r + ".secondary";
    var n = this.getDataProvider(o);
    if (n == undefined) {
        n = new IndicatorDataProvider(o);
        this.setDataProvider(n.getName(), n)
    }
    n.setIndicator(i);
    var s = this.getPlotter(o);
    if (s == undefined) {
        s = new IndicatorPlotter(o);
        this.setPlotter(s.getName(), s)
    }
    this.getArea(r).setChanged(true);
    return true
};
ChartManager.prototype.setIndicator = function (t, e) {
    var r = this.getArea(t);
    if (r == undefined || r.getNameObject().getCompAt(2) == "main") {
        return false
    }
    var a = this.getDataProvider(t + ".secondary");
    if (a == undefined || !is_instance(a, IndicatorDataProvider)) {
        return false
    }
    var i = this.createIndicatorAndRange(t, e);
    if (i == null) {
        return false
    }
    var o = i.indic;
    var n = i.range;
    this.removeDataProvider(t + ".main");
    this.removePlotter(t + ".main");
    this.removeRange(t);
    this.removePlotter(t + "Range.decoration");
    a.setIndicator(o);
    this.setRange(t, n);
    n.setPaddingTop(20);
    n.setPaddingBottom(4);
    n.setMinInterval(20);
    if (is_instance(o, VOLUMEIndicator)) {
        var s = new LastVolumePlotter(t + "Range.decoration");
        this.setPlotter(s.getName(), s)
    } else {
        if (is_instance(o, BOLLIndicator) || is_instance(o, SARIndicator)) {
            var a = new MainDataProvider(t + ".main");
            this.setDataProvider(a.getName(), a);
            a.updateData();
            var s = new OHLCPlotter(t + ".main");
            this.setPlotter(s.getName(), s)
        }
    }
    return true
};
ChartManager.prototype.removeMainIndicator = function (t) {
    var e = t + ".main";
    var r = e + ".secondary";
    var a = this.getDataProvider(r);
    if (a == undefined || !is_instance(a, IndicatorDataProvider)) {
        return
    }
    this.removeDataProvider(r);
    this.removePlotter(r);
    this.getArea(e).setChanged(true)
};
ChartManager.prototype.removeIndicator = function (t) {
    var e = this.getArea(t);
    if (e == undefined || e.getNameObject().getCompAt(2) == "main") {
        return
    }
    var r = this.getDataProvider(t + ".secondary");
    if (r == undefined || !is_instance(r, IndicatorDataProvider)) {
        return
    }
    var a = t + "Range";
    var i = this.getArea(a);
    if (i == undefined) {
        return
    }
    var o = this.getArea(e.getDataSourceName() + ".charts");
    if (o == undefined) {
        return
    }
    o.removeArea(e);
    this.removeArea(t);
    o.removeArea(i);
    this.removeArea(a);
    for (var n in this._dataProviders) {
        if (this._dataProviders[n].getAreaName() == t) {
            this.removeDataProvider(n)
        }
    }
    for (var n in this._ranges) {
        if (this._ranges[n].getAreaName() == t) {
            this.removeRange(n)
        }
    }
    for (var n in this._plotters) {
        if (this._plotters[n].getAreaName() == t) {
            this.removePlotter(n)
        }
    }
    for (var n in this._plotters) {
        if (this._plotters[n].getAreaName() == a) {
            this.removePlotter(n)
        }
    }
};
ChartManager.prototype.getIndicatorParameters = function (t) {
    var e = this._fakeIndicators[t];
    if (e == undefined) {
        var r = this.createIndicatorAndRange("", t);
        if (r == null) {
            return null
        }
        this._fakeIndicators[t] = e = r.indic
    }
    var a = [];
    var i, o = e.getParameterCount();
    for (i = 0; i < o; i++) {
        a.push(e.getParameterAt(i))
    }
    return a
};
ChartManager.prototype.setIndicatorParameters = function (t, e) {
    var r, a;
    for (r in this._dataProviders) {
        var i = this._dataProviders[r];
        if (is_instance(i, IndicatorDataProvider) == false) {
            continue
        }
        a = i.getIndicator();
        if (a.getName() == t) {
            a.setParameters(e);
            i.refresh();
            this.getArea(i.getAreaName()).setChanged(true)
        }
    }
    a = this._fakeIndicators[t];
    if (a == undefined) {
        var o = this.createIndicatorAndRange("", t, true);
        if (o == null) {
            return
        }
        this._fakeIndicators[t] = a = o.indic
    }
    a.setParameters(e)
};
ChartManager.prototype.getIndicatorAreaName = function (t, e) {
    var r = this.getArea(t + ".charts");
    var a = r.getAreaCount() >> 1;
    if (e < 0 || e >= a) {
        return ""
    }
    return r.getAreaAt(e << 1).getName()
};
var Timeline = create_class(NamedObject);
Timeline._ItemWidth = [1, 3, 3, 5, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29];
Timeline._SpaceWidth = [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7];
Timeline.PADDING_LEFT = 4;
Timeline.PADDING_RIGHT = 8;
Timeline.prototype.__construct = function (t) {
    Timeline.__super.__construct.call(this, t);
    this._updated = false;
    this._innerLeft = 0;
    this._innerWidth = 0;
    this._firstColumnLeft = 0;
    this._scale = 3;
    this._lastScale = -1;
    this._maxItemCount = 0;
    this._maxIndex = 0;
    this._firstIndex = -1;
    this._selectedIndex = -1;
    this._savedFirstIndex = -1
};
Timeline.prototype.isLatestShown = function () {
    return this.getLastIndex() == this._maxIndex
};
Timeline.prototype.isUpdated = function () {
    return this._updated
};
Timeline.prototype.setUpdated = function (t) {
    this._updated = t
};
Timeline.prototype.getItemWidth = function () {
    return Timeline._ItemWidth[this._scale]
};
Timeline.prototype.getSpaceWidth = function () {
    return Timeline._SpaceWidth[this._scale]
};
Timeline.prototype.getColumnWidth = function () {
    return this.getSpaceWidth() + this.getItemWidth()
};
Timeline.prototype.getInnerWidth = function () {
    return this._innerWidth
};
Timeline.prototype.getItemLeftOffset = function () {
    return this.getSpaceWidth()
};
Timeline.prototype.getItemCenterOffset = function () {
    return this.getSpaceWidth() + (this.getItemWidth() >> 1)
};
Timeline.prototype.getFirstColumnLeft = function () {
    return this._firstColumnLeft
};
Timeline.prototype.getMaxItemCount = function () {
    return this._maxItemCount
};
Timeline.prototype.getFirstIndex = function () {
    return this._firstIndex
};
Timeline.prototype.getLastIndex = function () {
    return Math.min(this._firstIndex + this._maxItemCount, this._maxIndex)
};
Timeline.prototype.getSelectedIndex = function () {
    return this._selectedIndex
};
Timeline.prototype.getMaxIndex = function () {
    return this._maxIndex
};
Timeline.prototype.calcColumnCount = function (t) {
    return Math.floor(t / this.getColumnWidth()) << 0
};
Timeline.prototype.calcFirstColumnLeft = function (t) {
    return this._innerLeft + this._innerWidth - this.getColumnWidth() * t
};
Timeline.prototype.calcFirstIndexAlignRight = function (t, e, r) {
    return Math.max(0, t + Math.max(e, 1) - Math.max(r, 1))
};
Timeline.prototype.calcFirstIndex = function (t) {
    return this.validateFirstIndex(this.calcFirstIndexAlignRight(this._firstIndex, this._maxItemCount, t), t)
};
Timeline.prototype.updateMaxItemCount = function () {
    var t = this.calcColumnCount(this._innerWidth);
    var e;
    if (this._maxItemCount < 1) {
        e = this.calcFirstIndex(t)
    } else {
        if (this._lastScale == this._scale) {
            e = this.validateFirstIndex(this._firstIndex - (t - this._maxItemCount))
        } else {
            var r = this._selectedIndex >= 0 ? this._selectedIndex : this.getLastIndex() - 1;
            e = this.validateFirstIndex(r - Math.round((r - this._firstIndex) * t / this._maxItemCount))
        }
    }
    this._lastScale = this._scale;
    if (this._firstIndex != e) {
        if (this._selectedIndex == this._firstIndex) {
            this._selectedIndex = e
        }
        this._firstIndex = e;
        this._updated = true
    }
    if (this._maxItemCount != t) {
        this._maxItemCount = t;
        this._updated = true
    }
    this._firstColumnLeft = this.calcFirstColumnLeft(t)
};
Timeline.prototype.validateFirstIndex = function (t, e) {
    if (this._maxIndex < 1) {
        return -1
    }
    if (t < 0) {
        return 0
    }
    var r = Math.max(0, this._maxIndex - 1);
    if (t > r) {
        return r
    }
    return t
};
Timeline.prototype.validateSelectedIndex = function () {
    if (this._selectedIndex < this._firstIndex) {
        this._selectedIndex = -1
    } else {
        if (this._selectedIndex >= this.getLastIndex()) {
            this._selectedIndex = -1
        }
    }
};
Timeline.prototype.onLayout = function () {
    var t = ChartManager.getInstance();
    var e = t.getArea(this.getDataSourceName() + ".main");
    if (e != null) {
        this._innerLeft = e.getLeft() + Timeline.PADDING_LEFT;
        var r = Math.max(0, e.getWidth() - (Timeline.PADDING_LEFT + Timeline.PADDING_RIGHT));
        if (this._innerWidth != r) {
            this._innerWidth = r;
            this.updateMaxItemCount()
        }
    }
};
Timeline.prototype.toIndex = function (t) {
    return this._firstIndex + this.calcColumnCount(t - this._firstColumnLeft)
};
Timeline.prototype.toColumnLeft = function (t) {
    return this._firstColumnLeft + this.getColumnWidth() * (t - this._firstIndex)
};
Timeline.prototype.toItemLeft = function (t) {
    return this.toColumnLeft(t) + this.getItemLeftOffset()
};
Timeline.prototype.toItemCenter = function (t) {
    return this.toColumnLeft(t) + this.getItemCenterOffset()
};
Timeline.prototype.selectAt = function (t) {
    this._selectedIndex = this.toIndex(t);
    this.validateSelectedIndex();
    return this._selectedIndex >= 0
};
Timeline.prototype.unselect = function () {
    this._selectedIndex = -1
};
Timeline.prototype.update = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource(this.getDataSourceName());
    var r = this._maxIndex;
    this._maxIndex = e.getDataCount();
    switch (e.getUpdateMode()) {
        case DataSource.UpdateMode.Refresh:
            if (this._maxIndex < 1) {
                this._firstIndex = -1
            } else {
                this._firstIndex = Math.max(this._maxIndex - this._maxItemCount, 0)
            }
            this._selectedIndex = -1;
            this._updated = true;
            break;
        case DataSource.UpdateMode.Append:
            var a = this.getLastIndex();
            var i = e.getErasedCount();
            if (a < r) {
                if (i > 0) {
                    this._firstIndex = Math.max(this._firstIndex - i, 0);
                    if (this._selectedIndex >= 0) {
                        this._selectedIndex -= i;
                        this.validateSelectedIndex()
                    }
                    this._updated = true
                }
            } else {
                if (a == r) {
                    this._firstIndex += this._maxIndex - r;
                    if (this._selectedIndex >= 0) {
                        this._selectedIndex -= i;
                        this.validateSelectedIndex()
                    }
                    this._updated = true
                }
            }
            break
    }
};
Timeline.prototype.move = function (t) {
    if (this.isLatestShown()) {
        ChartManager.getInstance().getArea(this.getDataSourceName() + ".mainRange").setChanged(true)
    }
    this._firstIndex = this.validateFirstIndex(this._savedFirstIndex - this.calcColumnCount(t), this._maxItemCount);
    this._updated = true;
    if (this._selectedIndex >= 0) {
        this.validateSelectedIndex()
    }
};
Timeline.prototype.startMove = function () {
    this._savedFirstIndex = this._firstIndex
};
Timeline.prototype.scale = function (t) {
    this._scale += t;
    if (this._scale < 0) {
        this._scale = 0
    } else {
        if (this._scale >= Timeline._ItemWidth.length) {
            this._scale = Timeline._ItemWidth.length - 1
        }
    }
    this.updateMaxItemCount();
    if (this._selectedIndex >= 0) {
        this.validateSelectedIndex()
    }
};
var Range = create_class(NamedObject);
Range.prototype.__construct = function (t) {
    Range.__super.__construct.call(this, t);
    this._updated = true;
    this._minValue = Number.MAX_VALUE;
    this._maxValue = -Number.MAX_VALUE;
    this._outerMinValue = Number.MAX_VALUE;
    this._outerMaxValue = -Number.MAX_VALUE;
    this._ratio = 0;
    this._top = 0;
    this._bottom = 0;
    this._paddingTop = 0;
    this._paddingBottom = 0;
    this._minInterval = 36;
    this._selectedPosition = -1;
    this._selectedValue = -Number.MAX_VALUE;
    this._gradations = []
};
Range.prototype.isUpdated = function () {
    return this._updated
};
Range.prototype.setUpdated = function (t) {
    this._updated = t
};
Range.prototype.getMinValue = function () {
    return this._minValue
};
Range.prototype.getMaxValue = function () {
    return this._maxValue
};
Range.prototype.getRange = function () {
    return this._maxValue - this._minValue
};
Range.prototype.getOuterMinValue = function () {
    return this._outerMinValue
};
Range.prototype.getOuterMaxValue = function () {
    return this._outerMaxValue
};
Range.prototype.getOuterRange = function () {
    return this._outerMaxValue - this._outerMinValue
};
Range.prototype.getHeight = function () {
    return Math.max(0, this._bottom - this._top)
};
Range.prototype.getGradations = function () {
    return this._gradations
};
Range.prototype.getMinInterval = function () {
    return this._minInterval
};
Range.prototype.setMinInterval = function (t) {
    this._minInterval = t
};
Range.prototype.getSelectedPosition = function () {
    if (this._selectedPosition >= 0) {
        return this._selectedPosition
    }
    if (this._selectedValue > -Number.MAX_VALUE) {
        return this.toY(this._selectedValue)
    }
    return -1
};
Range.prototype.getSelectedValue = function () {
    if (this._selectedValue > -Number.MAX_VALUE) {
        return this._selectedValue
    }
    var t = ChartManager.getInstance();
    var e = t.getArea(this.getAreaName());
    if (e == null) {
        return -Number.MAX_VALUE
    }
    if (this._selectedPosition < e.getTop() + 12 || this._selectedPosition >= e.getBottom() - 4) {
        return -Number.MAX_VALUE
    }
    return this.toValue(this._selectedPosition)
};
Range.prototype.setPaddingTop = function (t) {
    this._paddingTop = t
};
Range.prototype.setPaddingBottom = function (t) {
    this._paddingBottom = t
};
Range.prototype.toValue = function (t) {
    return this._maxValue - (t - this._top) / this._ratio
};
Range.prototype.toY = function (t) {
    if (this._ratio > 0) {
        return this._top + Math.floor((this._maxValue - t) * this._ratio + .5)
    }
    return this._top
};
Range.prototype.toHeight = function (t) {
    return Math.floor(t * this._ratio + 1.5)
};
Range.prototype.update = function () {
    var t = Number.MAX_VALUE;
    var e = -Number.MAX_VALUE;
    var r = ChartManager.getInstance();
    var a, i = [".main", ".secondary"];
    for (var o = 0; o < i.length; o++) {
        a = r.getDataProvider(this.getName() + i[o]);
        if (a != null) {
            t = Math.min(t, a.getMinValue());
            e = Math.max(e, a.getMaxValue())
        }
    }
    var n = {min: t, max: e};
    this.preSetRange(n);
    this.setRange(n.min, n.max)
};
Range.prototype.select = function (t) {
    this._selectedValue = t;
    this._selectedPosition = -1
};
Range.prototype.selectAt = function (t) {
    this._selectedPosition = t;
    this._selectedValue = -Number.MAX_VALUE
};
Range.prototype.unselect = function () {
    this._selectedPosition = -1;
    this._selectedValue = -Number.MAX_VALUE
};
Range.prototype.preSetRange = function (t) {
    if (t.min == t.max) {
        t.min = -1;
        t.max = 1
    }
};
Range.prototype.setRange = function (t, e) {
    var r = ChartManager.getInstance();
    var a = r.getArea(this.getAreaName());
    if (this._minValue == t && this._maxValue == e && !a.isChanged()) {
        return
    }
    this._updated = true;
    this._minValue = t;
    this._maxValue = e;
    this._gradations = [];
    var i = a.getTop() + this._paddingTop;
    var o = a.getBottom() - (this._paddingBottom + 1);
    if (i >= o) {
        this._minValue = this._maxValue;
        return
    }
    this._top = i;
    this._bottom = o;
    if (this._maxValue > this._minValue) {
        this._ratio = (o - i) / (this._maxValue - this._minValue)
    } else {
        this._ratio = 1
    }
    this._outerMinValue = this.toValue(a.getBottom());
    this._outerMaxValue = this.toValue(a.getTop());
    this.updateGradations()
};
Range.prototype.calcInterval = function () {
    var t = this.getHeight();
    var e = this.getMinInterval();
    if (t / e <= 1) {
        e = t >> 1
    }
    var r = this.getRange();
    var a = 0;
    while (a > -2 && Math.floor(r) < r) {
        r *= 10;
        a--
    }
    var i, o;
    for (; ; a++) {
        o = Math.pow(10, a);
        i = o;
        if (this.toHeight(i) > e) {
            break
        }
        i = 2 * o;
        if (this.toHeight(i) > e) {
            break
        }
        i = 5 * o;
        if (this.toHeight(i) > e) {
            break
        }
    }
    return i
};
Range.prototype.updateGradations = function () {
    this._gradations = [];
    var t = this.calcInterval();
    if (t <= 0) {
        return
    }
    var e = Math.floor(this.getMaxValue() / t) * t;
    do {
        this._gradations.push(e);
        e -= t
    } while (e > this.getMinValue())
};
var PositiveRange = create_class(Range);
PositiveRange.prototype.__construct = function (t) {
    PositiveRange.__super.__construct.call(this, t)
};
PositiveRange.prototype.preSetRange = function (t) {
    if (t.min < 0) {
        t.min = 0
    }
    if (t.max < 0) {
        t.max = 0
    }
};
var ZeroBasedPositiveRange = create_class(Range);
ZeroBasedPositiveRange.prototype.__construct = function (t) {
    ZeroBasedPositiveRange.__super.__construct.call(this, t)
};
ZeroBasedPositiveRange.prototype.preSetRange = function (t) {
    t.min = 0;
    if (t.max < 0) {
        t.max = 0
    }
};
var MainRange = create_class(Range);
MainRange.prototype.__construct = function (t) {
    MainRange.__super.__construct.call(this, t)
};
MainRange.prototype.preSetRange = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getTimeline(this.getDataSourceName());
    var a = r.getMaxIndex() - r.getLastIndex();
    if (a < 25) {
        var i = e.getDataSource(this.getDataSourceName());
        var o = i.getDataAt(i.getDataCount() - 1);
        var n = (t.max - t.min) / 4 * (1 - a / 25);
        t.min = Math.min(t.min, Math.max(o.low - n, 0));
        t.max = Math.max(t.max, o.high + n)
    }
    if (t.min > 0) {
        var s = t.max / t.min;
        if (s < 1.016) {
            var h = (t.max + t.min) / 2;
            var l = (s - 1) * 1.5;
            t.max = h * (1 + l);
            t.min = h * (1 - l)
        } else {
            if (s < 1.048) {
                var h = (t.max + t.min) / 2;
                t.max = h * 1.024;
                t.min = h * .976
            }
        }
    }
    if (t.min < 0) {
        t.min = 0
    }
    if (t.max < 0) {
        t.max = 0
    }
};
var ZeroCenteredRange = create_class(Range);
ZeroCenteredRange.prototype.__construct = function (t) {
    ZeroCenteredRange.__super.__construct.call(this, t)
};
ZeroCenteredRange.prototype.calcInterval = function (t) {
    var e = this.getMinInterval();
    if (t.getHeight() / e < 2) {
        return 0
    }
    var r = this.getRange();
    var a;
    for (a = 3; ; a += 2) {
        if (this.toHeight(r / a) <= e) {
            break
        }
    }
    a -= 2;
    return r / a
};
ZeroCenteredRange.prototype.updateGradations = function () {
    this._gradations = [];
    var t = ChartManager.getInstance();
    var e = t.getArea(this.getAreaName());
    var r = this.calcInterval(e);
    if (r <= 0) {
        return
    }
    var a = r / 2;
    do {
        this._gradations.push(a);
        this._gradations.push(-a);
        a += r
    } while (a <= this.getMaxValue())
};
ZeroCenteredRange.prototype.preSetRange = function (t) {
    var e = Math.max(Math.abs(t.min), Math.abs(t.max));
    t.min = -e;
    t.max = e
};
var PercentageRange = create_class(Range);
PercentageRange.prototype.__construct = function (t) {
    PercentageRange.__super.__construct.call(this, t)
};
PercentageRange.prototype.updateGradations = function () {
    this._gradations = [];
    var t = ChartManager.getInstance();
    var e = t.getArea(this.getAreaName());
    var r = 10;
    var a = Math.floor(this.toHeight(r));
    if (a << 2 > e.getHeight()) {
        return
    }
    var i = Math.ceil(this.getMinValue() / r) * r;
    if (i == 0) {
        i = 0
    }
    if (a << 2 < 24) {
        if (a << 1 < 8) {
            return
        }
        do {
            if (i == 20 || i == 80) {
                this._gradations.push(i)
            }
            i += r
        } while (i < this.getMaxValue())
    } else {
        do {
            if (a < 8) {
                if (i == 20 || i == 50 || i == 80) {
                    this._gradations.push(i)
                }
            } else {
                if (i == 0 || i == 20 || i == 50 || i == 80 || i == 100) {
                    this._gradations.push(i)
                }
            }
            i += r
        } while (i < this.getMaxValue())
    }
};
var DataSource = create_class(NamedObject);
DataSource.prototype.__construct = function (t) {
    DataSource.__super.__construct.call(this, t)
};
DataSource.UpdateMode = {DoNothing: 0, Refresh: 1, Update: 2, Append: 3};
DataSource.prototype.getUpdateMode = function () {
    return this._updateMode
};
DataSource.prototype.setUpdateMode = function (t) {
    this._updateMode = t
};
DataSource.prototype.getCacheSize = function () {
    return 0
};
DataSource.prototype.getDataCount = function () {
    return 0
};
var MainDataSource = create_class(DataSource);
MainDataSource.prototype.__construct = function (t) {
    MainDataSource.__super.__construct.call(this, t);
    this._erasedCount = 0;
    this._dataItems = [];
    this._decimalDigits = 0;
    this.toolManager = new CToolManager(t)
};
MainDataSource.prototype.getCacheSize = function () {
    return this._dataItems.length
};
MainDataSource.prototype.getDataCount = function () {
    return this._dataItems.length
};
MainDataSource.prototype.getUpdatedCount = function () {
    return this._updatedCount
};
MainDataSource.prototype.getAppendedCount = function () {
    return this._appendedCount
};
MainDataSource.prototype.getErasedCount = function () {
    return this._erasedCount
};
MainDataSource.prototype.getDecimalDigits = function () {
    return this._decimalDigits
};
MainDataSource.prototype.calcDecimalDigits = function (t) {
    var e = "" + t;
    var r = e.indexOf(".");
    if (r < 0) {
        return 0
    }
    return e.length - 1 - r
};
MainDataSource.prototype.getLastDate = function () {
    var t = this.getDataCount();
    if (t < 1) {
        return -1
    }
    return this.getDataAt(t - 1).date
};
MainDataSource.prototype.getDataAt = function (t) {
    return this._dataItems[t]
};
MainDataSource.prototype.update = function (t) {
    this._updatedCount = 0;
    this._appendedCount = 0;
    this._erasedCount = 0;
    var e = this._dataItems.length;
    if (e > 0) {
        var r = e - 1;
        var a = this._dataItems[r];
        var i, o, n = t.length;
        for (o = 0; o < n; o++) {
            i = t[o];
            if (i[0] == a.date) {
                if (a.open == i[1] && a.high == i[2] && a.low == i[3] && a.close == i[4] && a.volume == i[5]) {
                    this.setUpdateMode(DataSource.UpdateMode.DoNothing)
                } else {
                    this.setUpdateMode(DataSource.UpdateMode.Update);
                    this._dataItems[r] = {date: i[0], open: i[1], high: i[2], low: i[3], close: i[4], volume: i[5]};
                    this._updatedCount++
                }
                o++;
                if (o < n) {
                    this.setUpdateMode(DataSource.UpdateMode.Append);
                    for (; o < n; o++, this._appendedCount++) {
                        i = t[o];
                        this._dataItems.push({date: i[0], open: i[1], high: i[2], low: i[3], close: i[4], volume: i[5]})
                    }
                }
                return true
            }
        }
        if (n < 1e3) {
            this.setUpdateMode(DataSource.UpdateMode.DoNothing);
            return false
        }
    }
    this.setUpdateMode(DataSource.UpdateMode.Refresh);
    this._dataItems = [];
    var s, h, i, o, n = t.length;
    for (o = 0; o < n; o++) {
        i = t[o];
        for (h = 1; h <= 4; h++) {
            s = this.calcDecimalDigits(i[h]);
            if (this._decimalDigits < s) {
                this._decimalDigits = s
            }
        }
        this._dataItems.push({date: i[0], open: i[1], high: i[2], low: i[3], close: i[4], volume: i[5]})
    }
    return true
};
MainDataSource.prototype.select = function (t) {
    this.toolManager.selecedObject = t
};
MainDataSource.prototype.unselect = function () {
    this.toolManager.selecedObject = -1
};
MainDataSource.prototype.addToolObject = function (t) {
    this.toolManager.addToolObject(t)
};
MainDataSource.prototype.delToolObject = function () {
    this.toolManager.delCurrentObject()
};
MainDataSource.prototype.getToolObject = function (t) {
    return this.toolManager.getToolObject(t)
};
MainDataSource.prototype.getToolObjectCount = function () {
    return this.toolManager.toolObjects.length
};
MainDataSource.prototype.getCurrentToolObject = function () {
    return this.toolManager.getCurrentObject()
};
MainDataSource.prototype.getSelectToolObjcet = function () {
    return this.toolManager.getSelectedObject()
};
MainDataSource.prototype.delSelectToolObject = function () {
    this.toolManager.delSelectedObject()
};
var DataProvider = create_class(NamedObject);
DataProvider.prototype.__construct = function (t) {
    DataProvider.__super.__construct.call(this, t);
    this._minValue = 0;
    this._maxValue = 0;
    this._minValueIndex = -1;
    this._maxValueIndex = -1
};
DataProvider.prototype.getMinValue = function () {
    return this._minValue
};
DataProvider.prototype.getMaxValue = function () {
    return this._maxValue
};
DataProvider.prototype.getMinValueIndex = function () {
    return this._minValueIndex
};
DataProvider.prototype.getMaxValueIndex = function () {
    return this._maxValueIndex
};
DataProvider.prototype.calcRange = function (t, e, r, a) {
    var i = Number.MAX_VALUE;
    var o = -Number.MAX_VALUE;
    var n = -1;
    var s = -1;
    var h = {};
    var l = e - 1;
    var c = t.length - 1;
    for (; c >= 0; c--) {
        var u = t[c];
        if (l < u) {
            r[c] = {min: i, max: o}
        } else {
            for (; l >= u; l--) {
                if (this.getMinMaxAt(l, h) == false) {
                    continue
                }
                if (i > h.min) {
                    i = h.min;
                    n = l
                }
                if (o < h.max) {
                    o = h.max;
                    s = l
                }
            }
            r[c] = {min: i, max: o}
        }
        if (a != null) {
            a[c] = {minIndex: n, maxIndex: s}
        }
    }
};
DataProvider.prototype.updateRange = function () {
    var t = ChartManager.getInstance();
    var e = t.getTimeline(this.getDataSourceName());
    var r = [e.getFirstIndex()];
    var a = [{}];
    var i = [{}];
    this.calcRange(r, e.getLastIndex(), a, i);
    this._minValue = a[0].min;
    this._maxValue = a[0].max;
    this._minValueIndex = i[0].minIndex;
    this._maxValueIndex = i[0].maxIndex
};
var MainDataProvider = create_class(DataProvider);
MainDataProvider.prototype.__construct = function (t) {
    MainDataProvider.__super.__construct.call(this, t);
    this._candlestickDS = null
};
MainDataProvider.prototype.updateData = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource(this.getDataSourceName());
    if (!is_instance(e, MainDataSource)) {
        return
    }
    this._candlestickDS = e
};
MainDataProvider.prototype.getMinMaxAt = function (t, e) {
    var r = this._candlestickDS.getDataAt(t);
    e.min = r.low;
    e.max = r.high;
    return true
};
var IndicatorDataProvider = create_class(DataProvider);
IndicatorDataProvider.prototype.getIndicator = function () {
    return this._indicator
};
IndicatorDataProvider.prototype.setIndicator = function (t) {
    this._indicator = t;
    this.refresh()
};
IndicatorDataProvider.prototype.refresh = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource(this.getDataSourceName());
    if (e.getDataCount() < 1) {
        return
    }
    var r = this._indicator;
    var a, i = e.getDataCount();
    r.clear();
    r.reserve(i);
    for (a = 0; a < i; a++) {
        r.execute(e, a)
    }
};
IndicatorDataProvider.prototype.updateData = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource(this.getDataSourceName());
    if (e.getDataCount() < 1) {
        return
    }
    var r = this._indicator;
    var a = e.getUpdateMode();
    switch (a) {
        case DataSource.UpdateMode.Refresh:
            this.refresh();
            break;
        case DataSource.UpdateMode.Append:
            r.reserve(e.getAppendedCount());
        case DataSource.UpdateMode.Update:
            var i, o = e.getDataCount();
            var n = e.getUpdatedCount() + e.getAppendedCount();
            for (i = o - n; i < o; i++) {
                r.execute(e, i)
            }
            break
    }
};
IndicatorDataProvider.prototype.getMinMaxAt = function (t, e) {
    e.min = Number.MAX_VALUE;
    e.max = -Number.MAX_VALUE;
    var r, a = false;
    var i, o = this._indicator.getOutputCount();
    for (i = 0; i < o; i++) {
        r = this._indicator.getOutputAt(i).execute(t);
        if (isNaN(r) == false) {
            a = true;
            if (e.min > r) {
                e.min = r
            }
            if (e.max < r) {
                e.max = r
            }
        }
    }
    return a
};
var theme_color_id = 0;
var theme_font_id = 0;
var Theme = create_class();
Theme.prototype.getColor = function (t) {
    return this._colors[t]
};
Theme.prototype.getFont = function (t) {
    return this._fonts[t]
};
Theme.Color = {
    Positive: theme_color_id++,
    Negative: theme_color_id++,
    PositiveDark: theme_color_id++,
    NegativeDark: theme_color_id++,
    Unchanged: theme_color_id++,
    Background: theme_color_id++,
    Cursor: theme_color_id++,
    RangeMark: theme_color_id++,
    Indicator0: theme_color_id++,
    Indicator1: theme_color_id++,
    Indicator2: theme_color_id++,
    Indicator3: theme_color_id++,
    Indicator4: theme_color_id++,
    Indicator5: theme_color_id++,
    Grid0: theme_color_id++,
    Grid1: theme_color_id++,
    Grid2: theme_color_id++,
    Grid3: theme_color_id++,
    Grid4: theme_color_id++,
    TextPositive: theme_color_id++,
    TextNegative: theme_color_id++,
    Text0: theme_color_id++,
    Text1: theme_color_id++,
    Text2: theme_color_id++,
    Text3: theme_color_id++,
    Text4: theme_color_id++,
    LineColorNormal: theme_color_id++,
    LineColorSelected: theme_color_id++,
    CircleColorFill: theme_color_id++,
    CircleColorStroke: theme_color_id++
};
Theme.Font = {Default: theme_font_id++};
var DarkTheme = create_class(Theme);
DarkTheme.prototype.__construct = function () {
    this._colors = [];
    this._colors[Theme.Color.Positive] = "#19b34c";
    this._colors[Theme.Color.Negative] = "#990e0e";
    this._colors[Theme.Color.PositiveDark] = "#004718";
    this._colors[Theme.Color.NegativeDark] = "#3b0e08";
    this._colors[Theme.Color.Unchanged] = "#fff";
    this._colors[Theme.Color.Background] = "#0a0a0a";
    this._colors[Theme.Color.Cursor] = "#aaa";
    this._colors[Theme.Color.RangeMark] = "#f9ee30";
    this._colors[Theme.Color.Indicator0] = "#ddd";
    this._colors[Theme.Color.Indicator1] = "#f9ee30";
    this._colors[Theme.Color.Indicator2] = "#f600ff";
    this._colors[Theme.Color.Indicator3] = "#6bf";
    this._colors[Theme.Color.Indicator4] = "#a5cf81";
    this._colors[Theme.Color.Indicator5] = "#e18b89";
    this._colors[Theme.Color.Grid0] = "#333";
    this._colors[Theme.Color.Grid1] = "#444";
    this._colors[Theme.Color.Grid2] = "#666";
    this._colors[Theme.Color.Grid3] = "#888";
    this._colors[Theme.Color.Grid4] = "#aaa";
    this._colors[Theme.Color.TextPositive] = "#1bd357";
    this._colors[Theme.Color.TextNegative] = "#ff6f5e";
    this._colors[Theme.Color.Text0] = "#444";
    this._colors[Theme.Color.Text1] = "#666";
    this._colors[Theme.Color.Text2] = "#888";
    this._colors[Theme.Color.Text3] = "#aaa";
    this._colors[Theme.Color.Text4] = "#ccc";
    this._colors[Theme.Color.LineColorNormal] = "#a6a6a6";
    this._colors[Theme.Color.LineColorSelected] = "#ffffff";
    this._colors[Theme.Color.CircleColorFill] = "#000000";
    this._colors[Theme.Color.CircleColorStroke] = "#ffffff";
    this._fonts = [];
    this._fonts[Theme.Font.Default] = "12px Tahoma"
};
var LightTheme = create_class(Theme);
LightTheme.prototype.__construct = function () {
    this._colors = [];
    this._colors[Theme.Color.Positive] = "#53b37b";
    this._colors[Theme.Color.Negative] = "#db5542";
    this._colors[Theme.Color.PositiveDark] = "#66d293";
    this._colors[Theme.Color.NegativeDark] = "#ffadaa";
    this._colors[Theme.Color.Unchanged] = "#fff";
    this._colors[Theme.Color.Background] = "#fff";
    this._colors[Theme.Color.Cursor] = "#aaa";
    this._colors[Theme.Color.RangeMark] = "#f27935";
    this._colors[Theme.Color.Indicator0] = "#2fd2b2";
    this._colors[Theme.Color.Indicator1] = "#ffb400";
    this._colors[Theme.Color.Indicator2] = "#e849b9";
    this._colors[Theme.Color.Indicator3] = "#1478c8";
    this._colors[Theme.Color.Grid0] = "#eee";
    this._colors[Theme.Color.Grid1] = "#afb1b3";
    this._colors[Theme.Color.Grid2] = "#ccc";
    this._colors[Theme.Color.Grid3] = "#bbb";
    this._colors[Theme.Color.Grid4] = "#aaa";
    this._colors[Theme.Color.TextPositive] = "#53b37b";
    this._colors[Theme.Color.TextNegative] = "#db5542";
    this._colors[Theme.Color.Text0] = "#ccc";
    this._colors[Theme.Color.Text1] = "#aaa";
    this._colors[Theme.Color.Text2] = "#888";
    this._colors[Theme.Color.Text3] = "#666";
    this._colors[Theme.Color.Text4] = "#444";
    this._colors[Theme.Color.LineColorNormal] = "#8c8c8c";
    this._colors[Theme.Color.LineColorSelected] = "#393c40";
    this._colors[Theme.Color.CircleColorFill] = "#ffffff";
    this._colors[Theme.Color.CircleColorStroke] = "#393c40";
    this._fonts = [];
    this._fonts[Theme.Font.Default] = "12px Tahoma"
};
var TemplateMeasuringHandler = create_class();
TemplateMeasuringHandler.onMeasuring = function (t, e) {
    var r = e.Width;
    var a = e.Height;
    var i = t.getNameObject().getCompAt(2);
    if (i == "timeline") {
        t.setMeasuredDimension(r, 22)
    }
};
var Template = create_class();
Template.displayVolume = true;
Template.createCandlestickDataSource = function (t) {
    return new MainDataSource(t)
};
Template.createLiveOrderDataSource = function (t) {
    return new CLiveOrderDataSource(t)
};
Template.createLiveTradeDataSource = function (t) {
    return new CLiveTradeDataSource(t)
};
Template.createDataSource = function (t, e, r) {
    var a = ChartManager.getInstance();
    if (a.getCachedDataSource(e) == null) {
        a.setCachedDataSource(e, r(e))
    }
    a.setCurrentDataSource(t, e);
    a.updateData(t, null)
};
Template.createTableComps = function (t) {
    Template.createMainChartComps(t);
    if (Template.displayVolume) {
        Template.createIndicatorChartComps(t, "VOLUME")
    }
    Template.createTimelineComps(t)
};
Template.createMainChartComps = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(t + ".charts");
    var a = t + ".main";
    var i = a + "Range";
    var o = new MainArea(a);
    e.setArea(a, o);
    r.addArea(o);
    var n = new MainRangeArea(i);
    e.setArea(i, n);
    r.addArea(n);
    var s = new MainDataProvider(a + ".main");
    e.setDataProvider(s.getName(), s);
    e.setMainIndicator(t, "MA");
    var h = new MainRange(a);
    e.setRange(h.getName(), h);
    h.setPaddingTop(28);
    h.setPaddingBottom(12);
    var l = new MainAreaBackgroundPlotter(a + ".background");
    e.setPlotter(l.getName(), l);
    l = new CGridPlotter(a + ".grid");
    e.setPlotter(l.getName(), l);
    l = new CandlestickPlotter(a + ".main");
    e.setPlotter(l.getName(), l);
    l = new MinMaxPlotter(a + ".decoration");
    e.setPlotter(l.getName(), l);
    l = new MainInfoPlotter(a + ".info");
    e.setPlotter(l.getName(), l);
    l = new SelectionPlotter(a + ".selection");
    e.setPlotter(l.getName(), l);
    l = new CDynamicLinePlotter(a + ".tool");
    e.setPlotter(l.getName(), l);
    l = new RangeAreaBackgroundPlotter(a + "Range.background");
    e.setPlotter(l.getName(), l);
    l = new COrderGraphPlotter(a + "Range.grid");
    e.setPlotter(l.getName(), l);
    l = new RangePlotter(a + "Range.main");
    e.setPlotter(l.getName(), l);
    l = new RangeSelectionPlotter(a + "Range.selection");
    e.setPlotter(l.getName(), l);
    l = new LastClosePlotter(a + "Range.decoration");
    e.setPlotter(l.getName(), l)
};
Template.createIndicatorChartComps = function (t, e) {
    var r = ChartManager.getInstance();
    var a = r.getArea(t + ".charts");
    var i = t + ".indic" + a.getNextRowId();
    var o = i + "Range";
    var n = new IndicatorArea(i);
    r.setArea(i, n);
    a.addArea(n);
    var s = a.getAreaCount() >> 1;
    var h = ChartSettings.get().charts.areaHeight;
    if (h.length > s) {
        var l, c;
        for (c = 0; c < s; c++) {
            l = a.getAreaAt(c << 1);
            l.setTop(0);
            l.setBottom(h[c])
        }
        n.setTop(0);
        n.setBottom(h[s])
    }
    var u = new IndicatorRangeArea(o);
    r.setArea(o, u);
    a.addArea(u);
    var p = new IndicatorDataProvider(i + ".secondary");
    r.setDataProvider(p.getName(), p);
    if (r.setIndicator(i, e) == false) {
        r.removeIndicator(i);
        return
    }
    var g = new MainAreaBackgroundPlotter(i + ".background");
    r.setPlotter(g.getName(), g);
    g = new CGridPlotter(i + ".grid");
    r.setPlotter(g.getName(), g);
    g = new IndicatorPlotter(i + ".secondary");
    r.setPlotter(g.getName(), g);
    g = new IndicatorInfoPlotter(i + ".info");
    r.setPlotter(g.getName(), g);
    g = new SelectionPlotter(i + ".selection");
    r.setPlotter(g.getName(), g);
    g = new RangeAreaBackgroundPlotter(i + "Range.background");
    r.setPlotter(g.getName(), g);
    g = new RangePlotter(i + "Range.main");
    r.setPlotter(g.getName(), g);
    g = new RangeSelectionPlotter(i + "Range.selection");
    r.setPlotter(g.getName(), g)
};
Template.createTimelineComps = function (t) {
    var e = ChartManager.getInstance();
    var r;
    var a = new Timeline(t);
    e.setTimeline(a.getName(), a);
    r = new TimelineAreaBackgroundPlotter(t + ".timeline.background");
    e.setPlotter(r.getName(), r);
    r = new TimelinePlotter(t + ".timeline.main");
    e.setPlotter(r.getName(), r);
    r = new TimelineSelectionPlotter(t + ".timeline.selection");
    e.setPlotter(r.getName(), r)
};
Template.createLiveOrderComps = function (t) {
    var e = ChartManager.getInstance();
    var r;
    r = new BackgroundPlotter(t + ".main.background");
    e.setPlotter(r.getName(), r);
    r = new CLiveOrderPlotter(t + ".main.main");
    e.setPlotter(r.getName(), r)
};
Template.createLiveTradeComps = function (t) {
    var e = ChartManager.getInstance();
    var r;
    r = new BackgroundPlotter(t + ".main.background");
    e.setPlotter(r.getName(), r);
    r = new CLiveTradePlotter(t + ".main.main");
    e.setPlotter(r.getName(), r)
};
var DefaultTemplate = create_class(Template);
DefaultTemplate.loadTemplate = function (t, e) {
    var r = ChartManager.getInstance();
    var a = ChartSettings.get();
    var i = new CName(t).getCompAt(0);
    r.unloadTemplate(i);
    Template.createDataSource(t, e, Template.createCandlestickDataSource);
    var o = new DockableLayout(i);
    r.setFrame(o.getName(), o);
    r.setArea(o.getName(), o);
    o.setGridColor(Theme.Color.Grid1);
    var n = new TimelineArea(t + ".timeline");
    r.setArea(n.getName(), n);
    o.addArea(n);
    n.setDockStyle(ChartArea.DockStyle.Bottom);
    n.Measuring.addHandler(n, TemplateMeasuringHandler.onMeasuring);
    var s = new TableLayout(t + ".charts");
    r.setArea(s.getName(), s);
    s.setDockStyle(ChartArea.DockStyle.Fill);
    o.addArea(s);
    Template.createTableComps(t);
    r.setThemeName(i, a.theme);
    return r
};
var Plotter = create_class(NamedObject);
Plotter.prototype.__construct = function (t) {
    Plotter.__super.__construct.call(this, t)
};
Plotter.isChrome = navigator.userAgent.toLowerCase().match(/chrome/) != null;
Plotter.drawLine = function (t, e, r, a, i) {
    t.beginPath();
    t.moveTo((e << 0) + .5, (r << 0) + .5);
    t.lineTo((a << 0) + .5, (i << 0) + .5);
    t.stroke()
};
Plotter.drawLines = function (t, e) {
    var r, a = e.length;
    t.beginPath();
    t.moveTo(e[0].x, e[0].y);
    for (r = 1; r < a; r++) {
        t.lineTo(e[r].x, e[r].y)
    }
    if (Plotter.isChrome) {
        t.moveTo(e[0].x, e[0].y);
        for (r = 1; r < a; r++) {
            t.lineTo(e[r].x, e[r].y)
        }
    }
    t.stroke()
};
Plotter.drawDashedLine = function (t, e, r, a, i, o, n) {
    if (o < 2) {
        o = 2
    }
    var s = a - e;
    var h = i - r;
    t.beginPath();
    if (h == 0) {
        var l = s / o + .5 << 0;
        for (var c = 0; c < l; c++) {
            t.rect(e, r, n, 1);
            e += o
        }
        t.fill()
    } else {
        var l = Math.sqrt(s * s + h * h) / o + .5 << 0;
        s = s / l;
        h = h / l;
        var u = s * n / o;
        var p = h * n / o;
        for (var c = 0; c < l; c++) {
            t.moveTo(e + .5, r + .5);
            t.lineTo(e + .5 + u, r + .5 + p);
            e += s;
            r += h
        }
        t.stroke()
    }
};
Plotter.createHorzDashedLine = function (t, e, r, a, i, o) {
    if (i < 2) {
        i = 2
    }
    var n = r - e;
    var s = n / i + .5 << 0;
    for (var h = 0; h < s; h++) {
        t.rect(e, a, o, 1);
        e += i
    }
};
Plotter.createRectangles = function (t, e) {
    t.beginPath();
    var r, a, i = e.length;
    for (a = 0; a < i; a++) {
        r = e[a];
        t.rect(r.x, r.y, r.w, r.h)
    }
};
Plotter.createPolygon = function (t, e) {
    t.beginPath();
    t.moveTo(e[0].x + .5, e[0].y + .5);
    var r, a = e.length;
    for (r = 1; r < a; r++) {
        t.lineTo(e[r].x + .5, e[r].y + .5)
    }
    t.closePath()
};
Plotter.drawString = function (t, e, r) {
    var a = t.measureText(e).width;
    if (r.w < a) {
        return false
    }
    t.fillText(e, r.x, r.y);
    r.x += a;
    r.w -= a;
    return true
};
var BackgroundPlotter = create_class(Plotter);
BackgroundPlotter.prototype.__construct = function (t) {
    BackgroundPlotter.__super.__construct.call(this, t);
    this._color = Theme.Color.Background
};
BackgroundPlotter.prototype.getColor = function () {
    return this._color
};
BackgroundPlotter.prototype.setColor = function (t) {
    this._color = t
};
BackgroundPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTheme(this.getFrameName());
    t.fillStyle = a.getColor(this._color);
    t.fillRect(r.getLeft(), r.getTop(), r.getWidth(), r.getHeight())
};
var MainAreaBackgroundPlotter = create_class(BackgroundPlotter);
MainAreaBackgroundPlotter.prototype.__construct = function (t) {
    MainAreaBackgroundPlotter.__super.__construct.call(this, t)
};
MainAreaBackgroundPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    var i = e.getRange(this.getAreaName());
    var o = e.getTheme(this.getFrameName());
    var n = r.getRect();
    if (!r.isChanged() && !a.isUpdated() && !i.isUpdated()) {
        var s = a.getFirstIndex();
        var h = a.getLastIndex() - 2;
        var l = Math.max(s, h);
        n.X = a.toColumnLeft(l);
        n.Width = r.getRight() - n.X
    }
    t.fillStyle = o.getColor(this._color);
    t.fillRect(n.X, n.Y, n.Width, n.Height)
};
var RangeAreaBackgroundPlotter = create_class(BackgroundPlotter);
RangeAreaBackgroundPlotter.prototype.__construct = function (t) {
    RangeAreaBackgroundPlotter.__super.__construct.call(this, t)
};
RangeAreaBackgroundPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = this.getAreaName();
    var a = e.getArea(r);
    var i = e.getRange(r.substring(0, r.lastIndexOf("Range")));
    var o = i.getNameObject().getCompAt(2) == "main";
    if (o) {
    } else {
        if (!a.isChanged() && !i.isUpdated()) {
            return
        }
    }
    var n = e.getTheme(this.getFrameName());
    t.fillStyle = n.getColor(this._color);
    t.fillRect(a.getLeft(), a.getTop(), a.getWidth(), a.getHeight())
};
var TimelineAreaBackgroundPlotter = create_class(BackgroundPlotter);
TimelineAreaBackgroundPlotter.prototype.__construct = function (t) {
    TimelineAreaBackgroundPlotter.__super.__construct.call(this, t)
};
TimelineAreaBackgroundPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    if (!r.isChanged() && !a.isUpdated()) {
        return
    }
    var i = e.getTheme(this.getFrameName());
    t.fillStyle = i.getColor(this._color);
    t.fillRect(r.getLeft(), r.getTop(), r.getWidth(), r.getHeight())
};
var CGridPlotter = create_class(NamedObject);
CGridPlotter.prototype.__construct = function (t) {
    CGridPlotter.__super.__construct.call(this, t)
};
CGridPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    var i = e.getRange(this.getAreaName());
    var o = false;
    if (!r.isChanged() && !a.isUpdated() && !i.isUpdated()) {
        var n = a.getFirstIndex();
        var s = a.getLastIndex();
        var h = Math.max(n, s - 2);
        var l = a.toColumnLeft(h);
        t.save();
        t.rect(l, r.getTop(), r.getRight() - l, r.getHeight());
        t.clip();
        o = true
    }
    var c = e.getTheme(this.getFrameName());
    t.fillStyle = c.getColor(Theme.Color.Grid0);
    t.beginPath();
    var u = 4, p = 1;
    if (Plotter.isChrome) {
        u = 4;
        p = 1
    }
    var g = i.getGradations();
    for (var _ in g) {
        Plotter.createHorzDashedLine(t, r.getLeft(), r.getRight(), i.toY(g[_]), u, p)
    }
    t.fill();
    if (o) {
        t.restore()
    }
};
var CandlestickPlotter = create_class(NamedObject);
CandlestickPlotter.prototype.__construct = function (t) {
    CandlestickPlotter.__super.__construct.call(this, t)
};
CandlestickPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    if (r.getDataCount() < 1) {
        return
    }
    var a = e.getArea(this.getAreaName());
    var i = e.getTimeline(this.getDataSourceName());
    var o = e.getRange(this.getAreaName());
    if (o.getRange() == 0) {
        return
    }
    var n = e.getTheme(this.getFrameName());
    var s = is_instance(n, DarkTheme);
    var h = i.getFirstIndex();
    var l = i.getLastIndex();
    var c;
    if (a.isChanged() || i.isUpdated() || o.isUpdated()) {
        c = h
    } else {
        c = Math.max(h, l - 2)
    }
    var u = i.getColumnWidth();
    var p = i.getItemWidth();
    var g = i.toItemLeft(c);
    var _ = i.toItemCenter(c);
    var d = [];
    var f = [];
    var m = [];
    var v = [];
    for (var C = c; C < l; C++) {
        var x = r.getDataAt(C);
        var P = o.toY(x.high);
        var w = o.toY(x.low);
        var y = x.open;
        var M = x.close;
        if (M > y) {
            var A = o.toY(M);
            var E = o.toY(y);
            var S = Math.max(E - A, 1);
            if (S > 1 && p > 1 && s) {
                d.push({x: g + .5, y: A + .5, w: p - 1, h: S - 1})
            } else {
                f.push({x: g, y: A, w: Math.max(p, 1), h: Math.max(S, 1)})
            }
            if (x.high > M) {
                P = Math.min(P, A - 1);
                f.push({x: _, y: P, w: 1, h: A - P})
            }
            if (y > x.low) {
                w = Math.max(w, E + 1);
                f.push({x: _, y: E, w: 1, h: w - E})
            }
        } else {
            if (M == y) {
                var A = o.toY(M);
                m.push({x: g, y: A, w: Math.max(p, 1), h: 1});
                if (x.high > M) {
                    P = Math.min(P, A - 1)
                }
                if (y > x.low) {
                    w = Math.max(w, A + 1)
                }
                if (P < w) {
                    m.push({x: _, y: P, w: 1, h: w - P})
                }
            } else {
                var A = o.toY(y);
                var E = o.toY(M);
                var S = Math.max(E - A, 1);
                v.push({x: g, y: A, w: Math.max(p, 1), h: Math.max(S, 1)});
                if (x.high > y) {
                    P = Math.min(P, A - 1)
                }
                if (M > x.low) {
                    w = Math.max(w, E + 1)
                }
                if (P < w) {
                    v.push({x: _, y: P, w: 1, h: w - P})
                }
            }
        }
        g += u;
        _ += u
    }
    if (d.length > 0) {
        t.strokeStyle = n.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, d);
        t.stroke()
    }
    if (f.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, f);
        t.fill()
    }
    if (m.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, m);
        t.fill()
    }
    if (v.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, v);
        t.fill()
    }
};
var CandlestickHLCPlotter = create_class(Plotter);
CandlestickHLCPlotter.prototype.__construct = function (t) {
    CandlestickHLCPlotter.__super.__construct.call(this, t)
};
CandlestickHLCPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    if (!is_instance(r, MainDataSource) || r.getDataCount() < 1) {
        return
    }
    var a = e.getArea(this.getAreaName());
    var i = e.getTimeline(this.getDataSourceName());
    var o = e.getRange(this.getAreaName());
    if (o.getRange() == 0) {
        return
    }
    var n = e.getTheme(this.getFrameName());
    var s = is_instance(n, DarkTheme);
    var h = i.getFirstIndex();
    var l = i.getLastIndex();
    var c;
    if (a.isChanged() || i.isUpdated() || o.isUpdated()) {
        c = h
    } else {
        c = Math.max(h, l - 2)
    }
    var u = i.getColumnWidth();
    var p = i.getItemWidth();
    var g = i.toItemLeft(c);
    var _ = i.toItemCenter(c);
    var d = [];
    var f = [];
    var m = [];
    var v = [];
    for (var C = c; C < l; C++) {
        var x = r.getDataAt(C);
        var P = o.toY(x.high);
        var w = o.toY(x.low);
        var y = x.open;
        if (C > 0) {
            y = r.getDataAt(C - 1).close
        }
        var M = x.close;
        if (M > y) {
            var A = o.toY(M);
            var E = o.toY(y);
            var S = Math.max(E - A, 1);
            if (S > 1 && p > 1 && s) {
                d.push({x: g + .5, y: A + .5, w: p - 1, h: S - 1})
            } else {
                f.push({x: g, y: A, w: Math.max(p, 1), h: Math.max(S, 1)})
            }
            if (x.high > M) {
                P = Math.min(P, A - 1);
                f.push({x: _, y: P, w: 1, h: A - P})
            }
            if (y > x.low) {
                w = Math.max(w, E + 1);
                f.push({x: _, y: E, w: 1, h: w - E})
            }
        } else {
            if (M == y) {
                var A = o.toY(M);
                m.push({x: g, y: A, w: Math.max(p, 1), h: 1});
                if (x.high > M) {
                    P = Math.min(P, A - 1)
                }
                if (y > x.low) {
                    w = Math.max(w, A + 1)
                }
                if (P < w) {
                    m.push({x: _, y: P, w: 1, h: w - P})
                }
            } else {
                var A = o.toY(y);
                var E = o.toY(M);
                var S = Math.max(E - A, 1);
                v.push({x: g, y: A, w: Math.max(p, 1), h: Math.max(S, 1)});
                if (x.high > y) {
                    P = Math.min(P, A - 1)
                }
                if (M > x.low) {
                    w = Math.max(w, E + 1)
                }
                if (P < w) {
                    v.push({x: _, y: P, w: 1, h: w - P})
                }
            }
        }
        g += u;
        _ += u
    }
    if (d.length > 0) {
        t.strokeStyle = n.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, d);
        t.stroke()
    }
    if (f.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, f);
        t.fill()
    }
    if (m.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, m);
        t.fill()
    }
    if (v.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, v);
        t.fill()
    }
};
var OHLCPlotter = create_class(Plotter);
OHLCPlotter.prototype.__construct = function (t) {
    OHLCPlotter.__super.__construct.call(this, t)
};
OHLCPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    if (!is_instance(r, MainDataSource) || r.getDataCount() < 1) {
        return
    }
    var a = e.getArea(this.getAreaName());
    var i = e.getTimeline(this.getDataSourceName());
    var o = e.getRange(this.getAreaName());
    if (o.getRange() == 0) {
        return
    }
    var n = e.getTheme(this.getFrameName());
    var s = i.getFirstIndex();
    var h = i.getLastIndex();
    var l;
    if (a.isChanged() || i.isUpdated() || o.isUpdated()) {
        l = s
    } else {
        l = Math.max(s, h - 2)
    }
    var c = i.getColumnWidth();
    var u = i.getItemWidth() >> 1;
    var p = i.toItemLeft(l);
    var g = i.toItemCenter(l);
    var _ = p + i.getItemWidth();
    var d = [];
    var f = [];
    var m = [];
    for (var v = l; v < h; v++) {
        var C = r.getDataAt(v);
        var x = o.toY(C.high);
        var P = o.toY(C.low);
        var w = Math.max(P - x, 1);
        if (C.close > C.open) {
            var y = o.toY(C.close);
            var M = o.toY(C.open);
            d.push({x: g, y: x, w: 1, h: w});
            d.push({x: p, y: y, w: u, h: 1});
            d.push({x: g, y: M, w: u, h: 1})
        } else {
            if (C.close == C.open) {
                var A = o.toY(C.close);
                f.push({x: g, y: x, w: 1, h: w});
                f.push({x: p, y: A, w: u, h: 1});
                f.push({x: g, y: A, w: u, h: 1})
            } else {
                var y = o.toY(C.open);
                var M = o.toY(C.close);
                m.push({x: g, y: x, w: 1, h: w});
                m.push({x: p, y: y, w: u, h: 1});
                m.push({x: g, y: M, w: u, h: 1})
            }
        }
        p += c;
        g += c;
        _ += c
    }
    if (d.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, d);
        t.fill()
    }
    if (f.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, f);
        t.fill()
    }
    if (m.length > 0) {
        t.fillStyle = n.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, m);
        t.fill()
    }
};
var MainInfoPlotter = create_class(Plotter);
MainInfoPlotter.prototype.__construct = function (t) {
    MainInfoPlotter.__super.__construct.call(this, t)
};
function format_time(t) {
    return t < 10 ? "0" + t.toString() : t.toString()
}
MainInfoPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    var i = e.getDataSource(this.getDataSourceName());
    var o = e.getTheme(this.getFrameName());
    t.font = o.getFont(Theme.Font.Default);
    t.textAlign = "left";
    t.textBaseline = "top";
    t.fillStyle = o.getColor(Theme.Color.Text4);
    var n = {x: r.getLeft() + 4, y: r.getTop() + 2, w: r.getWidth() - 8, h: 20};
    var s = a.getSelectedIndex();
    if (s < 0) {
        return
    }
    var h = i.getDataAt(s);
    var l = i.getDecimalDigits();
    var c = new Date(h.date);
    var u = c.getFullYear();
    var p = format_time(c.getMonth() + 1);
    var g = format_time(c.getDate());
    var _ = format_time(c.getHours());
    var d = format_time(c.getMinutes());
    var f = e.getLanguage();
    if (f == "zh-cn") {
        if (!Plotter.drawString(t, "时间: " + u + "-" + p + "-" + g + "  " + _ + ":" + d, n)) {
            return
        }
        if (!Plotter.drawString(t, "  开: " + h.open.toFixed(l), n)) {
            return
        }
        if (!Plotter.drawString(t, "  高: " + h.high.toFixed(l), n)) {
            return
        }
        if (!Plotter.drawString(t, "  低: " + h.low.toFixed(l), n)) {
            return
        }
        if (!Plotter.drawString(t, "  收: " + h.close.toFixed(l), n)) {
            return
        }
    } else {
        if (f == "en-us") {
            if (!Plotter.drawString(t, "DATE: " + u + "-" + p + "-" + g + "  " + _ + ":" + d, n)) {
                return
            }
            if (!Plotter.drawString(t, "  O: " + h.open.toFixed(l), n)) {
                return
            }
            if (!Plotter.drawString(t, "  H: " + h.high.toFixed(l), n)) {
                return
            }
            if (!Plotter.drawString(t, "  L: " + h.low.toFixed(l), n)) {
                return
            }
            if (!Plotter.drawString(t, "  C: " + h.close.toFixed(l), n)) {
                return
            }
        } else {
            if (f == "zh-tw") {
                if (!Plotter.drawString(t, "時間: " + u + "-" + p + "-" + g + "  " + _ + ":" + d, n)) {
                    return
                }
                if (!Plotter.drawString(t, "  開: " + h.open.toFixed(l), n)) {
                    return
                }
                if (!Plotter.drawString(t, "  高: " + h.high.toFixed(l), n)) {
                    return
                }
                if (!Plotter.drawString(t, "  低: " + h.low.toFixed(l), n)) {
                    return
                }
                if (!Plotter.drawString(t, "  收: " + h.close.toFixed(l), n)) {
                    return
                }
            }
        }
    }
    if (s > 0) {
        if (f == "zh-cn") {
            if (!Plotter.drawString(t, "  涨幅: ", n)) {
                return
            }
        } else {
            if (f == "en-us") {
                if (!Plotter.drawString(t, "  CHANGE: ", n)) {
                    return
                }
            } else {
                if (f == "zh-tw") {
                    if (!Plotter.drawString(t, "  漲幅: ", n)) {
                        return
                    }
                }
            }
        }
        var m = i.getDataAt(s - 1);
        var v = (h.close - m.close) / m.close * 100;
        if (v >= 0) {
            v = " " + v.toFixed(2);
            t.fillStyle = o.getColor(Theme.Color.TextPositive)
        } else {
            v = v.toFixed(2);
            t.fillStyle = o.getColor(Theme.Color.TextNegative)
        }
        if (!Plotter.drawString(t, v, n)) {
            return
        }
        t.fillStyle = o.getColor(Theme.Color.Text4);
        if (!Plotter.drawString(t, " %", n)) {
            return
        }
    }
    var C = (h.high - h.low) / h.low * 100;
    if (f == "zh-cn") {
        if (!Plotter.drawString(t, "  振幅: " + C.toFixed(2) + " %", n)) {
            return
        }
        if (!Plotter.drawString(t, "  量: " + h.volume.toFixed(2), n)) {
            return
        }
    } else {
        if (f == "en-us") {
            if (!Plotter.drawString(t, "  AMPLITUDE: " + C.toFixed(2) + " %", n)) {
                return
            }
            if (!Plotter.drawString(t, "  V: " + h.volume.toFixed(2), n)) {
                return
            }
        } else {
            if (f == "zh-tw") {
                if (!Plotter.drawString(t, "  振幅: " + C.toFixed(2) + " %", n)) {
                    return
                }
                if (!Plotter.drawString(t, "  量: " + h.volume.toFixed(2), n)) {
                    return
                }
            }
        }
    }
    var x = e.getDataProvider(this.getAreaName() + ".secondary");
    if (x == undefined) {
        return
    }
    var P = x.getIndicator();
    var w, y = P.getOutputCount();
    for (w = 0; w < y; w++) {
        var M = P.getOutputAt(w);
        var A = M.execute(s);
        if (isNaN(A)) {
            continue
        }
        var E = "  " + M.getName() + ": " + A.toFixed(l);
        var S = M.getColor();
        if (S === undefined) {
            S = Theme.Color.Indicator0 + w
        }
        t.fillStyle = o.getColor(S);
        if (!Plotter.drawString(t, E, n)) {
            return
        }
    }
};
var IndicatorPlotter = create_class(NamedObject);
IndicatorPlotter.prototype.__construct = function (t) {
    IndicatorPlotter.__super.__construct.call(this, t)
};
IndicatorPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    var i = e.getRange(this.getAreaName());
    if (i.getRange() == 0) {
        return
    }
    var o = e.getDataProvider(this.getName());
    if (!is_instance(o, IndicatorDataProvider)) {
        return
    }
    var n = e.getTheme(this.getFrameName());
    var s = a.getColumnWidth();
    var h = a.getFirstIndex();
    var l = a.getLastIndex();
    var c;
    if (r.isChanged() || a.isUpdated() || i.isUpdated()) {
        c = h
    } else {
        c = Math.max(h, l - 2)
    }
    var u = o.getIndicator();
    var p, g, _ = u.getOutputCount();
    for (g = 0; g < _; g++) {
        p = u.getOutputAt(g);
        var d = p.getStyle();
        if (d == OutputStyle.VolumeStick) {
            this.drawVolumeStick(t, n, e.getDataSource(this.getDataSourceName()), c, l, a.toItemLeft(c), s, a.getItemWidth(), i)
        } else {
            if (d == OutputStyle.MACDStick) {
                this.drawMACDStick(t, n, p, c, l, a.toItemLeft(c), s, a.getItemWidth(), i)
            } else {
                if (d == OutputStyle.SARPoint) {
                    this.drawSARPoint(t, n, p, c, l, a.toItemCenter(c), s, a.getItemWidth(), i)
                }
            }
        }
    }
    var f = a.toColumnLeft(c);
    var m = a.toItemCenter(c);
    t.save();
    t.rect(f, r.getTop(), r.getRight() - f, r.getHeight());
    t.clip();
    t.translate(.5, .5);
    for (g = 0; g < _; g++) {
        var v = m;
        p = u.getOutputAt(g);
        if (p.getStyle() == OutputStyle.Line) {
            var C, x = [];
            if (c > h) {
                C = p.execute(c - 1);
                if (isNaN(C) == false) {
                    x.push({x: v - s, y: i.toY(C)})
                }
            }
            for (var P = c; P < l; P++, v += s) {
                C = p.execute(P);
                if (isNaN(C) == false) {
                    x.push({x: v, y: i.toY(C)})
                }
            }
            if (x.length > 0) {
                var w = p.getColor();
                if (w == undefined) {
                    w = Theme.Color.Indicator0 + g
                }
                t.strokeStyle = n.getColor(w);
                Plotter.drawLines(t, x)
            }
        }
    }
    t.restore()
};
IndicatorPlotter.prototype.drawVolumeStick = function (t, e, r, a, i, o, n, s, h) {
    var l = is_instance(e, DarkTheme);
    var c = o;
    var u = h.toY(0);
    var p = [];
    var g = [];
    var _ = [];
    for (var d = a; d < i; d++) {
        var f = r.getDataAt(d);
        var m = h.toY(f.volume);
        var v = h.toHeight(f.volume);
        if (f.close > f.open) {
            if (v > 1 && s > 1 && l) {
                p.push({x: c + .5, y: m + .5, w: s - 1, h: v - 1})
            } else {
                g.push({x: c, y: m, w: Math.max(s, 1), h: Math.max(v, 1)})
            }
        } else {
            if (f.close == f.open) {
                if (d > 0 && f.close >= r.getDataAt(d - 1).close) {
                    if (v > 1 && s > 1 && l) {
                        p.push({x: c + .5, y: m + .5, w: s - 1, h: v - 1})
                    } else {
                        g.push({x: c, y: m, w: Math.max(s, 1), h: Math.max(v, 1)})
                    }
                } else {
                    _.push({x: c, y: m, w: Math.max(s, 1), h: Math.max(v, 1)})
                }
            } else {
                _.push({x: c, y: m, w: Math.max(s, 1), h: Math.max(v, 1)})
            }
        }
        c += n
    }
    if (p.length > 0) {
        t.strokeStyle = e.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, p);
        t.stroke()
    }
    if (g.length > 0) {
        t.fillStyle = e.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, g);
        t.fill()
    }
    if (_.length > 0) {
        t.fillStyle = e.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, _);
        t.fill()
    }
};
IndicatorPlotter.prototype.drawMACDStick = function (t, e, r, a, i, o, n, s, h) {
    var l = o;
    var c = h.toY(0);
    var u = [];
    var p = [];
    var g = [];
    var _ = [];
    var d = a > 0 ? r.execute(a - 1) : NaN;
    for (var f = a; f < i; f++) {
        var m = r.execute(f);
        if (m >= 0) {
            var v = h.toHeight(m);
            if ((f == 0 || m >= d) && v > 1 && s > 1) {
                u.push({x: l + .5, y: c - v + .5, w: s - 1, h: v - 1})
            } else {
                g.push({x: l, y: c - v, w: Math.max(s, 1), h: Math.max(v, 1)})
            }
        } else {
            var v = h.toHeight(-m);
            if ((f == 0 || m >= d) && v > 1 && s > 1) {
                p.push({x: l + .5, y: c + .5, w: s - 1, h: v - 1})
            } else {
                _.push({x: l, y: c, w: Math.max(s, 1), h: Math.max(v, 1)})
            }
        }
        d = m;
        l += n
    }
    if (u.length > 0) {
        t.strokeStyle = e.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, u);
        t.stroke()
    }
    if (p.length > 0) {
        t.strokeStyle = e.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, p);
        t.stroke()
    }
    if (g.length > 0) {
        t.fillStyle = e.getColor(Theme.Color.Positive);
        Plotter.createRectangles(t, g);
        t.fill()
    }
    if (_.length > 0) {
        t.fillStyle = e.getColor(Theme.Color.Negative);
        Plotter.createRectangles(t, _);
        t.fill()
    }
};
IndicatorPlotter.prototype.drawSARPoint = function (t, e, r, a, i, o, n, s, h) {
    var l = s >> 1;
    if (l < .5) {
        l = .5
    }
    if (l > 4) {
        l = 4
    }
    var c = o;
    var u = c + l;
    var p = 2 * Math.PI;
    t.save();
    t.translate(.5, .5);
    t.strokeStyle = e.getColor(Theme.Color.Indicator3);
    t.beginPath();
    for (var g = a; g < i; g++) {
        var _ = h.toY(r.execute(g));
        t.moveTo(u, _);
        t.arc(c, _, l, 0, p);
        c += n;
        u += n
    }
    t.stroke();
    t.restore()
};
var IndicatorInfoPlotter = create_class(Plotter);
IndicatorInfoPlotter.prototype.__construct = function (t) {
    IndicatorInfoPlotter.__super.__construct.call(this, t)
};
IndicatorInfoPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    var i = e.getDataProvider(this.getAreaName() + ".secondary");
    var o = e.getTheme(this.getFrameName());
    t.font = o.getFont(Theme.Font.Default);
    t.textAlign = "left";
    t.textBaseline = "top";
    t.fillStyle = o.getColor(Theme.Color.Text4);
    var n = {x: r.getLeft() + 4, y: r.getTop() + 2, w: r.getWidth() - 8, h: 20};
    var s = i.getIndicator();
    var h;
    switch (s.getParameterCount()) {
        case 0:
            h = s.getName();
            break;
        case 1:
            h = s.getName() + "(" + s.getParameterAt(0).getValue() + ")";
            break;
        case 2:
            h = s.getName() + "(" + s.getParameterAt(0).getValue() + "," + s.getParameterAt(1).getValue() + ")";
            break;
        case 3:
            h = s.getName() + "(" + s.getParameterAt(0).getValue() + "," + s.getParameterAt(1).getValue() + "," + s.getParameterAt(2).getValue() + ")";
            break;
        case 4:
            h = s.getName() + "(" + s.getParameterAt(0).getValue() + "," + s.getParameterAt(1).getValue() + "," + s.getParameterAt(2).getValue() + "," + s.getParameterAt(3).getValue() + ")";
            break;
        default:
            return
    }
    if (!Plotter.drawString(t, h, n)) {
        return
    }
    var l = a.getSelectedIndex();
    if (l < 0) {
        return
    }
    var c, u, p, g;
    var _, d = s.getOutputCount();
    for (_ = 0; _ < d; _++) {
        c = s.getOutputAt(_);
        u = c.execute(l);
        if (isNaN(u)) {
            continue
        }
        p = "  " + c.getName() + ": " + u.toFixed(2);
        g = c.getColor();
        if (g === undefined) {
            g = Theme.Color.Indicator0 + _
        }
        t.fillStyle = o.getColor(g);
        if (!Plotter.drawString(t, p, n)) {
            return
        }
    }
};
var MinMaxPlotter = create_class(NamedObject);
MinMaxPlotter.prototype.__construct = function (t) {
    MinMaxPlotter.__super.__construct.call(this, t)
};
MinMaxPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    if (r.getDataCount() < 1) {
        return
    }
    var a = e.getTimeline(this.getDataSourceName());
    if (a.getInnerWidth() < a.getColumnWidth()) {
        return
    }
    var i = e.getRange(this.getAreaName());
    if (i.getRange() == 0) {
        return
    }
    var o = e.getDataProvider(this.getAreaName() + ".main");
    var n = a.getFirstIndex();
    var s = n + a.getLastIndex() >> 1;
    var h = e.getTheme(this.getFrameName());
    t.font = h.getFont(Theme.Font.Default);
    t.textBaseline = "middle";
    t.fillStyle = h.getColor(Theme.Color.Text4);
    t.strokeStyle = h.getColor(Theme.Color.Text4);
    var l = r.getDecimalDigits();
    this.drawMark(t, o.getMinValue(), l, i.toY(o.getMinValue()), n, s, o.getMinValueIndex(), a);
    this.drawMark(t, o.getMaxValue(), l, i.toY(o.getMaxValue()), n, s, o.getMaxValueIndex(), a)
};
MinMaxPlotter.prototype.drawMark = function (t, e, r, a, i, o, n, s) {
    var h, l, c;
    var u;
    if (n > o) {
        t.textAlign = "right";
        h = s.toItemCenter(n) - 4;
        l = h - 7;
        c = h - 3;
        u = l - 4
    } else {
        t.textAlign = "left";
        h = s.toItemCenter(n) + 4;
        l = h + 7;
        c = h + 3;
        u = l + 4
    }
    Plotter.drawLine(t, h, a, l, a);
    Plotter.drawLine(t, h, a, c, a + 2);
    Plotter.drawLine(t, h, a, c, a - 2);
    t.fillText(String.fromFloat(e, r), u, a)
};
var TimelinePlotter = create_class(Plotter);
TimelinePlotter.prototype.__construct = function (t) {
    TimelinePlotter.__super.__construct.call(this, t)
};
TimelinePlotter.TP_MINUTE = 60 * 1e3;
TimelinePlotter.TP_HOUR = 60 * TimelinePlotter.TP_MINUTE;
TimelinePlotter.TP_DAY = 24 * TimelinePlotter.TP_HOUR;
TimelinePlotter.TIME_INTERVAL = [5 * TimelinePlotter.TP_MINUTE, 10 * TimelinePlotter.TP_MINUTE, 15 * TimelinePlotter.TP_MINUTE, 30 * TimelinePlotter.TP_MINUTE, TimelinePlotter.TP_HOUR, 2 * TimelinePlotter.TP_HOUR, 3 * TimelinePlotter.TP_HOUR, 6 * TimelinePlotter.TP_HOUR, 12 * TimelinePlotter.TP_HOUR, TimelinePlotter.TP_DAY, 2 * TimelinePlotter.TP_DAY];
TimelinePlotter.MonthConvert = {
    1: "Jan.",
    2: "Feb.",
    3: "Mar.",
    4: "Apr.",
    5: "May.",
    6: "Jun.",
    7: "Jul.",
    8: "Aug.",
    9: "Sep.",
    10: "Oct.",
    11: "Nov.",
    12: "Dec."
};
TimelinePlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    if (!r.isChanged() && !a.isUpdated()) {
        return
    }
    var i = e.getDataSource(this.getDataSourceName());
    if (i.getDataCount() < 2) {
        return
    }
    var o = i.getDataAt(1).date - i.getDataAt(0).date;
    var n, s = TimelinePlotter.TIME_INTERVAL.length;
    for (n = 0; n < s; n++) {
        if (o < TimelinePlotter.TIME_INTERVAL[n]) {
            break
        }
    }
    for (; n < s; n++) {
        if (TimelinePlotter.TIME_INTERVAL[n] % o == 0) {
            if (TimelinePlotter.TIME_INTERVAL[n] / o * a.getColumnWidth() > 60) {
                break
            }
        }
    }
    var h = a.getFirstIndex();
    var l = a.getLastIndex();
    var c = new Date;
    var u = c.getTimezoneOffset() * 60 * 1e3;
    var p = e.getTheme(this.getFrameName());
    t.font = p.getFont(Theme.Font.Default);
    t.textAlign = "center";
    t.textBaseline = "middle";
    var g = e.getLanguage();
    var _ = [];
    var d = r.getTop();
    var f = r.getMiddle();
    for (var m = h; m < l; m++) {
        var v = i.getDataAt(m).date;
        var C = v - u;
        var x = new Date(v);
        var P = x.getFullYear();
        var w = x.getMonth() + 1;
        var y = x.getDate();
        var M = x.getHours();
        var A = x.getMinutes();
        var E = "";
        if (n < s) {
            var S = Math.max(TimelinePlotter.TP_DAY, TimelinePlotter.TIME_INTERVAL[n]);
            if (C % S == 0) {
                if (g == "zh-cn") {
                    E = w.toString() + "月" + y.toString() + "日"
                } else {
                    if (g == "zh-tw") {
                        E = w.toString() + "月" + y.toString() + "日"
                    } else {
                        if (g == "en-us") {
                            E = TimelinePlotter.MonthConvert[w] + " " + y.toString()
                        }
                    }
                }
                t.fillStyle = p.getColor(Theme.Color.Text4)
            } else {
                if (C % TimelinePlotter.TIME_INTERVAL[n] == 0) {
                    var T = A.toString();
                    if (A < 10) {
                        T = "0" + T
                    }
                    E = M.toString() + ":" + T;
                    t.fillStyle = p.getColor(Theme.Color.Text2)
                }
            }
        } else {
            if (y == 1 && M < o / TimelinePlotter.TP_HOUR) {
                if (w == 1) {
                    E = P.toString();
                    if (g == "zh-cn") {
                        E += "年"
                    } else {
                        if (g == "zh-tw") {
                            E += "年"
                        }
                    }
                } else {
                    if (g == "zh-cn") {
                        E = w.toString() + "月"
                    } else {
                        if (g == "zh-tw") {
                            E = w.toString() + "月"
                        } else {
                            if (g == "en-us") {
                                E = TimelinePlotter.MonthConvert[w]
                            }
                        }
                    }
                }
                t.fillStyle = p.getColor(Theme.Color.Text4)
            }
        }
        if (E.length > 0) {
            var b = a.toItemCenter(m);
            _.push({x: b, y: d, w: 1, h: 4});
            t.fillText(E, b, f)
        }
    }
    if (_.length > 0) {
        t.fillStyle = p.getColor(Theme.Color.Grid1);
        Plotter.createRectangles(t, _);
        t.fill()
    }
};
var RangePlotter = create_class(NamedObject);
RangePlotter.prototype.__construct = function (t) {
    RangePlotter.__super.__construct.call(this, t)
};
RangePlotter.prototype.getRequiredWidth = function (t, e) {
    var r = ChartManager.getInstance();
    var a = r.getTheme(this.getFrameName());
    t.font = a.getFont(Theme.Font.Default);
    return t.measureText((Math.floor(e) + .88).toString()).width + 16
};
RangePlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = this.getAreaName();
    var a = e.getArea(r);
    var i = r.substring(0, r.lastIndexOf("Range"));
    var o = e.getRange(i);
    if (o.getRange() == 0) {
        return
    }
    var n = o.getNameObject().getCompAt(2) == "main";
    if (n) {
    } else {
        if (!a.isChanged() && !o.isUpdated()) {
            return
        }
    }
    var s = o.getGradations();
    if (s.length == 0) {
        return
    }
    var h = a.getLeft();
    var l = a.getRight();
    var c = a.getCenter();
    var u = e.getTheme(this.getFrameName());
    t.font = u.getFont(Theme.Font.Default);
    t.textAlign = "center";
    t.textBaseline = "middle";
    t.fillStyle = u.getColor(Theme.Color.Text2);
    var p = [];
    for (var g in s) {
        var _ = o.toY(s[g]);
        p.push({x: h, y: _, w: 6, h: 1});
        p.push({x: l - 6, y: _, w: 6, h: 1});
        t.fillText(String.fromFloat(s[g], 2), c, _)
    }
    if (p.length > 0) {
        t.fillStyle = u.getColor(Theme.Color.Grid1);
        Plotter.createRectangles(t, p);
        t.fill()
    }
};
var COrderGraphPlotter = create_class(NamedObject);
COrderGraphPlotter.prototype.__construct = function (t) {
    COrderGraphPlotter.__super.__construct.call(this, t)
};
COrderGraphPlotter.prototype.Draw = function (t) {
    return this._Draw_(t)
};
COrderGraphPlotter.prototype._Draw_ = function (t) {
    if (this.Update() == false) {
        return
    }
    if (this.updateData() == false) {
        return
    }
    this.m_top = this.m_pArea.getTop();
    this.m_bottom = this.m_pArea.getBottom();
    this.m_left = this.m_pArea.getLeft();
    this.m_right = this.m_pArea.getRight();
    t.save();
    t.rect(this.m_left, this.m_top, this.m_right - this.m_left, this.m_bottom - this.m_top);
    t.clip();
    var e = ChartManager.getInstance().getChart()._depthData;
    this.x_offset = 0;
    this.y_offset = 0;
    var r = {};
    var a = {};
    r.x = this.m_left + e.array[this.m_ask_si].amounts * this.m_Step;
    r.y = this.m_pRange.toY(e.array[this.m_ask_si].rate);
    a.x = this.m_left + e.array[this.m_bid_si].amounts * this.m_Step;
    a.y = this.m_pRange.toY(e.array[this.m_bid_si].rate);
    if (Math.abs(r.y - a.y) < 1) {
        this.y_offset = 1
    }
    this.x_offset = 1;
    this.DrawBackground(t);
    this.UpdatePoints();
    this.FillBlack(t);
    this.DrawGradations(t);
    this.DrawLine(t);
    t.restore()
};
COrderGraphPlotter.prototype.DrawBackground = function (t) {
    t.fillStyle = this.m_pTheme.getColor(Theme.Color.Background);
    t.fillRect(this.m_left, this.m_top, this.m_right - this.m_left, this.m_bottom - this.m_top);
    var e = ChartManager.getInstance().getChart()._depthData;
    if (this.m_mode == 0) {
        var r = this.m_pRange.toY(e.array[this.m_ask_si].rate) - this.y_offset;
        var a = this.m_pRange.toY(e.array[this.m_bid_si].rate) + this.y_offset;
        var i = t.createLinearGradient(this.m_left, 0, this.m_right, 0);
        i.addColorStop(0, this.m_pTheme.getColor(Theme.Color.Background));
        i.addColorStop(1, this.m_pTheme.getColor(Theme.Color.PositiveDark));
        t.fillStyle = i;
        t.fillRect(this.m_left, this.m_top, this.m_right - this.m_left, r - this.m_top);
        var o = t.createLinearGradient(this.m_left, 0, this.m_right, 0);
        o.addColorStop(0, this.m_pTheme.getColor(Theme.Color.Background));
        o.addColorStop(1, this.m_pTheme.getColor(Theme.Color.NegativeDark));
        t.fillStyle = o;
        t.fillRect(this.m_left, a, this.m_right - this.m_left, this.m_bottom - a)
    } else {
        if (this.m_mode == 1) {
            var i = t.createLinearGradient(this.m_left, 0, this.m_right, 0);
            i.addColorStop(0, this.m_pTheme.getColor(Theme.Color.Background));
            i.addColorStop(1, this.m_pTheme.getColor(Theme.Color.PositiveDark));
            t.fillStyle = i;
            t.fillRect(this.m_left, this.m_top, this.m_right - this.m_left, this.m_bottom - this.m_top)
        } else {
            if (this.m_mode == 2) {
                var o = t.createLinearGradient(this.m_left, 0, this.m_right, 0);
                o.addColorStop(0, this.m_pTheme.getColor(Theme.Color.Background));
                o.addColorStop(1, this.m_pTheme.getColor(Theme.Color.NegativeDark));
                t.fillStyle = o;
                t.fillRect(this.m_left, this.m_top, this.m_right - this.m_left, this.m_bottom - this.m_top)
            }
        }
    }
};
COrderGraphPlotter.prototype.DrawLine = function (t) {
    if (this.m_mode == 0 || this.m_mode == 1) {
        t.strokeStyle = this.m_pTheme.getColor(Theme.Color.Positive);
        t.beginPath();
        t.moveTo(Math.floor(this.m_ask_points[0].x) + .5, Math.floor(this.m_ask_points[0].y) + .5);
        for (var e = 1; e < this.m_ask_points.length; e++) {
            t.lineTo(Math.floor(this.m_ask_points[e].x) + .5, Math.floor(this.m_ask_points[e].y) + .5)
        }
        t.stroke()
    }
    if (this.m_mode == 0 || this.m_mode == 2) {
        t.strokeStyle = this.m_pTheme.getColor(Theme.Color.Negative);
        t.beginPath();
        t.moveTo(this.m_bid_points[0].x + .5, this.m_bid_points[0].y + .5);
        for (var e = 1; e < this.m_bid_points.length; e++) {
            t.lineTo(this.m_bid_points[e].x + .5, this.m_bid_points[e].y + .5)
        }
        t.stroke()
    }
};
COrderGraphPlotter.prototype.UpdatePoints = function () {
    var t = ChartManager.getInstance().getChart()._depthData;
    this.m_ask_points = [];
    var e = {};
    e.x = Math.floor(this.m_left);
    e.y = Math.floor(this.m_pRange.toY(t.array[this.m_ask_si].rate) - this.y_offset);
    this.m_ask_points.push(e);
    var r = 0;
    for (var a = this.m_ask_si; a >= this.m_ask_ei; a--) {
        var i = {};
        var o = {};
        if (a == this.m_ask_si) {
            i.x = Math.floor(this.m_left + t.array[a].amounts * this.m_Step + this.x_offset);
            i.y = Math.floor(this.m_pRange.toY(t.array[a].rate) - this.y_offset);
            this.m_ask_points.push(i);
            r = 1
        } else {
            i.x = Math.floor(this.m_left + t.array[a].amounts * this.m_Step + this.x_offset);
            i.y = Math.floor(this.m_ask_points[r].y);
            o.x = Math.floor(i.x);
            o.y = Math.floor(this.m_pRange.toY(t.array[a].rate) - this.y_offset);
            this.m_ask_points.push(i);
            r++;
            this.m_ask_points.push(o);
            r++
        }
    }
    this.m_bid_points = [];
    var n = {};
    n.x = Math.floor(this.m_left);
    n.y = Math.ceil(this.m_pRange.toY(t.array[this.m_bid_si].rate) + this.y_offset);
    this.m_bid_points.push(n);
    var s = 0;
    for (var a = this.m_bid_si; a <= this.m_bid_ei; a++) {
        var i = {};
        var o = {};
        if (a == this.m_bid_si) {
            i.x = Math.floor(this.m_left + t.array[a].amounts * this.m_Step + this.x_offset);
            i.y = Math.ceil(this.m_pRange.toY(t.array[a].rate) + this.y_offset);
            this.m_bid_points.push(i);
            s = 1
        } else {
            i.x = Math.floor(this.m_left + t.array[a].amounts * this.m_Step + this.x_offset);
            i.y = Math.ceil(this.m_bid_points[s].y);
            o.x = Math.floor(i.x);
            o.y = Math.ceil(this.m_pRange.toY(t.array[a].rate) + this.x_offset);
            this.m_bid_points.push(i);
            s++;
            this.m_bid_points.push(o);
            s++
        }
    }
};
COrderGraphPlotter.prototype.updateData = function () {
    var t = ChartManager.getInstance().getChart()._depthData;
    if (t.array == null) {
        return false
    }
    if (t.array.length <= 50) {
        return false
    }
    var e = this.m_pRange.getOuterMinValue();
    var r = this.m_pRange.getOuterMaxValue();
    this.m_ask_si = t.asks_si;
    this.m_ask_ei = t.asks_si;
    for (var a = t.asks_si; a >= t.asks_ei; a--) {
        if (t.array[a].rate < r) {
            this.m_ask_ei = a
        } else {
            break
        }
    }
    this.m_bid_si = t.bids_si;
    this.m_bid_ei = t.bids_si;
    for (var a = t.bids_si; a <= t.bids_ei; a++) {
        if (t.array[a].rate > e) {
            this.m_bid_ei = a
        } else {
            break
        }
    }
    if (this.m_ask_ei == this.m_ask_si) {
        this.m_mode = 2
    } else {
        if (this.m_bid_ei == this.m_bid_si) {
            this.m_mode = 1
        } else {
            this.m_mode = 0
        }
    }
    this.m_Step = this.m_pArea.getWidth();
    if (this.m_mode == 0) {
        if (this.m_ask_ei == t.asks_ei && this.m_bid_ei == t.bids_ei) {
            this.m_Step /= Math.min(t.array[this.m_ask_ei].amounts, t.array[this.m_bid_ei].amounts)
        } else {
            if (this.m_ask_ei != t.asks_ei && this.m_bid_ei == t.bids_ei) {
                this.m_Step /= t.array[this.m_bid_ei].amounts
            } else {
                if (this.m_ask_ei == t.asks_ei && this.m_bid_ei != t.bids_ei) {
                    this.m_Step /= t.array[this.m_ask_ei].amounts
                } else {
                    if (this.m_ask_ei != t.asks_ei && this.m_bid_ei != t.bids_ei) {
                        this.m_Step /= Math.max(t.array[this.m_ask_ei].amounts, t.array[this.m_bid_ei].amounts)
                    }
                }
            }
        }
    } else {
        if (this.m_mode == 1) {
            this.m_Step /= t.array[this.m_ask_ei].amounts
        } else {
            if (this.m_mode == 2) {
                this.m_Step /= t.array[this.m_bid_ei].amounts
            }
        }
    }
    return true
};
COrderGraphPlotter.prototype.Update = function () {
    this.m_pMgr = ChartManager.getInstance();
    var t = this.getAreaName();
    this.m_pArea = this.m_pMgr.getArea(t);
    if (this.m_pArea == null) {
        return false
    }
    var e = t.substring(0, t.lastIndexOf("Range"));
    this.m_pRange = this.m_pMgr.getRange(e);
    if (this.m_pRange == null || this.m_pRange.getRange() == 0) {
        return false
    }
    this.m_pTheme = this.m_pMgr.getTheme(this.getFrameName());
    if (this.m_pTheme == null) {
        return false
    }
    return true
};
COrderGraphPlotter.prototype.DrawGradations = function (t) {
    var e = ChartManager.getInstance();
    var r = this.getAreaName();
    var a = e.getArea(r);
    var i = r.substring(0, r.lastIndexOf("Range"));
    var o = e.getRange(i);
    if (o.getRange() == 0) {
        return
    }
    var n = o.getGradations();
    if (n.length == 0) {
        return
    }
    var s = a.getLeft();
    var h = a.getRight();
    var l = [];
    for (var c in n) {
        var u = o.toY(n[c]);
        l.push({x: s, y: u, w: 6, h: 1});
        l.push({x: h - 6, y: u, w: 6, h: 1})
    }
    if (l.length > 0) {
        var p = e.getTheme(this.getFrameName());
        t.fillStyle = p.getColor(Theme.Color.Grid1);
        Plotter.createRectangles(t, l);
        t.fill()
    }
};
COrderGraphPlotter.prototype.FillBlack = function (t) {
    var e = this.m_ask_points;
    var r = this.m_bid_points;
    var a = {};
    var i = {};
    a.x = this.m_right;
    a.y = e[0].y;
    i.x = this.m_right;
    i.y = e[e.length - 1].y;
    var o = {};
    var n = {};
    o.x = this.m_right;
    o.y = r[0].y - 1;
    n.x = this.m_right;
    n.y = r[r.length - 1].y;
    e.unshift(a);
    e.push(i);
    r.unshift(o);
    r.push(n);
    t.fillStyle = this.m_pTheme.getColor(Theme.Color.Background);
    t.beginPath();
    t.moveTo(Math.floor(e[0].x) + .5, Math.floor(e[0].y) + .5);
    for (var s = 1; s < e.length; s++) {
        t.lineTo(Math.floor(e[s].x) + .5, Math.floor(e[s].y) + .5)
    }
    t.fill();
    t.beginPath();
    t.moveTo(Math.floor(r[0].x) + .5, Math.floor(r[0].y) + .5);
    for (var s = 1; s < r.length; s++) {
        t.lineTo(Math.floor(r[s].x) + .5, Math.floor(r[s].y) + .5)
    }
    t.fill();
    e.shift();
    e.pop();
    r.shift();
    r.pop()
};
COrderGraphPlotter.prototype.DrawTickerGraph = function (t) {
    return;
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    var a = r._dataItems[r._dataItems.length - 1].close;
    var i = this.m_left + 1;
    var o = this.m_pRange.toY(a);
    var n = i + 5;
    var s = o + 2.5;
    var h = i + 5;
    var l = o - 2.5;
    t.fillStyle = this.m_pTheme.getColor(Theme.Color.Mark);
    t.strokeStyle = this.m_pTheme.getColor(Theme.Color.Mark)
};
var LastVolumePlotter = create_class(Plotter);
LastVolumePlotter.prototype.__construct = function (t) {
    LastVolumePlotter.__super.__construct.call(this, t)
};
LastVolumePlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getTimeline(this.getDataSourceName());
    var a = this.getAreaName();
    var i = e.getArea(a);
    var o = a.substring(0, a.lastIndexOf("Range"));
    var n = e.getRange(o);
    if (n.getRange() == 0) {
        return
    }
    var s = e.getDataSource(this.getDataSourceName());
    if (s.getDataCount() < 1) {
        return
    }
    var h = e.getTheme(this.getFrameName());
    t.font = h.getFont(Theme.Font.Default);
    t.textAlign = "left";
    t.textBaseline = "middle";
    t.fillStyle = h.getColor(Theme.Color.RangeMark);
    t.strokeStyle = h.getColor(Theme.Color.RangeMark);
    var l = s.getDataAt(s.getDataCount() - 1).volume;
    var c = n.toY(l);
    var u = i.getLeft() + 1;
    Plotter.drawLine(t, u, c, u + 7, c);
    Plotter.drawLine(t, u, c, u + 3, c + 2);
    Plotter.drawLine(t, u, c, u + 3, c - 2);
    t.fillText(String.fromFloat(l, 2), u + 10, c)
};
var LastClosePlotter = create_class(Plotter);
LastClosePlotter.prototype.__construct = function (t) {
    LastClosePlotter.__super.__construct.call(this, t)
};
LastClosePlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getTimeline(this.getDataSourceName());
    var a = this.getAreaName();
    var i = e.getArea(a);
    var o = a.substring(0, a.lastIndexOf("Range"));
    var n = e.getRange(o);
    if (n.getRange() == 0) {
        return
    }
    var s = e.getDataSource(this.getDataSourceName());
    if (s.getDataCount() < 1) {
        return
    }
    var h = s._dataItems[s._dataItems.length - 1].close;
    if (h <= n.getMinValue() || h >= n.getMaxValue()) {
        return
    }
    var l = e.getTheme(this.getFrameName());
    t.font = l.getFont(Theme.Font.Default);
    t.textAlign = "left";
    t.textBaseline = "middle";
    t.fillStyle = l.getColor(Theme.Color.RangeMark);
    t.strokeStyle = l.getColor(Theme.Color.RangeMark);
    var c = n.toY(h);
    var u = i.getLeft() + 1;
    Plotter.drawLine(t, u, c, u + 7, c);
    Plotter.drawLine(t, u, c, u + 3, c + 2);
    Plotter.drawLine(t, u, c, u + 3, c - 2);
    t.fillText(String.fromFloat(h, s.getDecimalDigits()), u + 10, c)
};
var SelectionPlotter = create_class(Plotter);
SelectionPlotter.prototype.__construct = function (t) {
    SelectionPlotter.__super.__construct.call(this, t)
};
SelectionPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    if (e._drawingTool != ChartManager.DrawingTool.CrossCursor) {
        return
    }
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    if (a.getSelectedIndex() < 0) {
        return
    }
    var i = e.getRange(this.getAreaName());
    var o = e.getTheme(this.getFrameName());
    t.strokeStyle = o.getColor(Theme.Color.Cursor);
    var n = a.toItemCenter(a.getSelectedIndex());
    Plotter.drawLine(t, n, r.getTop() - 1, n, r.getBottom());
    var s = i.getSelectedPosition();
    if (s >= 0) {
        Plotter.drawLine(t, r.getLeft(), s, r.getRight(), s)
    }
};
var TimelineSelectionPlotter = create_class(NamedObject);
TimelineSelectionPlotter.MonthConvert = {
    1: "Jan.",
    2: "Feb.",
    3: "Mar.",
    4: "Apr.",
    5: "May.",
    6: "Jun.",
    7: "Jul.",
    8: "Aug.",
    9: "Sep.",
    10: "Oct.",
    11: "Nov.",
    12: "Dec."
};
TimelineSelectionPlotter.prototype.__construct = function (t) {
    TimelineSelectionPlotter.__super.__construct.call(this, t)
};
TimelineSelectionPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = e.getArea(this.getAreaName());
    var a = e.getTimeline(this.getDataSourceName());
    if (a.getSelectedIndex() < 0) {
        return
    }
    var i = e.getDataSource(this.getDataSourceName());
    if (!is_instance(i, MainDataSource)) {
        return
    }
    var o = e.getTheme(this.getFrameName());
    var n = e.getLanguage();
    var s = a.toItemCenter(a.getSelectedIndex());
    t.fillStyle = o.getColor(Theme.Color.Background);
    t.fillRect(s - 52.5, r.getTop() + 2.5, 106, 18);
    t.strokeStyle = o.getColor(Theme.Color.Grid3);
    t.strokeRect(s - 52.5, r.getTop() + 2.5, 106, 18);
    t.font = o.getFont(Theme.Font.Default);
    t.textAlign = "center";
    t.textBaseline = "middle";
    t.fillStyle = o.getColor(Theme.Color.Text4);
    var h = new Date(i.getDataAt(a.getSelectedIndex()).date);
    var l = h.getMonth() + 1;
    var c = h.getDate();
    var u = h.getHours();
    var p = h.getMinutes();
    var g = l.toString();
    var _ = c.toString();
    var d = u.toString();
    var f = p.toString();
    if (p < 10) {
        f = "0" + f
    }
    var m = "";
    if (n == "zh-cn") {
        m = g + "月" + _ + "日  " + d + ":" + f
    } else {
        if (n == "zh-tw") {
            m = g + "月" + _ + "日  " + d + ":" + f
        } else {
            if (n == "en-us") {
                m = TimelineSelectionPlotter.MonthConvert[l] + " " + _ + "  " + d + ":" + f
            }
        }
    }
    t.fillText(m, s, r.getMiddle())
};
var RangeSelectionPlotter = create_class(NamedObject);
RangeSelectionPlotter.prototype.__construct = function (t) {
    RangeSelectionPlotter.__super.__construct.call(this, t)
};
RangeSelectionPlotter.prototype.Draw = function (t) {
    var e = ChartManager.getInstance();
    var r = this.getAreaName();
    var a = e.getArea(r);
    var i = e.getTimeline(this.getDataSourceName());
    if (i.getSelectedIndex() < 0) {
        return
    }
    var o = r.substring(0, r.lastIndexOf("Range"));
    var n = e.getRange(o);
    if (n.getRange() == 0 || n.getSelectedPosition() < 0) {
        return
    }
    var s = n.getSelectedValue();
    if (s == -Number.MAX_VALUE) {
        return
    }
    var h = n.getSelectedPosition();
    Plotter.createPolygon(t, [{x: a.getLeft(), y: h}, {x: a.getLeft() + 5, y: h + 10}, {
        x: a.getRight() - 3,
        y: h + 10
    }, {x: a.getRight() - 3, y: h - 10}, {x: a.getLeft() + 5, y: h - 10}]);
    var l = e.getTheme(this.getFrameName());
    t.fillStyle = l.getColor(Theme.Color.Background);
    t.fill();
    t.strokeStyle = l.getColor(Theme.Color.Grid4);
    t.stroke();
    t.font = l.getFont(Theme.Font.Default);
    t.textAlign = "center";
    t.textBaseline = "middle";
    t.fillStyle = l.getColor(Theme.Color.Text3);
    var c = 2;
    if (n.getNameObject().getCompAt(2) == "main") {
        c = e.getDataSource(this.getDataSourceName()).getDecimalDigits()
    }
    t.fillText(String.fromFloat(s, c), a.getCenter(), h)
};
var ChartSettings = {};
ChartSettings.checkVersion = function () {
    if (ChartSettings._data.ver < 2) {
        ChartSettings._data.ver = 2;
        var t = ChartSettings._data.charts;
        t.period_weight = {};
        t.period_weight.line = 8;
        t.period_weight["1min"] = 7;
        t.period_weight["5min"] = 6;
        t.period_weight["15min"] = 5;
        t.period_weight["30min"] = 4;
        t.period_weight["1hour"] = 3;
        t.period_weight["1day"] = 2;
        t.period_weight["1week"] = 1;
        t.period_weight["3min"] = 0;
        t.period_weight["2hour"] = 0;
        t.period_weight["4hour"] = 0;
        t.period_weight["6hour"] = 0;
        t.period_weight["12hour"] = 0;
        t.period_weight["3day"] = 0
    }
    if (ChartSettings._data.ver < 3) {
        ChartSettings._data.ver = 3;
        var t = ChartSettings._data.charts;
        t.areaHeight = []
    }
};
ChartSettings.get = function () {
    if (ChartSettings._data == undefined) {
        ChartSettings.init();
        ChartSettings.load();
        ChartSettings.checkVersion()
    }
    return ChartSettings._data
};
ChartSettings.init = function () {
    var t = {};
    var e = new Array("MA", "EMA", "VOLUME", "MACD", "KDJ", "StochRSI", "RSI", "DMI", "OBV", "BOLL", "DMA", "TRIX", "BRAR", "VR", "EMV", "WR", "ROC", "MTM", "PSY");
    for (var r = 0; r < e.length; r++) {
        var a = ChartManager.getInstance().createIndicatorAndRange("", e[r], true);
        if (a == null) {
            continue
        }
        t[e[r]] = [];
        var i = a.indic.getParameters();
        for (var o = 0; o < i.length; o++) {
            t[e[r]].push(i[o])
        }
    }
    var n = "CandleStick";
    var s = "MA";
    var h = new Array("VOLUME", "MACD");
    var l = "15m";
    var c = {};
    c.chartStyle = n;
    c.mIndic = s;
    c.indics = h;
    c.indicsStatus = "close";
    c.period = l;
    ChartSettings._data = {ver: 1, charts: c, indics: t, theme: "Dark"};
    ChartSettings.checkVersion()
};
ChartSettings.load = function () {
    if (document.cookie.length <= 0) {
        return
    }
    var t = document.cookie.indexOf("chartSettings=");
    if (t < 0) {
        return
    }
    t += "chartSettings=".length;
    var e = document.cookie.indexOf(";", t);
    if (e < 0) {
        e = document.cookie.length
    }
    var r = unescape(document.cookie.substring(t, e));
    ChartSettings._data = JSON.parse(r)
};
ChartSettings.save = function () {
    var t = new Date;
    t.setDate(t.getDate() + 2);
    document.cookie = "chartSettings=" + escape(JSON.stringify(ChartSettings._data)) + ";expires=" + t.toGMTString()
};
var CPoint = create_class(NamedObject);
CPoint.state = {Hide: 0, Show: 1, Highlight: 2};
CPoint.prototype.__construct = function (t) {
    CPoint.__super.__construct.call(this, t);
    this.pos = {index: -1, value: -1};
    this.state = CPoint.state.Hide
};
CPoint.prototype.getChartObjects = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource("frame0.k0");
    if (e == null || !is_instance(e, MainDataSource)) {
        return null
    }
    var r = t.getTimeline("frame0.k0");
    if (r == null) {
        return null
    }
    var a = t.getRange("frame0.k0.main");
    if (a == null) {
        return null
    }
    return {pMgr: t, pCDS: e, pTimeline: r, pRange: a}
};
CPoint.prototype.setPosXY = function (t, e) {
    var r = this.getChartObjects();
    var a = r.pTimeline.toIndex(t);
    var i = r.pRange.toValue(e);
    var o = this.snapValue(a, i);
    if (o != null) {
        i = o
    }
    this.setPosIV(a, i)
};
CPoint.prototype.setPosXYNoSnap = function (t, e) {
    var r = this.getChartObjects();
    var a = r.pTimeline.toIndex(t);
    var i = r.pRange.toValue(e);
    this.setPosIV(a, i)
};
CPoint.prototype.setPosIV = function (t, e) {
    this.pos = {index: t, value: e}
};
CPoint.prototype.getPosXY = function () {
    var t = this.getChartObjects();
    var e = t.pTimeline.toItemCenter(this.pos.index);
    var r = t.pRange.toY(this.pos.value);
    return {x: e, y: r}
};
CPoint.prototype.getPosIV = function () {
    return {i: this.pos.index, v: this.pos.value}
};
CPoint.prototype.setState = function (t) {
    this.state = t
};
CPoint.prototype.getState = function () {
    return this.state
};
CPoint.prototype.isSelected = function (t, e) {
    var r = this.getPosXY();
    if (t < r.x - 4 || t > r.x + 4 || e < r.y - 4 || e > r.y + 4) {
        return false
    }
    this.setState(CPoint.state.Highlight);
    return true
};
CPoint.prototype.snapValue = function (t, e) {
    var r = this.getChartObjects();
    var a = null;
    var i = Math.floor(r.pTimeline.getFirstIndex());
    var o = Math.floor(r.pTimeline.getLastIndex());
    if (t < i || t > o) {
        return a
    }
    var n = r.pRange.toY(e);
    var s = r.pCDS.getDataAt(t);
    if (s == null || s == undefined) {
        return a
    }
    var h = null;
    if (t > 0) {
        h = r.pCDS.getDataAt(t - 1)
    } else {
        h = r.pCDS.getDataAt(t)
    }
    var l = r.pMgr.getChartStyle(r.pCDS.getFrameName());
    var c = r.pRange.toY(s.open);
    var u = r.pRange.toY(s.high);
    var p = r.pRange.toY(s.low);
    var g = r.pRange.toY(s.close);
    if (l === "CandleStickHLC") {
        c = r.pRange.toY(h.close)
    }
    var _ = Math.abs(c - n);
    var d = Math.abs(u - n);
    var f = Math.abs(p - n);
    var m = Math.abs(g - n);
    if (_ <= d && _ <= f && _ <= m) {
        if (_ < 6) {
            a = s.open
        }
    }
    if (d <= _ && d <= f && d <= m) {
        if (d < 6) {
            a = s.high
        }
    }
    if (f <= _ && f <= d && f <= m) {
        if (f < 6) {
            a = s.low
        }
    }
    if (m <= _ && m <= d && m <= f) {
        if (m < 6) {
            a = s.close
        }
    }
    return a
};
var CToolObject = create_class(NamedObject);
CToolObject.state = {BeforeDraw: 0, Draw: 1, AfterDraw: 2};
CToolObject.prototype.__construct = function (t) {
    CToolObject.__super.__construct.call(this, t);
    this.drawer = null;
    this.state = CToolObject.state.BeforeDraw;
    this.points = [];
    this.step = 0
};
CToolObject.prototype.getChartObjects = function () {
    var t = ChartManager.getInstance();
    var e = t.getDataSource("frame0.k0");
    if (e == null || !is_instance(e, MainDataSource)) {
        return null
    }
    var r = t.getTimeline("frame0.k0");
    if (r == null) {
        return null
    }
    var a = t.getArea("frame0.k0.main");
    if (a == null) {
        return null
    }
    var i = t.getRange("frame0.k0.main");
    if (i == null) {
        return null
    }
    return {pMgr: t, pCDS: e, pTimeline: r, pArea: a, pRange: i}
};
CToolObject.prototype.isValidMouseXY = function (t, e) {
    var r = this.getChartObjects();
    var a = {left: r.pArea.getLeft(), top: r.pArea.getTop(), right: r.pArea.getRight(), bottom: r.pArea.getBottom()};
    if (t < a.left || t > a.right || e < a.top || e > a.bottom) {
        return false
    }
    return true
};
CToolObject.prototype.getPlotter = function () {
    return this.drawer
};
CToolObject.prototype.setState = function (t) {
    this.state = t
};
CToolObject.prototype.getState = function () {
    return this.state
};
CToolObject.prototype.addPoint = function (t) {
    this.points.push(t)
};
CToolObject.prototype.getPoint = function (t) {
    return this.points[t]
};
CToolObject.prototype.acceptMouseMoveEvent = function (t, e) {
    if (this.isValidMouseXY(t, e) == false) {
        return false
    }
    if (this.state == CToolObject.state.BeforeDraw) {
        this.setBeforeDrawPos(t, e)
    } else {
        if (this.state == CToolObject.state.Draw) {
            this.setDrawPos(t, e)
        } else {
            if (this.state == CToolObject.state.AfterDraw) {
                this.setAfterDrawPos(t, e)
            }
        }
    }
    return true
};
CToolObject.prototype.acceptMouseDownEvent = function (t, e) {
    if (this.isValidMouseXY(t, e) == false) {
        return false
    }
    if (this.state == CToolObject.state.BeforeDraw) {
        this.setDrawPos(t, e);
        this.setState(CToolObject.state.Draw)
    } else {
        if (this.state == CToolObject.state.Draw) {
            this.setAfterDrawPos(t, e);
            if (this.step == 0) {
                this.setState(CToolObject.state.AfterDraw)
            }
        } else {
            if (this.state == CToolObject.state.AfterDraw) {
                if (CToolObject.prototype.isSelected.call(this, t, e)) {
                    this.setDrawPos(t, e);
                    this.setState(CToolObject.state.Draw)
                } else {
                    this.oldx = t;
                    this.oldy = e
                }
            }
        }
    }
    return true
};
CToolObject.prototype.acceptMouseDownMoveEvent = function (t, e) {
    if (this.isValidMouseXY(t, e) == false) {
        return false
    }
    if (this.state == CToolObject.state.Draw) {
        this.setDrawPos(t, e)
    } else {
        if (this.state == CToolObject.state.AfterDraw) {
            var r = this.getChartObjects();
            var a = r.pTimeline.getItemWidth();
            var i = r.pRange;
            if (Math.abs(t - this.oldx) < a && Math.abs(e - this.oldy) == 0) {
                return true
            }
            var o = r.pTimeline.toIndex(this.oldx);
            var n = r.pRange.toValue(this.oldy);
            var s = r.pTimeline.toIndex(t);
            var h = r.pRange.toValue(e);
            this.oldx = t;
            this.oldy = e;
            var l = s - o;
            var c = h - n;
            for (var u in this.points) {
                this.points[u].pos.index += l;
                this.points[u].pos.value += c
            }
        }
    }
    return true
};
CToolObject.prototype.acceptMouseUpEvent = function (t, e) {
    if (this.isValidMouseXY(t, e) == false) {
        return false
    }
    if (this.state == CToolObject.state.Draw) {
        this.setAfterDrawPos(t, e);
        if (this.step == 0) {
            this.setState(CToolObject.state.AfterDraw)
        }
        return true
    }
    return false
};
CToolObject.prototype.setBeforeDrawPos = function (t, e) {
    for (var r in this.points) {
        this.points[r].setPosXY(t, e);
        this.points[r].setState(CPoint.state.Show)
    }
};
CToolObject.prototype.setDrawPos = function (t, e) {
    for (var r in this.points) {
        if (this.points[r].getState() == CPoint.state.Highlight) {
            this.points[r].setPosXY(t, e)
        }
    }
};
CToolObject.prototype.setAfterDrawPos = function (t, e) {
    if (this.step != 0) {
        this.step -= 1
    }
    for (var r in this.points) {
        this.points[r].setState(CPoint.state.Hide)
    }
    if (this.step == 0) {
        var a = this.getChartObjects();
        a.pMgr.setNormalMode()
    }
};
CToolObject.prototype.isSelected = function (t, e) {
    var r = false;
    for (var a in this.points) {
        if (this.points[a].isSelected(t, e)) {
            this.points[a].setState(CPoint.state.Highlight);
            r = true;
            break
        }
    }
    if (r == true) {
        this.select();
        return true
    }
    return false
};
CToolObject.prototype.select = function () {
    for (var t in this.points) {
        if (this.points[t].getState() == CPoint.state.Hide) {
            this.points[t].setState(CPoint.state.Show)
        }
    }
};
CToolObject.prototype.unselect = function () {
    for (var t in this.points) {
        if (this.points[t].getState() != CPoint.state.Hide) {
            this.points[t].setState(CPoint.state.Hide)
        }
    }
};
CToolObject.prototype.calcDistance = function (t, e, r) {
    var a = t.getPosXY().x;
    var i = t.getPosXY().y;
    var o = e.getPosXY().x;
    var n = e.getPosXY().y;
    var s = r.getPosXY().x;
    var h = r.getPosXY().y;
    var l = a - s;
    var c = i - h;
    var u = o - s;
    var p = n - h;
    var g = Math.abs(l * p - c * u);
    var _ = Math.sqrt(Math.pow(o - a, 2) + Math.pow(n - i, 2));
    return g / _
};
CToolObject.prototype.calcGap = function (t, e, r) {
    var a = t.sx;
    var i = t.sy;
    var o = t.ex;
    var n = t.ey;
    var s = e;
    var h = r;
    var l = a - s;
    var c = i - h;
    var u = o - s;
    var p = n - h;
    var g = Math.abs(l * p - c * u);
    var _ = Math.sqrt(Math.pow(o - a, 2) + Math.pow(n - i, 2));
    return g / _
};
CToolObject.prototype.isWithRect = function (t, e, r) {
    var a = t.getPosXY().x;
    var i = t.getPosXY().y;
    var o = e.getPosXY().x;
    var n = e.getPosXY().y;
    var s = r.getPosXY().x;
    var h = r.getPosXY().y;
    if (a > o) {
        a += 4;
        o -= 4
    } else {
        a -= 4;
        o += 4
    }
    if (i > n) {
        i += 4;
        n -= 4
    } else {
        i -= 4;
        n += 4
    }
    if (a <= s && o >= s && i <= h && n >= h) {
        return true
    }
    if (a >= s && o <= s && i <= h && n >= h) {
        return true
    }
    if (a <= s && o >= s && i >= h && n <= h) {
        return true
    }
    if (a >= s && o <= s && i >= h && n <= h) {
        return true
    }
    return false
};
CBiToolObject = create_class(CToolObject);
CBiToolObject.prototype.__construct = function (t) {
    CBiToolObject.__super.__construct.call(this, t);
    this.addPoint(new CPoint(t));
    this.addPoint(new CPoint(t))
};
CBiToolObject.prototype.setBeforeDrawPos = function (t, e) {
    this.step = 1;
    CBiToolObject.__super.setBeforeDrawPos.call(this, t, e);
    this.getPoint(0).setState(CPoint.state.Show);
    this.getPoint(1).setState(CPoint.state.Highlight)
};
CTriToolObject = create_class(CToolObject);
CTriToolObject.prototype.__construct = function (t) {
    CTriToolObject.__super.__construct.call(this, t);
    this.addPoint(new CPoint(t));
    this.addPoint(new CPoint(t));
    this.addPoint(new CPoint(t))
};
CTriToolObject.prototype.setBeforeDrawPos = function (t, e) {
    this.step = 2;
    CBiToolObject.__super.setBeforeDrawPos.call(this, t, e);
    this.getPoint(0).setState(CPoint.state.Show);
    this.getPoint(1).setState(CPoint.state.Show);
    this.getPoint(2).setState(CPoint.state.Highlight)
};
CTriToolObject.prototype.setAfterDrawPos = function (t, e) {
    if (this.step != 0) {
        this.step -= 1
    }
    if (this.step == 0) {
        for (var r in this.points) {
            this.points[r].setState(CPoint.state.Hide)
        }
    } else {
        this.getPoint(0).setState(CPoint.state.Show);
        this.getPoint(1).setState(CPoint.state.Highlight);
        this.getPoint(2).setState(CPoint.state.Show)
    }
    if (this.step == 0) {
        var a = this.getChartObjects();
        a.pMgr.setNormalMode()
    }
};
var CBandLineObject = create_class(CBiToolObject);
CBandLineObject.prototype.__construct = function (t) {
    CBandLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawBandLinesPlotter(t, this)
};
CBandLineObject.prototype.isSelected = function (t, e) {
    if (CBandLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(0).getPosXY().y;
    var o = this.getPoint(1).getPosXY().x;
    var n = this.getPoint(1).getPosXY().y;
    var s = [100, 87.5, 75, 62.5, 50, 37.5, 25, 12.5, 0];
    for (var h = 0; h < s.length; h++) {
        var l = i + (100 - s[h]) / 100 * (n - i);
        if (l < e + 4 && l > e - 4) {
            this.select();
            return true
        }
    }
    return false
};
var CBiParallelLineObject = create_class(CTriToolObject);
CBiParallelLineObject.prototype.__construct = function (t) {
    CBiParallelLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawBiParallelLinesPlotter(t, this)
};
CBiParallelLineObject.prototype.isSelected = function (t, e) {
    if (CTriParallelLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = this.getPoint(0).getPosXY().x;
    var a = this.getPoint(0).getPosXY().y;
    var i = this.getPoint(1).getPosXY().x;
    var o = this.getPoint(1).getPosXY().y;
    var n = this.getPoint(2).getPosXY().x;
    var s = this.getPoint(2).getPosXY().y;
    var h = {x: r - i, y: a - o};
    var l = {x: r - n, y: a - s};
    var c = {x: h.x + l.x, y: h.y + l.y};
    var u = r - c.x;
    var p = a - c.y;
    var g = {sx: r, sy: a, ex: n, ey: s};
    var _ = {sx: i, sy: o, ex: u, ey: p};
    if (this.calcGap(g, t, e) > 4 && this.calcGap(_, t, e) > 4) {
        return false
    }
    return true
};
var CBiParallelRayLineObject = create_class(CTriToolObject);
CBiParallelRayLineObject.prototype.__construct = function (t) {
    CBiParallelRayLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawBiParallelRayLinesPlotter(t, this)
};
CBiParallelRayLineObject.prototype.isSelected = function (t, e) {
    if (CTriParallelLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = this.getPoint(0).getPosXY().x;
    var a = this.getPoint(0).getPosXY().y;
    var i = this.getPoint(1).getPosXY().x;
    var o = this.getPoint(1).getPosXY().y;
    var n = this.getPoint(2).getPosXY().x;
    var s = this.getPoint(2).getPosXY().y;
    var h = {x: r - i, y: a - o};
    var l = {x: r - n, y: a - s};
    var c = {x: h.x + l.x, y: h.y + l.y};
    var u = r - c.x;
    var p = a - c.y;
    var g = {sx: r, sy: a, ex: n, ey: s};
    var _ = {sx: i, sy: o, ex: u, ey: p};
    if (g.ex > g.sx && t > g.sx - 4 || g.ex < g.sx && t < g.sx + 4 || _.ex > _.sx && t > _.sx - 4 || _.ex < _.sx && t < _.sx + 4) {
        if (this.calcGap(g, t, e) > 4 && this.calcGap(_, t, e) > 4) {
            return false
        }
    } else {
        return false
    }
    this.select();
    return true
};
var CFibFansObject = create_class(CBiToolObject);
CFibFansObject.prototype.__construct = function (t) {
    CFibFansObject.__super.__construct.call(this, t);
    this.drawer = new DrawFibFansPlotter(t, this)
};
CFibFansObject.prototype.isSelected = function (t, e) {
    if (CFibFansObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(0).getPosXY().y;
    var o = this.getPoint(1).getPosXY().x;
    var n = this.getPoint(1).getPosXY().y;
    var s = this.getChartObjects();
    var h = {left: s.pArea.getLeft(), top: s.pArea.getTop(), right: s.pArea.getRight(), bottom: s.pArea.getBottom()};
    var l = [0, 38.2, 50, 61.8];
    for (var c = 0; c < l.length; c++) {
        var u = i + (100 - l[c]) / 100 * (n - i);
        var p = {x: a, y: i};
        var g = {x: o, y: u};
        var _ = getRectCrossPt(h, p, g);
        var d = Math.pow(_[0].x - a, 2) + Math.pow(_[0].y - i, 2);
        var f = Math.pow(_[0].x - o, 2) + Math.pow(_[0].y - n, 2);
        var m = d > f ? {x: _[0].x, y: _[0].y} : {x: _[1].x, y: _[1].y};
        if (m.x > a && t < a) {
            continue
        }
        if (m.x < a && t > a) {
            continue
        }
        var v = new CPoint("frame0.k0");
        v.setPosXY(a, i);
        var C = new CPoint("frame0.k0");
        C.setPosXY(m.x, m.y);
        if (this.calcDistance(v, C, r) > 4) {
            continue
        }
        this.select();
        return true
    }
    return false
};
var CFibRetraceObject = create_class(CBiToolObject);
CFibRetraceObject.prototype.__construct = function (t) {
    CFibRetraceObject.__super.__construct.call(this, t);
    this.drawer = new DrawFibRetracePlotter(t, this)
};
CFibRetraceObject.prototype.isSelected = function (t, e) {
    if (CFibRetraceObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(0).getPosXY().y;
    var o = this.getPoint(1).getPosXY().x;
    var n = this.getPoint(1).getPosXY().y;
    var s = [100, 78.6, 61.8, 50, 38.2, 23.6, 0];
    for (var h = 0; h < s.length; h++) {
        var l = i + (100 - s[h]) / 100 * (n - i);
        if (l < e + 4 && l > e - 4) {
            this.select();
            return true
        }
    }
    return false
};
var CHoriRayLineObject = create_class(CBiToolObject);
CHoriRayLineObject.prototype.__construct = function (t) {
    CHoriRayLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawHoriRayLinesPlotter(t, this)
};
CHoriRayLineObject.prototype.setDrawPos = function (t, e) {
    if (this.points[0].getState() == CPoint.state.Highlight) {
        this.points[0].setPosXY(t, e);
        this.points[1].setPosXYNoSnap(this.points[1].getPosXY().x, this.points[0].getPosXY().y);
        return
    }
    if (this.points[1].getState() == CPoint.state.Highlight) {
        this.points[1].setPosXY(t, e);
        this.points[0].setPosXYNoSnap(this.points[0].getPosXY().x, this.points[1].getPosXY().y)
    }
};
CHoriRayLineObject.prototype.isSelected = function (t, e) {
    if (CHoriRayLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().y;
    var i = this.getPoint(0).getPosXY().x;
    var o = this.getPoint(1).getPosXY().x;
    if (e > a + 4 || e < a - 4) {
        return false
    }
    if (o > i && t < i - 4) {
        return false
    }
    if (o < i && t > i + 4) {
        return false
    }
    this.select();
    return true
};
var CHoriSegLineObject = create_class(CBiToolObject);
CHoriSegLineObject.prototype.__construct = function (t) {
    CHoriSegLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawHoriSegLinesPlotter(t, this)
};
CHoriSegLineObject.prototype.setDrawPos = function (t, e) {
    if (this.points[0].getState() == CPoint.state.Highlight) {
        this.points[0].setPosXY(t, e);
        this.points[1].setPosXYNoSnap(this.points[1].getPosXY().x, this.points[0].getPosXY().y);
        return
    }
    if (this.points[1].getState() == CPoint.state.Highlight) {
        this.points[1].setPosXY(t, e);
        this.points[0].setPosXYNoSnap(this.points[0].getPosXY().x, this.points[1].getPosXY().y)
    }
};
CHoriSegLineObject.prototype.isSelected = function (t, e) {
    if (CHoriSegLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().y;
    var i = this.getPoint(0).getPosXY().x;
    var o = this.getPoint(1).getPosXY().x;
    if (e > a + 4 || e < a - 4) {
        return false
    }
    if (i > o && (t > i + 4 || t < o - 4)) {
        return false
    }
    if (i < o && (t < i - 4 || t > o + 4)) {
        return false
    }
    this.select();
    return true
};
var CHoriStraightLineObject = create_class(CBiToolObject);
CHoriStraightLineObject.prototype.__construct = function (t) {
    CHoriStraightLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawHoriStraightLinesPlotter(t, this)
};
CHoriStraightLineObject.prototype.setDrawPos = function (t, e) {
    for (var r in this.points) {
        this.points[r].setPosXY(t, e)
    }
};
CHoriStraightLineObject.prototype.isSelected = function (t, e) {
    if (CHoriStraightLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().y;
    if (e > a + 4 || e < a - 4) {
        return false
    }
    this.select();
    return true
};
var CRayLineObject = create_class(CBiToolObject);
CRayLineObject.prototype.__construct = function (t) {
    CRayLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawRayLinesPlotter(t, this)
};
CRayLineObject.prototype.isSelected = function (t, e) {
    if (CRayLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(1).getPosXY().x;
    if (i > a && t < a - 4) {
        return false
    }
    if (i < a && t > a + 4) {
        return false
    }
    if (this.calcDistance(this.getPoint(0), this.getPoint(1), r) < 4) {
        this.select();
        return true
    }
    return false
};
var CSegLineObject = create_class(CBiToolObject);
CSegLineObject.prototype.__construct = function (t) {
    CSegLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawSegLinesPlotter(t, this)
};
CSegLineObject.prototype.isSelected = function (t, e) {
    if (CSegLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    if (this.isWithRect(this.getPoint(0), this.getPoint(1), r) == false) {
        return false
    }
    if (this.calcDistance(this.getPoint(0), this.getPoint(1), r) < 4) {
        this.select();
        return true
    }
    return false
};
var CStraightLineObject = create_class(CBiToolObject);
CStraightLineObject.prototype.__construct = function (t) {
    CStraightLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawStraightLinesPlotter(t, this)
};
CStraightLineObject.prototype.isSelected = function (t, e) {
    if (CStraightLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    if (this.calcDistance(this.getPoint(0), this.getPoint(1), r) < 4) {
        this.select();
        return true
    }
    return false
};
var CTriParallelLineObject = create_class(CTriToolObject);
CTriParallelLineObject.prototype.__construct = function (t) {
    CTriParallelLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawTriParallelLinesPlotter(t, this)
};
CTriParallelLineObject.prototype.isSelected = function (t, e) {
    if (CTriParallelLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = this.getChartObjects();
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(0).getPosXY().y;
    var o = this.getPoint(1).getPosXY().x;
    var n = this.getPoint(1).getPosXY().y;
    var s = this.getPoint(2).getPosXY().x;
    var h = this.getPoint(2).getPosXY().y;
    var l = {x: a - o, y: i - n};
    var c = {x: a - s, y: i - h};
    var u = {x: l.x + c.x, y: l.y + c.y};
    var p = a - u.x;
    var g = i - u.y;
    var _ = {sx: a, sy: i, ex: s, ey: h};
    var d = {sx: o, sy: n, ex: p, ey: g};
    var f = {x: a - o, y: i - n};
    var m = {x: s - p, y: h - g};
    var v = {x: o - a, y: n - i};
    var C = {x: p - s, y: g - h};
    var x = Math.abs(v.x - a);
    var P = Math.abs(v.y - i);
    var w = Math.abs(C.x - s);
    var y = Math.abs(C.y - h);
    var M = {sx: x, sy: P, ex: w, ey: y};
    if (this.calcGap(_, t, e) > 4 && this.calcGap(d, t, e) > 4 && this.calcGap(M, t, e) > 4) {
        return false
    }
    this.select();
    return true
};
var CVertiStraightLineObject = create_class(CBiToolObject);
CVertiStraightLineObject.prototype.__construct = function (t) {
    CVertiStraightLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawVertiStraightLinesPlotter(t, this)
};
CVertiStraightLineObject.prototype.setDrawPos = function (t, e) {
    for (var r in this.points) {
        this.points[r].setPosXY(t, e)
    }
};
CVertiStraightLineObject.prototype.isSelected = function (t, e) {
    if (CVertiStraightLineObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    if (t > a + 4 || t < a - 4) {
        return false
    }
    this.select();
    return true
};
var CPriceLineObject = create_class(CSegLineObject);
CPriceLineObject.prototype.__construct = function (t) {
    CPriceLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawPriceLinesPlotter(t, this)
};
CPriceLineObject.prototype.setDrawPos = function (t, e) {
    for (var r in this.points) {
        this.points[r].setPosXY(t, e)
    }
};
CPriceLineObject.prototype.isSelected = function (t, e) {
    if (CFibRetraceObject.__super.isSelected.call(this, t, e) == true) {
        return true
    }
    var r = new CPoint("frame0.k0");
    r.setPosXY(t, e);
    var a = this.getPoint(0).getPosXY().x;
    var i = this.getPoint(0).getPosXY().y;
    var o = this.getPoint(1).getPosXY().x;
    var n = this.getPoint(1).getPosXY().y;
    if (t < a - 4) {
        return false
    }
    if (e >= i + 4 || e <= i - 4) {
        return false
    }
    this.select();
    return true
};
var CArrowLineObject = create_class(CSegLineObject);
CArrowLineObject.prototype.__construct = function (t) {
    CArrowLineObject.__super.__construct.call(this, t);
    this.drawer = new DrawArrowLinesPlotter(t, this)
};
var CToolManager = create_class(NamedObject);
CToolManager.prototype.__construct = function (t) {
    CToolManager.__super.__construct.call(this, t);
    this.selectedObject = -1;
    this.toolObjects = []
};
CToolManager.prototype.getToolObjectCount = function () {
    return this.toolObjects.length
};
CToolManager.prototype.addToolObject = function (t) {
    this.toolObjects.push(t)
};
CToolManager.prototype.getToolObject = function (t) {
    if (t < this.toolObjects.length && t >= 0) {
        return this.toolObjects[t]
    }
    return null
};
CToolManager.prototype.getCurrentObject = function () {
    return this.getToolObject(this.getToolObjectCount() - 1)
};
CToolManager.prototype.getSelectedObject = function () {
    return this.getToolObject(this.selectedObject)
};
CToolManager.prototype.delCurrentObject = function () {
    this.toolObjects.splice(this.getToolObjectCount() - 1, 1)
};
CToolManager.prototype.delSelectedObject = function () {
    this.toolObjects.splice(this.selectedObject, 1);
    this.selectedObject = -1
};
CToolManager.prototype.acceptMouseMoveEvent = function (t, e) {
    if (this.selectedObject == -1) {
        var r = this.toolObjects[this.getToolObjectCount() - 1];
        if (r != null && r.getState() != CToolObject.state.AfterDraw) {
            return r.acceptMouseMoveEvent(t, e)
        }
    } else {
        var a = this.toolObjects[this.selectedObject];
        if (a.getState() == CToolObject.state.Draw) {
            return a.acceptMouseMoveEvent(t, e)
        }
        a.unselect();
        this.selectedObject = -1
    }
    for (var i in this.toolObjects) {
        if (this.toolObjects[i].isSelected(t, e)) {
            this.selectedObject = i;
            return false
        }
    }
    return false
};
CToolManager.prototype.acceptMouseDownEvent = function (t, e) {
    this.mouseDownMove = false;
    if (this.selectedObject == -1) {
        var r = this.toolObjects[this.getToolObjectCount() - 1];
        if (r != null && r.getState() != CToolObject.state.AfterDraw) {
            return r.acceptMouseDownEvent(t, e)
        }
    } else {
        var a = this.toolObjects[this.selectedObject];
        if (a.getState() != CToolObject.state.BeforeDraw) {
            return a.acceptMouseDownEvent(t, e)
        }
    }
    return false
};
CToolManager.prototype.acceptMouseDownMoveEvent = function (t, e) {
    this.mouseDownMove = true;
    if (this.selectedObject == -1) {
        var r = this.toolObjects[this.getToolObjectCount() - 1];
        if (r != null && r.getState() == CToolObject.state.Draw) {
            return r.acceptMouseDownMoveEvent(t, e)
        }
        return false
    } else {
        var a = this.toolObjects[this.selectedObject];
        if (a.getState() != CToolObject.state.BeforeDraw) {
            if (a.acceptMouseDownMoveEvent(t, e) == true) {
                var i = this.toolObjects[this.selectedObject].points;
                for (var o = 0; o < i.length; o++) {
                    if (i[o].state == CPoint.state.Highlight || i[o].state == CPoint.state.Show) {
                        return true
                    }
                }
            }
            return true
        }
    }
};
CToolManager.prototype.acceptMouseUpEvent = function (t, e) {
    if (this.mouseDownMove == true) {
        if (this.selectedObject == -1) {
            var r = this.toolObjects[this.getToolObjectCount() - 1];
            if (r != null && r.getState() == CToolObject.state.Draw) {
                return r.acceptMouseUpEvent(t, e)
            }
            return true
        } else {
            var a = this.toolObjects[this.selectedObject];
            if (a.getState() != CToolObject.state.BeforeDraw) {
                return a.acceptMouseUpEvent(t, e)
            }
        }
    }
    if (this.selectedObject != -1) {
        return true
    }
    var r = this.toolObjects[this.getToolObjectCount() - 1];
    if (r != null) {
        if (r.getState() == CToolObject.state.Draw) {
            return true
        }
        if (!r.isValidMouseXY(t, e)) {
            return false
        }
        if (r.isSelected(t, e)) {
            return true
        }
    }
    return false
};
var CToolPlotter = create_class(NamedObject);
CToolPlotter.prototype.__construct = function (t, e) {
    CToolPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    var r = ChartManager.getInstance();
    var a = r.getArea("frame0.k0.main");
    if (a == null) {
        this.areaPos = {left: 0, top: 0, right: 0, bottom: 0};
        return
    }
    this.areaPos = {left: a.getLeft(), top: a.getTop(), right: a.getRight(), bottom: a.getBottom()};
    this.crossPt = {};
    this.normalSize = 4;
    this.selectedSize = 6;
    this.cursorLen = 4;
    this.cursorGapLen = 3;
    this.theme = ChartManager.getInstance().getTheme(this.getFrameName())
};
CToolPlotter.prototype.drawCursor = function (t) {
    this.drawCrossCursor(t)
};
CToolPlotter.prototype.drawCrossCursor = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    t.fillStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    var e = this.toolObject.getPoint(0).getPosXY();
    if (e == null) {
        return
    }
    var r = e.x;
    var a = e.y;
    var i = this.cursorLen;
    var o = this.cursorGapLen;
    t.fillRect(r, a, 1, 1);
    Plotter.drawLine(t, r - i - o, a, r - o, a);
    Plotter.drawLine(t, r + i + o, a, r + o, a);
    Plotter.drawLine(t, r, a - i - o, r, a - o);
    Plotter.drawLine(t, r, a + i + o, r, a + o)
};
CToolPlotter.prototype.drawCircle = function (t, e, r) {
    var a = e.x;
    var i = e.y;
    t.beginPath();
    t.arc(a, i, r, 0, 2 * Math.PI, false);
    t.fillStyle = this.theme.getColor(Theme.Color.CircleColorFill);
    t.fill();
    t.stroke()
};
CToolPlotter.prototype.drawCtrlPt = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.CircleColorStroke);
    for (var e = 0; e < this.ctrlPtsNum; e++) {
        this.drawCircle(t, this.ctrlPts[1][e], this.normalSize)
    }
};
CToolPlotter.prototype.highlightCtrlPt = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.CircleColorStroke);
    for (var e = 0; e < this.ctrlPtsNum; e++) {
        if (this.toolObject.getPoint(e).getState() == CPoint.state.Highlight) {
            this.drawCircle(t, this.ctrlPts[1][e], this.selectedSize)
        }
    }
};
CToolPlotter.prototype.drawFibRayLines = function (t, e, r) {
    for (var a = 0; a < this.fiboFansSequence.length; a++) {
        var i = e.y + (100 - this.fiboFansSequence[a]) / 100 * (r.y - e.y);
        var o = {x: e.x, y: e.y};
        var n = {x: r.x, y: i};
        this.drawRayLines(t, o, n)
    }
};
CToolPlotter.prototype.drawRayLines = function (t, e, r) {
    this.getAreaPos();
    var a = {x: e.x, y: e.y};
    var i = {x: r.x, y: r.y};
    var o = getRectCrossPt(this.areaPos, a, i);
    var n;
    if (r.x == e.x) {
        if (r.y == e.y) {
            n = r
        } else {
            n = r.y > e.y ? {x: o[1].x, y: o[1].y} : {x: o[0].x, y: o[0].y}
        }
    } else {
        n = r.x > e.x ? {x: o[1].x, y: o[1].y} : {x: o[0].x, y: o[0].y}
    }
    Plotter.drawLine(t, e.x, e.y, n.x, n.y)
};
CToolPlotter.prototype.lenBetweenPts = function (t, e) {
    return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2))
};
CToolPlotter.prototype.getCtrlPts = function () {
    for (var t = 0; t < this.ctrlPtsNum; t++) {
        this.ctrlPts[0][t] = this.toolObject.getPoint(t)
    }
};
CToolPlotter.prototype.updateCtrlPtPos = function () {
    for (var t = 0; t < this.ctrlPtsNum; t++) {
        this.ctrlPts[1][t] = this.ctrlPts[0][t].getPosXY()
    }
};
CToolPlotter.prototype.getAreaPos = function () {
    var t = ChartManager.getInstance();
    var e = t.getArea("frame0.k0.main");
    if (e == null) {
        this.areaPos = {left: 0, top: 0, right: 0, bottom: 0};
        return
    }
    this.areaPos = {
        left: Math.floor(e.getLeft()),
        top: Math.floor(e.getTop()),
        right: Math.floor(e.getRight()),
        bottom: Math.floor(e.getBottom())
    }
};
CToolPlotter.prototype.updateDraw = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    this.draw(t);
    this.drawCtrlPt(t)
};
CToolPlotter.prototype.finishDraw = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    this.draw(t)
};
CToolPlotter.prototype.highlight = function (t) {
    t.strokeStyle = this.theme.getColor(Theme.Color.LineColorSelected);
    this.draw(t);
    this.drawCtrlPt(t);
    this.highlightCtrlPt(t)
};
var DrawStraightLinesPlotter = create_class(CToolPlotter);
DrawStraightLinesPlotter.prototype.__construct = function (t, e) {
    DrawStraightLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawStraightLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        Plotter.drawLine(t, this.areaPos.left, this.startPoint.y, this.areaPos.right, this.startPoint.y)
    } else {
        this.crossPt = getRectCrossPt(this.areaPos, this.startPoint, this.endPoint);
        Plotter.drawLine(t, this.crossPt[0].x, this.crossPt[0].y, this.crossPt[1].x, this.crossPt[1].y)
    }
};
var DrawSegLinesPlotter = create_class(CToolPlotter);
DrawSegLinesPlotter.prototype.__construct = function (t, e) {
    DrawSegLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawSegLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        this.endPoint.x += 1
    }
    Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.endPoint.x, this.endPoint.y)
};
var DrawRayLinesPlotter = create_class(CToolPlotter);
DrawRayLinesPlotter.prototype.__construct = function (t, e) {
    DrawRayLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawRayLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        this.endPoint.x += 1
    }
    this.drawRayLines(t, this.startPoint, this.endPoint)
};
var DrawArrowLinesPlotter = create_class(CToolPlotter);
DrawArrowLinesPlotter.prototype.__construct = function (t, e) {
    DrawArrowLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.arrowSizeRatio = .03;
    this.arrowSize = 4;
    this.crossPt = {x: -1, y: -1};
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawArrowLinesPlotter.prototype.drawArrow = function (t, e, r) {
    var a = this.lenBetweenPts(e, r);
    var i = [r.x - e.x, r.y - e.y];
    this.crossPt.x = e.x + (1 - this.arrowSize / a) * i[0];
    this.crossPt.y = e.y + (1 - this.arrowSize / a) * i[1];
    var o = [-i[1], i[0]];
    var n = {x: o[0], y: o[1]};
    var s = {x: 0, y: 0};
    o[0] = this.arrowSize * n.x / this.lenBetweenPts(n, s);
    o[1] = this.arrowSize * n.y / this.lenBetweenPts(n, s);
    var h = [this.crossPt.x + o[0], this.crossPt.y + o[1]];
    Plotter.drawLine(t, r.x, r.y, h[0], h[1]);
    h = [this.crossPt.x - o[0], this.crossPt.y - o[1]];
    Plotter.drawLine(t, r.x, r.y, h[0], h[1])
};
DrawArrowLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        this.endPoint.x += 1
    }
    Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.endPoint.x, this.endPoint.y);
    this.drawArrow(t, this.startPoint, this.endPoint)
};
var DrawHoriStraightLinesPlotter = create_class(CToolPlotter);
DrawHoriStraightLinesPlotter.prototype.__construct = function (t, e) {
    DrawHoriStraightLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 1;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawHoriStraightLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    Plotter.drawLine(t, this.areaPos.left, this.startPoint.y, this.areaPos.right, this.startPoint.y)
};
var DrawHoriRayLinesPlotter = create_class(CToolPlotter);
DrawHoriRayLinesPlotter.prototype.__construct = function (t, e) {
    DrawHoriRayLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawHoriRayLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x) {
        Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.areaPos.right, this.startPoint.y)
    } else {
        var e = {x: this.endPoint.x, y: this.startPoint.y};
        this.drawRayLines(t, this.startPoint, e)
    }
};
var DrawHoriSegLinesPlotter = create_class(CToolPlotter);
DrawHoriSegLinesPlotter.prototype.__construct = function (t, e) {
    DrawHoriSegLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawHoriSegLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    this.endPoint.y = this.startPoint.y;
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.endPoint.x + 1, this.startPoint.y)
    } else {
        Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.endPoint.x, this.startPoint.y)
    }
};
var DrawVertiStraightLinesPlotter = create_class(CToolPlotter);
DrawVertiStraightLinesPlotter.prototype.__construct = function (t, e) {
    DrawVertiStraightLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 1;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawVertiStraightLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    Plotter.drawLine(t, this.startPoint.x, this.areaPos.top, this.startPoint.x, this.areaPos.bottom)
};
var DrawPriceLinesPlotter = create_class(CToolPlotter);
DrawPriceLinesPlotter.prototype.__construct = function (t, e) {
    DrawPriceLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 1;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawPriceLinesPlotter.prototype.draw = function (t) {
    t.font = "12px Tahoma";
    t.textAlign = "left";
    t.fillStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    var e = this.ctrlPts[0][0].getPosIV().v;
    Plotter.drawLine(t, this.startPoint.x, this.startPoint.y, this.areaPos.right, this.startPoint.y);
    t.fillText(e.toFixed(2), this.startPoint.x + 2, this.startPoint.y - 15)
};
var ParallelLinesPlotter = create_class(CToolPlotter);
ParallelLinesPlotter.prototype.__construct = function (t, e) {
    ParallelLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e
};
ParallelLinesPlotter.prototype.getParaPt = function () {
    var t = [];
    t[0] = this.endPoint.x - this.startPoint.x;
    t[1] = this.endPoint.y - this.startPoint.y;
    var e = [];
    e[0] = this.paraStartPoint.x - this.startPoint.x;
    e[1] = this.paraStartPoint.y - this.startPoint.y;
    this.paraEndPoint = {x: -1, y: -1};
    this.paraEndPoint.x = t[0] + e[0] + this.startPoint.x;
    this.paraEndPoint.y = t[1] + e[1] + this.startPoint.y
};
var DrawBiParallelLinesPlotter = create_class(ParallelLinesPlotter);
DrawBiParallelLinesPlotter.prototype.__construct = function (t, e) {
    DrawBiParallelLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 3;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawBiParallelLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.paraStartPoint = this.ctrlPts[1][1];
    this.endPoint = this.ctrlPts[1][2];
    this.getParaPt();
    this.getAreaPos();
    this.crossPt0 = getRectCrossPt(this.areaPos, this.startPoint, this.endPoint);
    Plotter.drawLine(t, this.crossPt0[0].x, this.crossPt0[0].y, this.crossPt0[1].x, this.crossPt0[1].y);
    this.crossPt1 = getRectCrossPt(this.areaPos, this.paraStartPoint, this.paraEndPoint);
    Plotter.drawLine(t, this.crossPt1[0].x, this.crossPt1[0].y, this.crossPt1[1].x, this.crossPt1[1].y)
};
var DrawBiParallelRayLinesPlotter = create_class(ParallelLinesPlotter);
DrawBiParallelRayLinesPlotter.prototype.__construct = function (t, e) {
    DrawBiParallelRayLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 3;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawBiParallelRayLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.paraStartPoint = this.ctrlPts[1][1];
    this.endPoint = this.ctrlPts[1][2];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        this.endPoint.x += 1
    }
    this.getParaPt();
    this.drawRayLines(t, this.startPoint, this.endPoint);
    this.drawRayLines(t, this.paraStartPoint, this.paraEndPoint)
};
var DrawTriParallelLinesPlotter = create_class(ParallelLinesPlotter);
DrawTriParallelLinesPlotter.prototype.__construct = function (t, e) {
    DrawTriParallelLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.ctrlPtsNum = 3;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawTriParallelLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.paraStartPoint = this.ctrlPts[1][1];
    this.endPoint = this.ctrlPts[1][2];
    var e = [];
    e[0] = this.endPoint.x - this.startPoint.x;
    e[1] = this.endPoint.y - this.startPoint.y;
    var r = [];
    r[0] = this.paraStartPoint.x - this.startPoint.x;
    r[1] = this.paraStartPoint.y - this.startPoint.y;
    this.para1EndPoint = {x: -1, y: -1};
    this.para2EndPoint = {x: -1, y: -1};
    this.para2StartPoint = {x: -1, y: -1};
    this.para1EndPoint.x = e[0] + r[0] + this.startPoint.x;
    this.para1EndPoint.y = e[1] + r[1] + this.startPoint.y;
    this.para2StartPoint.x = this.startPoint.x - r[0];
    this.para2StartPoint.y = this.startPoint.y - r[1];
    this.para2EndPoint.x = this.endPoint.x - r[0];
    this.para2EndPoint.y = this.endPoint.y - r[1];
    this.getAreaPos();
    this.crossPt0 = getRectCrossPt(this.areaPos, this.startPoint, this.endPoint);
    Plotter.drawLine(t, this.crossPt0[0].x, this.crossPt0[0].y, this.crossPt0[1].x, this.crossPt0[1].y);
    this.crossPt1 = getRectCrossPt(this.areaPos, this.paraStartPoint, this.para1EndPoint);
    Plotter.drawLine(t, this.crossPt1[0].x, this.crossPt1[0].y, this.crossPt1[1].x, this.crossPt1[1].y);
    this.crossPt2 = getRectCrossPt(this.areaPos, this.para2StartPoint, this.para2EndPoint);
    Plotter.drawLine(t, this.crossPt2[0].x, this.crossPt2[0].y, this.crossPt2[1].x, this.crossPt2[1].y)
};
var BandLinesPlotter = create_class(CToolPlotter);
BandLinesPlotter.prototype.__construct = function (t, e) {
    BandLinesPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
BandLinesPlotter.prototype.drawLinesAndInfo = function (t, e, r) {
    t.font = "12px Tahoma";
    t.textAlign = "left";
    t.fillStyle = this.theme.getColor(Theme.Color.LineColorNormal);
    var a;
    if (this.toolObject.state == CToolObject.state.Draw) {
        this.startPtValue = this.toolObject.getPoint(0).getPosIV().v;
        this.endPtValue = this.toolObject.getPoint(1).getPosIV().v
    }
    this.getAreaPos();
    for (var i = 0; i < this.fiboSequence.length; i++) {
        var o = e.y + (100 - this.fiboSequence[i]) / 100 * (r.y - e.y);
        if (o > this.areaPos.bottom) {
            continue
        }
        var n = this.startPtValue + (100 - this.fiboSequence[i]) / 100 * (this.endPtValue - this.startPtValue);
        Plotter.drawLine(t, this.areaPos.left, o, this.areaPos.right, o);
        a = this.fiboSequence[i].toFixed(1) + "% " + n.toFixed(1);
        t.fillText(a, this.areaPos.left + 2, o - 15)
    }
};
BandLinesPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    this.drawLinesAndInfo(t, this.startPoint, this.endPoint)
};
var DrawFibRetracePlotter = create_class(BandLinesPlotter);
DrawFibRetracePlotter.prototype.__construct = function (t, e) {
    DrawFibRetracePlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.fiboSequence = [100, 78.6, 61.8, 50, 38.2, 23.6, 0]
};
var DrawBandLinesPlotter = create_class(BandLinesPlotter);
DrawBandLinesPlotter.prototype.__construct = function (t, e) {
    DrawBandLinesPlotter.__super.__construct.call(this, t, e);
    this.toolObject = e;
    this.fiboSequence = [0, 12.5, 25, 37.5, 50, 62.5, 75, 87.5, 100]
};
var DrawFibFansPlotter = create_class(CToolPlotter);
DrawFibFansPlotter.prototype.__construct = function (t, e) {
    DrawFibFansPlotter.__super.__construct.call(this, t);
    this.toolObject = e;
    this.fiboFansSequence = [0, 38.2, 50, 61.8];
    this.ctrlPtsNum = 2;
    this.ctrlPts = new Array(new Array(this.ctrlPtsNum), new Array(2));
    this.getCtrlPts()
};
DrawFibFansPlotter.prototype.drawLinesAndInfo = function (t, e, r) {
    this.drawFibRayLines(t, e, r)
};
DrawFibFansPlotter.prototype.draw = function (t) {
    this.updateCtrlPtPos();
    this.getAreaPos();
    this.startPoint = this.ctrlPts[1][0];
    this.endPoint = this.ctrlPts[1][1];
    if (this.startPoint.x == this.endPoint.x && this.startPoint.y == this.endPoint.y) {
        this.endPoint.x += 1
    }
    this.drawLinesAndInfo(t, this.startPoint, this.endPoint)
};
var CDynamicLinePlotter = create_class(NamedObject);
CDynamicLinePlotter.prototype.__construct = function (t) {
    CDynamicLinePlotter.__super.__construct.call(this, t);
    this.flag = true;
    this.context = ChartManager.getInstance()._overlayContext
};
CDynamicLinePlotter.prototype.getAreaPos = function () {
    var t = ChartManager.getInstance();
    var e = t.getArea("frame0.k0.main");
    if (e == null) {
        this.areaPos = {left: 0, top: 0, right: 0, bottom: 0};
        return
    }
    this.areaPos = {
        left: Math.floor(e.getLeft()),
        top: Math.floor(e.getTop()),
        right: Math.floor(e.getRight()),
        bottom: Math.floor(e.getBottom())
    }
};
CDynamicLinePlotter.prototype.Draw = function (t) {
    this.getAreaPos();
    var e = ChartManager.getInstance();
    var r = e.getDataSource(this.getDataSourceName());
    if (r == null || !is_instance(r, MainDataSource)) {
        return
    }
    this.context.save();
    this.context.rect(this.areaPos.left, this.areaPos.top, this.areaPos.right - this.areaPos.left, this.areaPos.bottom - this.areaPos.top);
    this.context.clip();
    var a = r.getToolObjectCount();
    for (var i = 0; i < a; i++) {
        var o = r.getToolObject(i);
        var n = o.getState();
        switch (n) {
            case CToolObject.state.BeforeDraw:
                o.getPlotter().theme = ChartManager.getInstance().getTheme(this.getFrameName());
                o.getPlotter().drawCursor(this.context);
                break;
            case CToolObject.state.Draw:
                o.getPlotter().theme = ChartManager.getInstance().getTheme(this.getFrameName());
                o.getPlotter().updateDraw(this.context);
                break;
            case CToolObject.state.AfterDraw:
                o.getPlotter().theme = ChartManager.getInstance().getTheme(this.getFrameName());
                o.getPlotter().finishDraw(this.context);
                break;
            default:
                break
        }
    }
    var s = r.getSelectToolObjcet();
    if (s != null && s != CToolObject.state.Draw) {
        s.getPlotter().highlight(this.context)
    }
    this.context.restore();
    return
};
function KLineMouseEvent() {
    $(document).ready(function () {
        function t() {
            if (navigator.userAgent.indexOf("Firefox") >= 0) {
                setTimeout(on_size, 200)
            } else {
                on_size()
            }
        }

        t();
        $(window).resize(t);
        $("#chart_overlayCanvas").bind("contextmenu", function (t) {
            t.cancelBubble = true;
            t.returnValue = false;
            t.preventDefault();
            t.stopPropagation();
            return false
        });
        $("#chart_input_interface").submit(function (t) {
            t.preventDefault();
            var e = $("#chart_input_interface_text").val();
            var r = JSON.parse(e);
            var a = r.command;
            var i = r.content;
            switch (a) {
                case"set current depth":
                    ChartManager.getInstance().getChart().updateDepth(i);
                    break;
                case"set current future":
                    break;
                case"set current language":
                    chart_switch_language(i);
                    break;
                case"set current theme":
                    break;
                default:
                    break
            }
        });
        $("#chart_container .chart_dropdown .chart_dropdown_t").mouseover(function () {
            var t = $("#chart_container");
            var e = $(this);
            var r = e.next();
            var a = t.offset().left;
            var i = e.offset().left;
            var o = t.width();
            var n = e.width();
            var s = r.width();
            var h = (s - n) / 2 << 0;
            if (i - h < a + 4) {
                h = i - a - 4
            } else {
                if (i + n + h > a + o - 4) {
                    h += i + n + h - (a + o - 4) + 19
                } else {
                    h += 4
                }
            }
            r.css({"margin-left": -h});
            e.addClass("chart_dropdown-hover");
            r.addClass("chart_dropdown-hover")
        }).mouseout(function () {
            $(this).next().removeClass("chart_dropdown-hover");
            $(this).removeClass("chart_dropdown-hover")
        });
        $(".chart_dropdown_data").mouseover(function () {
            $(this).addClass("chart_dropdown-hover");
            $(this).prev().addClass("chart_dropdown-hover")
        }).mouseout(function () {
            $(this).prev().removeClass("chart_dropdown-hover");
            $(this).removeClass("chart_dropdown-hover")
        });
        $("#chart_btn_parameter_settings").click(function () {
            $("#chart_parameter_settings").addClass("clicked");
            $(".chart_dropdown_data").removeClass("chart_dropdown-hover");
            $("#chart_parameter_settings").find("th").each(function () {
                var t = $(this).html();
                var e = 0;
                var r = ChartSettings.get();
                var a = r.indics[t];
                $(this.nextElementSibling).find("input").each(function () {
                    if (a != null && e < a.length) {
                        $(this).val(a[e])
                    }
                    e++
                })
            })
        });
        $("#close_settings").click(function () {
            $("#chart_parameter_settings").removeClass("clicked")
        });
        $("#chart_container .chart_toolbar_tabgroup a").click(function () {
            switch_period($(this).parent().attr("name"))
        });
        $("#chart_toolbar_periods_vert ul a").click(function () {
            switch_period($(this).parent().attr("name"))
        });
        $(".market_chooser ul a").click(function () {
            switch_market($(this).attr("name"))
        });
        $("#chart_show_tools").click(function () {
            if ($(this).hasClass("selected")) {
                switch_tools("off")
            } else {
                switch_tools("on")
            }
        });
        $("#chart_toolpanel .chart_toolpanel_button").click(function () {
            $(".chart_dropdown_data").removeClass("chart_dropdown-hover");
            $("#chart_toolpanel .chart_toolpanel_button").removeClass("selected");
            $(this).addClass("selected");
            var t = $(this).children().attr("name");
            GLOBAL_VAR.chartMgr.setRunningMode(ChartManager.DrawingTool[t])
        });
        $("#chart_show_indicator").click(function () {
            if ($(this).hasClass("selected")) {
                switch_indic("off")
            } else {
                switch_indic("on")
            }
        });
        $("#chart_tabbar li a").click(function () {
            $("#chart_tabbar li a").removeClass("selected");
            $(this).addClass("selected");
            var t = $(this).attr("name");
            var e = ChartSettings.get();
            e.charts.indics[1] = t;
            ChartSettings.save();
            if (Template.displayVolume == false) {
                ChartManager.getInstance().getChart().setIndicator(1, t)
            } else {
                ChartManager.getInstance().getChart().setIndicator(2, t)
            }
        });
        $("#chart_select_chart_style a").click(function () {
            $("#chart_select_chart_style a").removeClass("selected");
            $(this).addClass("selected");
            var t = ChartSettings.get();
            t.charts.chartStyle = $(this)[0].innerHTML;
            ChartSettings.save();
            var e = ChartManager.getInstance();
            e.setChartStyle("frame0.k0", $(this).html());
            e.redraw()
        });
        $("#chart_dropdown_themes li").click(function () {
            $("#chart_dropdown_themes li a").removeClass("selected");
            var t = $(this).attr("name");
            if (t == "chart_themes_dark") {
                switch_theme("dark")
            } else {
                if (t == "chart_themes_light") {
                    switch_theme("light")
                }
            }
        });
        $("#chart_select_main_indicator a").click(function () {
            $("#chart_select_main_indicator a").removeClass("selected");
            $(this).addClass("selected");
            var t = $(this).attr("name");
            var e = ChartSettings.get();
            e.charts.mIndic = t;
            ChartSettings.save();
            var r = ChartManager.getInstance();
            if (!r.setMainIndicator("frame0.k0", t)) {
                r.removeMainIndicator("frame0.k0")
            }
            r.redraw()
        });
        $("#chart_toolbar_theme a").click(function () {
            $("#chart_toolbar_theme a").removeClass("selected");
            if ($(this).attr("name") == "dark") {
                switch_theme("dark")
            } else {
                if ($(this).attr("name") == "light") {
                    switch_theme("light")
                }
            }
        });
        $("#chart_select_theme li a").click(function () {
            $("#chart_select_theme a").removeClass("selected");
            if ($(this).attr("name") == "dark") {
                switch_theme("dark")
            } else {
                if ($(this).attr("name") == "light") {
                    switch_theme("light")
                }
            }
        });
        $("#chart_enable_tools li a").click(function () {
            $("#chart_enable_tools a").removeClass("selected");
            if ($(this).attr("name") == "on") {
                switch_tools("on")
            } else {
                if ($(this).attr("name") == "off") {
                    switch_tools("off")
                }
            }
        });
        $("#chart_enable_indicator li a").click(function () {
            $("#chart_enable_indicator a").removeClass("selected");
            if ($(this).attr("name") == "on") {
                switch_indic("on")
            } else {
                if ($(this).attr("name") == "off") {
                    switch_indic("off")
                }
            }
        });
        $("#chart_language_setting_div li a").click(function () {
            $("#chart_language_setting_div a").removeClass("selected");
            if ($(this).attr("name") == "zh-cn") {
                chart_switch_language("zh-cn")
            } else {
                if ($(this).attr("name") == "en-us") {
                    chart_switch_language("en-us")
                } else {
                    if ($(this).attr("name") == "zh-tw") {
                        chart_switch_language("zh-tw")
                    }
                }
            }
        });
        $(document).keyup(function (t) {
            if (t.keyCode == 46) {
                ChartManager.getInstance().deleteToolObject();
                ChartManager.getInstance().redraw("OverlayCanvas", false)
            }
        });
        $("#clearCanvas").click(function () {
            var t = ChartManager.getInstance().getDataSource("frame0.k0");
            var e = t.getToolObjectCount();
            for (var r = 0; r < e; r++) {
                t.delToolObject()
            }
            ChartManager.getInstance().redraw("OverlayCanvas", false)
        });
        $("#chart_overlayCanvas").mousemove(function (t) {
            var e = t.target.getBoundingClientRect();
            var r = t.clientX - e.left;
            var a = t.clientY - e.top;
            var i = ChartManager.getInstance();
            if (GLOBAL_VAR.button_down == true) {
                i.onMouseMove("frame0", r, a, true);
                i.redraw("All", false);
            } else {
                i.onMouseMove("frame0", r, a, false);
                i.redraw("OverlayCanvas")
            }
        }).mouseleave(function (t) {
            var e = t.target.getBoundingClientRect();
            var r = t.clientX - e.left;
            var a = t.clientY - e.top;
            var i = ChartManager.getInstance();
            i.onMouseLeave("frame0", r, a, false);
            i.redraw("OverlayCanvas")
        }).mouseup(function (t) {
            if (t.which != 1) {
                return
            }
            GLOBAL_VAR.button_down = false;
            var e = t.target.getBoundingClientRect();
            var r = t.clientX - e.left;
            var a = t.clientY - e.top;
            var i = ChartManager.getInstance();
            i.onMouseUp("frame0", r, a);
            i.redraw("All")
        }).mousedown(function (t) {
            if (t.which != 1) {
                ChartManager.getInstance().deleteToolObject();
                ChartManager.getInstance().redraw("OverlayCanvas", false);
                return
            }
            GLOBAL_VAR.button_down = true;
            var e = t.target.getBoundingClientRect();
            var r = t.clientX - e.left;
            var a = t.clientY - e.top;
            ChartManager.getInstance().onMouseDown("frame0", r, a)
        });
        $("#chart_parameter_settings :input").change(function () {
            var t = $(this).attr("name");
            var e = 0;
            var r = [];
            var a = ChartManager.getInstance();
            $("#chart_parameter_settings :input").each(function () {
                if ($(this).attr("name") == t) {
                    if ($(this).val() != "" && $(this).val() != null && $(this).val() != undefined) {
                        var a = parseInt($(this).val());
                        r.push(a)
                    }
                    e++
                }
            });
            if (r.length != 0) {
                a.setIndicatorParameters(t, r);
                var i = a.getIndicatorParameters(t);
                var o = [];
                e = 0;
                $("#chart_parameter_settings :input").each(function () {
                    if ($(this).attr("name") == t) {
                        if ($(this).val() != "" && $(this).val() != null && $(this).val() != undefined) {
                            $(this).val(i[e].getValue());
                            o.push(i[e].getValue())
                        }
                        e++
                    }
                });
                var n = ChartSettings.get();
                n.indics[t] = o;
                ChartSettings.save();
                a.redraw("All", false)
            }
        });
        $("#chart_parameter_settings button").click(function () {
            var t = $(this).parents("tr").children("th").html();
            var e = 0;
            var r = ChartManager.getInstance().getIndicatorParameters(t);
            var a = [];
            $(this).parent().prev().children("input").each(function () {
                if (r != null && e < r.length) {
                    $(this).val(r[e].getDefaultValue());
                    a.push(r[e].getDefaultValue())
                }
                e++
            });
            ChartManager.getInstance().setIndicatorParameters(t, a);
            var i = ChartSettings.get();
            i.indics[t] = a;
            ChartSettings.save();
            ChartManager.getInstance().redraw("All", false)
        })
    })
}
var refresh_counter = 0;
var refresh_handler = setInterval(refresh_function, 1e3);
function refresh_function() {
    refresh_counter++;
    var t = ChartManager.getInstance().getLanguage();
    if (refresh_counter > 3600) {
        var e = new Number(refresh_counter / 3600);
        if (t == "en-us") {
            $("#chart_updated_time_text").html(e.toFixed(0) + "h")
        } else {
            $("#chart_updated_time_text").html(e.toFixed(0) + "小时")
        }
    } else {
        if (refresh_counter > 60 && refresh_counter <= 3600) {
            var e = new Number(refresh_counter / 60);
            if (t == "en-us") {
                $("#chart_updated_time_text").html(e.toFixed(0) + "m")
            } else {
                $("#chart_updated_time_text").html(e.toFixed(0) + "分钟")
            }
        } else {
            if (refresh_counter <= 60) {
                if (t == "en-us") {
                    $("#chart_updated_time_text").html(refresh_counter + "s")
                } else {
                    $("#chart_updated_time_text").html(refresh_counter + "秒")
                }
            }
        }
    }
}
function clear_refresh_counter() {
    window.clearInterval(refresh_handler);
    refresh_counter = 0;
    var t = ChartManager.getInstance().getLanguage();
    if (t == "en-us") {
        $("#chart_updated_time_text").html(refresh_counter + "s")
    } else {
        $("#chart_updated_time_text").html(refresh_counter + "秒")
    }
    refresh_handler = setInterval(refresh_function, 1e3)
}
var RequestData = function (showLoading) {
    AbortRequest();
    window.clearTimeout(GLOBAL_VAR.TimeOutId);
    if (showLoading == true) {
        $("#chart_loading").addClass("activated")
    }
    $(document).ready(GLOBAL_VAR.G_HTTP_REQUEST = $.ajax({
        type: "post",
        url: GLOBAL_VAR.url,
        dataType: "json",
        data: GLOBAL_VAR.requestParam,
        timeout: 3e4,
        created: Date.now(),
        beforeSend: function () {
            this.time = GLOBAL_VAR.time_type;
            this.market = GLOBAL_VAR.market_from
        },
        success: function (json) {
            if (GLOBAL_VAR.G_HTTP_REQUEST) {
                if (this.time != GLOBAL_VAR.time_type || this.market != GLOBAL_VAR.market_from) {
                    GLOBAL_VAR.TimeOutId = setTimeout(RequestData, 1e3);
                    return
                }
                if (!json) {
                    return
                }
                if (!json.isSuc) {
                    alert(json.des);
                    kline.refreshPage(json.datas.ecode == 101 ? null : GLOBAL_VAR.market_from);
                    return
                }
                GLOBAL_VAR.market_from_name = json.datas.marketName;
                var chart = ChartManager.getInstance().getChart();
                chart._contract_unit = json.datas.contractUnit;
                chart._money_type = json.datas.moneyType;
                chart._usd_cny_rate = json.datas.USDCNY;
                chart.setTitle();
                kline.setMarketShow(GLOBAL_VAR.market_from_name, chart._contract_unit, chart._money_type, json.datas.url);
                kline.setTopTickers(json.datas.topTickers);
                GLOBAL_VAR.KLineData = eval(json.datas.data);
                try {
                    if (!GLOBAL_VAR.chartMgr.updateData("frame0.k0", GLOBAL_VAR.KLineData)) {
                        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, GLOBAL_VAR.limit, null);
                        GLOBAL_VAR.TimeOutId = setTimeout(RequestData, 1e3);
                        return
                    }
                    clear_refresh_counter()
                } catch (err) {
                    if (err == "data error") {
                        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, GLOBAL_VAR.limit, null);
                        GLOBAL_VAR.TimeOutId = setTimeout(RequestData, 1e3);
                        return
                    }
                }
                GLOBAL_VAR.TimeOutId = setTimeout(TwoSecondThread, 8 * 1e3);
                $("#chart_loading").removeClass("activated");
                ChartManager.getInstance().redraw("All", false)
            }
        },
        error: function (t, e, r) {
            if (t.status == 200 && t.readyState == 4) {
                return
            }
            GLOBAL_VAR.TimeOutId = setTimeout(function () {
                RequestData(true)
            }, 1e3)
        },
        complete: function () {
            GLOBAL_VAR.G_HTTP_REQUEST = null
        }
    }))
};
function AbortRequest() {
    if (GLOBAL_VAR.G_HTTP_REQUEST && GLOBAL_VAR.G_HTTP_REQUEST.readyState != 4) {
        GLOBAL_VAR.G_HTTP_REQUEST.abort()
    }
}
function TwoSecondThread() {
    var t = GLOBAL_VAR.chartMgr.getDataSource("frame0.k0").getLastDate();
    if (t == -1) {
        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, GLOBAL_VAR.limit, null)
    } else {
        GLOBAL_VAR.requestParam = setHttpRequestParam(GLOBAL_VAR.market_from, GLOBAL_VAR.time_type, null, t.toString())
    }
    RequestData()
}
function readCookie() {
    ChartSettings.get();
    ChartSettings.save();
    var t = ChartSettings.get();
    ChartManager.getInstance().setChartStyle("frame0.k0", t.charts.chartStyle);
    var e = t.charts.market_from;
    if (!GLOBAL_VAR.init) {
        e = kline.symbol;
        GLOBAL_VAR.init = true
    }
    GLOBAL_VAR.market_from = e;
    switch_market_selected(e);
    var r = t.charts.period;
    switch_period(r);
    $("#chart_period_" + r + "_v a").addClass("selected");
    $("#chart_period_" + r + "_h a").addClass("selected");
    if (t.charts.indicsStatus == "close") {
        switch_indic("off")
    } else {
        if (t.charts.indicsStatus == "open") {
            switch_indic("on")
        }
    }
    var a = $("#chart_select_main_indicator");
    a.find("a").each(function () {
        if ($(this).attr("name") == t.charts.mIndic) {
            $(this).addClass("selected")
        }
    });
    var i = $("#chart_select_chart_style");
    i.find("a").each(function () {
        if ($(this)[0].innerHTML == t.charts.chartStyle) {
            $(this).addClass("selected")
        }
    });
    ChartManager.getInstance().getChart().setMainIndicator(t.charts.mIndic);
    ChartManager.getInstance().setThemeName("frame0", t.theme);
    switch_tools("off");
    if (t.theme == "Dark") {
        switch_theme("dark")
    } else {
        if (t.theme == "Light") {
            switch_theme("light")
        }
    }
    chart_switch_language(t.language || "zh-cn")
}
var main = function () {
    window._setMarketFrom = function (t) {
        Template.displayVolume = false;
        refreshTemplate();
        readCookie();
        ChartManager.getInstance().getChart().setMarketFrom(t)
    };
    window._set_current_language = function (t) {
        chart_switch_language(t)
    };
    window._set_current_depth = function (t) {
        ChartManager.getInstance().getChart().updateDepth(t)
    };
    window._set_current_url = function (t) {
        GLOBAL_VAR.url = t
    };
    window._set_current_contract_unit = function (t) {
        ChartManager.getInstance().getChart().setCurrentContractUnit(t)
    };
    window._set_money_type = function (t) {
        ChartManager.getInstance().getChart().setCurrentMoneyType(t)
    };
    window._set_usd_cny_rate = function (t) {
        ChartManager.getInstance().getChart()._usd_cny_rate = t
    };
    window._setCaptureMouseWheelDirectly = function (t) {
        ChartManager.getInstance().setCaptureMouseWheelDirectly(t)
    };
    window._current_future_change = new MEvent;
    window._current_theme_change = new MEvent;
    KLineMouseEvent();
    ChartManager.getInstance().bindCanvas("main", document.getElementById("chart_mainCanvas"));
    ChartManager.getInstance().bindCanvas("overlay", document.getElementById("chart_overlayCanvas"));
    refreshTemplate();
    on_size();
    readCookie();
    $("#chart_container").css({visibility: "visible"})
}();
function setHttpRequestParam(t, e, r, a) {
    var i = "needTickers=1&symbol=" + t + "&type=" + e;
    if (r != null) {
        i += "&size=" + r
    } else {
        i += "&since=" + a
    }
    return i
}
function refreshTemplate() {
    GLOBAL_VAR.chartMgr = DefaultTemplate.loadTemplate("frame0.k0", "YUANBAOHUI");
    ChartManager.getInstance().redraw("All", true)
}
function getRectCrossPt(t, e, r) {
    var a;
    var i = {x: -1, y: -1};
    var o = {x: -1, y: -1};
    var n = r.x - e.x;
    var s = r.y - e.y;
    if (Math.abs(n) < 2) {
        i = {x: e.x, y: t.top};
        o = {x: r.x, y: t.bottom};
        a = [i, o];
        return a
    }
    var h = s / n;
    o.x = t.right;
    o.y = e.y + (t.right - e.x) * h;
    i.x = t.left;
    i.y = e.y + (t.left - e.x) * h;
    a = [i, o];
    return a
}
function chart_switch_language(t) {
    var e = t.replace(/-/, "_");
    $("#chart_language_switch_tmp").find("span").each(function () {
        var t = $(this).attr("name");
        var r = $(this).attr(e);
        t = "." + t;
        var a = $(t)[0];
        if (!a) {
            return
        }
        $(t).each(function () {
            $(this)[0].innerHTML = r
        })
    });
    $("#chart_language_setting_div li a[name='" + t + "']").addClass("selected");
    ChartManager.getInstance().setLanguage(t);
    ChartManager.getInstance().getChart().setTitle();
    var e = ChartSettings.get();
    e.language = t;
    ChartSettings.save()
}
function on_size() {
    var t = window.innerWidth;
    var e = window.innerHeight;
    var r = $("#chart_container");
    r.css({width: t + "px", height: e + "px"});
    var a = $("#chart_toolbar");
    var i = $("#chart_toolpanel");
    var o = $("#chart_canvasGroup");
    var n = $("#chart_tabbar");
    var s = i[0].style.display != "inline" ? false : true;
    var h = n[0].style.display != "block" ? false : true;
    var l = {};
    l.x = 0;
    l.y = 0;
    l.w = t;
    l.h = 29;
    var c = {};
    c.x = 0;
    c.y = l.h + 1;
    c.w = s ? 32 : 0;
    c.h = e - c.y;
    var u = {};
    u.w = s ? t - (c.w + 1) : t;
    u.h = h ? 22 : -1;
    u.x = t - u.w;
    u.y = e - (u.h + 1);
    var p = {};
    p.x = u.x;
    p.y = c.y;
    p.w = u.w;
    p.h = u.y - c.y;
    a.css({left: l.x + "px", top: l.y + "px", width: l.w + "px", height: l.h + "px"});
    if (s) {
        i.css({left: c.x + "px", top: c.y + "px", width: c.w + "px", height: c.h + "px"})
    }
    o.css({left: p.x + "px", top: p.y + "px", width: p.w + "px", height: p.h + "px"});
    var g = $("#chart_mainCanvas")[0];
    var _ = $("#chart_overlayCanvas")[0];
    g.width = p.w;
    g.height = p.h;
    _.width = p.w;
    _.height = p.h;
    if (h) {
        n.css({left: u.x + "px", top: u.y + "px", width: u.w + "px", height: u.h + "px"})
    }
    var d = $("#chart_parameter_settings");
    d.css({left: t - d.width() >> 1, top: e - d.height() >> 1});
    var f = $("#chart_loading");
    f.css({left: t - f.width() >> 1, top: e - f.height() >> 2});
    var m = $("#chart_dom_elem_cache");
    var v = $("#chart_select_theme")[0];
    var C = $("#chart_enable_tools")[0];
    var x = $("#chart_enable_indicator")[0];
    var P = $("#chart_toolbar_periods_vert");
    var w = $("#chart_toolbar_periods_horz")[0];
    var y = $("#chart_show_indicator")[0];
    var M = $("#chart_show_tools")[0];
    var A = $("#chart_toolbar_theme")[0];
    var E = $("#chart_dropdown_settings");
    var S = P[0].offsetWidth;
    var T = S + w.offsetWidth;
    var b = T + y.offsetWidth + 4;
    var I = b + M.offsetWidth + 4;
    var D = I + A.offsetWidth;
    var O = E.find(".chart_dropdown_t")[0].offsetWidth + 150;
    S += O;
    T += O;
    b += O;
    I += O;
    D += O;
    if (t < T) {
        m.append(w)
    } else {
        P.after(w)
    }
    if (t < b) {
        m.append(y);
        x.style.display = ""
    } else {
        E.before(y);
        x.style.display = "none"
    }
    if (t < I) {
        m.append(M);
        C.style.display = ""
    } else {
        E.before(M);
        C.style.display = "none"
    }
    if (t < D) {
        m.append(A);
        v.style.display = ""
    } else {
        E.before(A);
        v.style.display = "none"
    }
    if (t < 1050) {
        $("#chart_updated_time").css("display", "none")
    } else {
        $("#chart_updated_time").css("display", "")
    }
    if (t < 900) {
        $("#chart_language_setting_div").css("display", "none")
    } else {
        $("#chart_language_setting_div").css("display", "")
    }
    if (t < 280) {
        $("#chart_exchanges_setting_div").css("display", "none")
    } else {
        $("#chart_exchanges_setting_div").css("display", "")
    }
    ChartManager.getInstance().redraw("All", true)
}
function mouseWheel(t, e) {
    ChartManager.getInstance().scale(e > 0 ? 1 : -1);
    ChartManager.getInstance().redraw("All", true);
    return false
}
function switch_theme(t) {
    $("#chart_toolbar_theme a").removeClass("selected");
    $("#chart_select_theme a").removeClass("selected");
    $("#chart_toolbar_theme").find("a").each(function () {
        if ($(this).attr("name") == t) {
            $(this).addClass("selected")
        }
    });
    $("#chart_select_theme a").each(function () {
        if ($(this).attr("name") == t) {
            $(this).addClass("selected")
        }
    });
    $("#chart_container").attr("class", t);
    $(".marketName_ a").attr("class", t);
    if (t == "dark") {
        $("#trade_container").addClass("dark").removeClass("light");
        $("#markettop").addClass("dark").removeClass("light");
        ChartManager.getInstance().setThemeName("frame0", "Dark");
        var e = ChartSettings.get();
        e.theme = "Dark";
        ChartSettings.save()
    } else {
        if (t == "light") {
            $("#trade_container").addClass("light").removeClass("dark");
            $("#markettop").addClass("light").removeClass("dark");
            ChartManager.getInstance().setThemeName("frame0", "Light");
            var e = ChartSettings.get();
            e.theme = "Light";
            ChartSettings.save()
        }
    }
    var r = {};
    r.command = "set current theme";
    r.content = t;
    $("#chart_output_interface_text").val(JSON.stringify(r));
    $("#chart_output_interface_submit").submit();
    window._current_theme_change.raise(t);
    ChartManager.getInstance().redraw()
}
function switch_tools(t) {
    $(".chart_dropdown_data").removeClass("chart_dropdown-hover");
    $("#chart_toolpanel .chart_toolpanel_button").removeClass("selected");
    $("#chart_enable_tools a").removeClass("selected");
    if (t == "on") {
        $("#chart_show_tools").addClass("selected");
        $("#chart_enable_tools a").each(function () {
            if ($(this).attr("name") == "on") {
                $(this).addClass("selected")
            }
        });
        $("#chart_toolpanel")[0].style.display = "inline";
        if (ChartManager.getInstance()._drawingTool == ChartManager.DrawingTool.Cursor) {
            $("#chart_Cursor").parent().addClass("selected")
        } else {
            if (ChartManager.getInstance()._drawingTool == ChartManager.DrawingTool.CrossCursor) {
                $("#chart_CrossCursor").parent().addClass("selected")
            }
        }
    } else {
        if (t == "off") {
            $("#chart_show_tools").removeClass("selected");
            $("#chart_enable_tools a").each(function () {
                if ($(this).attr("name") == "off") {
                    $(this).addClass("selected")
                }
            });
            $("#chart_toolpanel")[0].style.display = "none";
            ChartManager.getInstance().setRunningMode(ChartManager.getInstance()._beforeDrawingTool);
            ChartManager.getInstance().redraw("All", true)
        }
    }
    on_size()
}
function switch_indic(t) {
    $("#chart_enable_indicator a").removeClass("selected");
    $("#chart_enable_indicator a[name='" + t + "']").addClass("selected");
    if (t == "on") {
        $("#chart_show_indicator").addClass("selected");
        var e = ChartSettings.get();
        e.charts.indicsStatus = "open";
        ChartSettings.save();
        var r = e.charts.indics[1];
        if (Template.displayVolume == false) {
            ChartManager.getInstance().getChart().setIndicator(2, r)
        } else {
            ChartManager.getInstance().getChart().setIndicator(2, r)
        }
        $("#chart_tabbar").find("a").each(function () {
            if ($(this).attr("name") == r) {
                $(this).addClass("selected")
            }
        });
        $("#chart_tabbar")[0].style.display = "block"
    } else {
        if (t == "off") {
            $("#chart_show_indicator").removeClass("selected");
            ChartManager.getInstance().getChart().setIndicator(2, "NONE");
            var e = ChartSettings.get();
            e.charts.indicsStatus = "close";
            ChartSettings.save();
            $("#chart_tabbar")[0].style.display = "none";
            $("#chart_tabbar a").removeClass("selected")
        }
    }
    on_size()
}
function switch_period(t) {
    $("#chart_container .chart_toolbar_tabgroup a").removeClass("selected");
    $("#chart_toolbar_periods_vert ul a").removeClass("selected");
    $("#chart_container .chart_toolbar_tabgroup a").each(function () {
        if ($(this).parent().attr("name") == t) {
            $(this).addClass("selected")
        }
    });
    $("#chart_toolbar_periods_vert ul a").each(function () {
        if ($(this).parent().attr("name") == t) {
            $(this).addClass("selected")
        }
    });
    ChartManager.getInstance().showCursor();
    calcPeriodWeight(t);
    if (t == "line") {
        ChartManager.getInstance().getChart().strIsLine = true;
        ChartManager.getInstance().setChartStyle("frame0.k0", "Line");
        ChartManager.getInstance().getChart().setCurrentPeriod("01m");
        var e = ChartSettings.get();
        e.charts.period = t;
        ChartSettings.save();
        return
    }
    ChartManager.getInstance().getChart().strIsLine = false;
    var r = GLOBAL_VAR.tagMapPeriod[t];
    ChartManager.getInstance().setChartStyle("frame0.k0", ChartSettings.get().charts.chartStyle);
    ChartManager.getInstance().getChart().setCurrentPeriod(r);
    var e = ChartSettings.get();
    e.charts.period = t;
    ChartSettings.save()
}
function switch_market_selected(t) {
    kline.reset(t);
    $(".market_chooser ul a").removeClass("selected");
    $(".market_chooser ul a[name='" + t + "']").addClass("selected");
    ChartManager.getInstance().getChart()._market_from = t;
    var e = ChartSettings.get();
    e.charts.market_from = t;
    ChartSettings.save()
}
function switch_market(t) {
    switch_market_selected(t);
    var e = ChartSettings.get();
    if (e.charts.period == "line") {
        ChartManager.getInstance().getChart().strIsLine = true;
        ChartManager.getInstance().setChartStyle("frame0.k0", "Line")
    } else {
        ChartManager.getInstance().getChart().strIsLine = false;
        ChartManager.getInstance().setChartStyle("frame0.k0", ChartSettings.get().charts.chartStyle)
    }
    ChartManager.getInstance().getChart().setMarketFrom(t)
}
function IsSupportedBrowers() {
    function t() {
        var t = document.createElement("canvas");
        return !!(t.getContext && t.getContext("2d"))
    }

    if (!t()) {
        return false
    }
    return true
}
function calcPeriodWeight(t) {
    var e = t;
    if (t != "line") {
        e = GLOBAL_VAR.periodMap[GLOBAL_VAR.tagMapPeriod[t]]
    }
    var r = ChartSettings.get().charts.period_weight;
    for (var a in r) {
        if (r[a] > r[e]) {
            r[a] -= 1
        }
    }
    r[e] = 8;
    ChartSettings.save();
    $("#chart_toolbar_periods_horz").find("li").each(function () {
        var t = $(this).attr("name");
        var e = t;
        if (t != "line") {
            e = GLOBAL_VAR.periodMap[GLOBAL_VAR.tagMapPeriod[t]]
        }
        if (r[e] == 0) {
            $(this).css("display", "none")
        } else {
            $(this).css("display", "inline-block")
        }
    })
}